function clib() {
    if [[ $1 == "install" ]]; then
         /opt/homebrew/bin/clib $@ --prefix ~/.clib
    else
        /opt/homebrew/bin/clib $@
    fi
}

function abin() {
if [ -z "$1" ]; then
    echo "Usage: abin <path/to/bin>"
    exit 1
fi
 cmd="ln -s $(realpath $1) $(realpath ~/abin)/$(basename $1)"
 echo $cmd
 eval $cmd
}
function debug () {
     $(fd . --type executable --max-depth  1 target/debug) $@
}
function release() {
    $(fd . --type executable --max-depth  1 target/release) $@
}

fzf-preview-file() {
	rg --files | fzf --reverse --preview 'bat --color=always {}'
}


cat() {
  if [[ $1 == *".jpg"* || $1 == *".png"* || $1 == *".gif"* ]]; then
    imgcat -width="33c" $1
  elif [[ $1 == *".txt"* ]]; then
    bat $1
  elif [[ $1 == *".md" ]]; then
    mdcat -p $1
  elif [[ $1 == *".DS_Store" ]]; then
    dstore $1
  else
    zat $@
  fi
}

function pick() {
  # echo $1 | rev
    command=$( \
    echo $1 |  \
    tr ':' '\n' | \
    fzf  --with-nth=1 -d ":" --height 10 --layout=reverse --disabled --print0 \
    )
    eval "$command" ${@:2}
}


 function frg() {
    rg --ignore-case --color=always --line-number --no-heading @Args |
      fzf --ansi \
          --color 'hl:-1:underline,hl+:-1:underline:reverse' \
          --delimiter ':' \
          --preview "bat --color=always {1} --theme='Solarized (light)' --highlight-line {2}" \
          --preview-window 'up,60%,border-bottom,+{2}+3/3,~3'


}

function fcurl() {
    randomcurl="$(find /usr/local/bin/curl_*| shuf -n 1)"
    $randomcurl $@
}

function headtail() {
 head $@
 echo "..."
 tail $@
}

# function dmg() {
#    if [ ! -d "$1" ]; then
#      echo "Folder not found: $1"
#      exit 1
#    fi
#    DIRNAME="$(basename $1)"
#    DESTNAME="${@%/}"
#    hdiutil create -volname $DIRNAME -srcfolder $1 -ov -format UDZO $DESTNAME.dmg
# }


curltime() {
    curl -so /dev/null -w "\
   namelookup:  %{time_namelookup}s\n\
      connect:  %{time_connect}s\n\
   appconnect:  %{time_appconnect}s\n\
  pretransfer:  %{time_pretransfer}s\n\
     redirect:  %{time_redirect}s\n\
starttransfer:  %{time_starttransfer}s\n\
-------------------------\n\
        total:  %{time_total}s\n" "$@"
}

function cfz() {
    code `fz`
}
clipfile() {
    osascript \
        -e 'on run args' \
        -e 'set the clipboard to POSIX file (first item of args)' \
        -e end \
        "$@"
}

copy(){ osascript -e{'on run{a}','set the clipboard to posix file a',end} "$(greadlink -f -- "$1")";}

function gnext() {
    code `git diff --name-only --diff-filter=U|head -n 1`
}

#function lists3() {
#    aws s3api list-objects-v2 --bucket "$1" > "$1.json"
#}

function zipy() {
	folder="${@%/}"
	dx "$folder"
	zip -qrm "$folder.zip" "$folder" && /bin/rm -r "$folder"
	dx "$folder.zip"
}

function zgets3() {
    FOLDER="$1/$( dirname $2 )"
    echo "downloading $1/$2"
    mkdir -p $FOLDER
    aws s3api get-object --bucket $1 --key "$2" "$1/$2"
}

function gadd() {
    git diff --name-only --diff-filter=U | fzf
}

function lastDownload() {
  find ~/Downloads -maxdepth 1 -type f -print0 | xargs -0 ls -t1 | head -1
}
function tomp3() {
 ffmpeg -i $1 -acodec libmp3lame -f mp3 -b:a 320k $1.mp3 -y
}

function gcontinue() {

    git add `git diff --name-only --diff-filter=U | xargs` && git rebase --continue
}

function pack_auto () {
       tar --create --gzip --file "$1.tar.gz" $1
}

# fit aliases
function checkout() {
    git stash && git checkout $1 && git stash apply
}

function lsbranch() {
    git branch --sort=-committerdate | fzf
}

function br() {
#    git branch --sort=-committerdate  -a
    git checkout `git branch --sort=-committerdate | fzf | xargs`
}

function swap() { mv "$1" "$1._tmp" && mv "$2" "$1" && mv "$1._tmp" "$2"; }



# Archives
function extract {
  if [ -z "$1" ]; then
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f $1 ]; then
      case $1 in
        *.tar.bz2)   tar xvjf $1    ;;
        *.tar.gz)    tar xvzf $1    ;;
        *.tar.xz)    tar xvJf $1    ;;
        *.lzma)      unlzma $1      ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar x -ad $1 ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xvf $1     ;;
        *.tbz2)      tar xvjf $1    ;;
        *.tgz)       tar xvzf $1    ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *.xz)        unxz $1        ;;
        *.exe)       cabextract $1  ;;
        *)           echo "extract: '$1' - unknown archive method" ;;
      esac
    else
      echo "$1 - file does not exist"
    fi
  fi
}

function abspath() {
    if [ -d "$1" ]; then
        echo "$(cd $1; pwd)"
    elif [ -f "$1" ]; then
        if [[ $1 == */* ]]; then
            echo "$(cd ${1%/*}; pwd)/${1##*/}"
        else
            echo "$(pwd)/$1"
        fi
    fi
}


# This script was automatically generated by the broot program
# More information can be found in https://github.com/Canop/broot
# This function starts broot and executes the command
# it produces, if any.
# It's needed because some shell commands, like `cd`,
# have no useful effect if executed in a subshell.
function br {
    local cmd cmd_file code
    cmd_file=$(mktemp)
    if broot --outcmd "$cmd_file" "$@"; then
        cmd=$(<"$cmd_file")
        command rm -f "$cmd_file"
        eval "$cmd"
    else
        code=$?
        command rm -f "$cmd_file"
        return "$code"
    fi
}
