complete -c bun -l silent -d Don\'t\ print\ the\ script\ command
complete -c bun -l filter -d 'Run a script in all workspace packages matching the pattern'
complete -c bun -s b -l bun -d Force\ a\ script\ or\ package\ to\ use\ Bun\'s\ runtime\ instead\ of\ Node.js\ \(via\ symlinking\ node\)
complete -c bun -l shell -d Control\ the\ shell\ used\ for\ package.json\ scripts.\ Supports\ either\ \'bun\'\ or\ \'system\'
complete -c bun -l watch -d 'Automatically restart the process on file change'
complete -c bun -l hot -d 'Enable auto reload in the Bun runtime, test runner, or bundler'
complete -c bun -l no-clear-screen -d 'Disable clearing the terminal screen on reload when --hot or --watch is enabled'
complete -c bun -l smol -d 'Use less memory, but run garbage collection more often'
complete -c bun -s r -l preload -d 'Import a module before other modules are loaded'
complete -c bun -l inspect -d Activate\ Bun\'s\ debugger
complete -c bun -l inspect-wait -d Activate\ Bun\'s\ debugger,\ wait\ for\ a\ connection\ before\ executing
complete -c bun -l inspect-brk -d Activate\ Bun\'s\ debugger,\ set\ breakpoint\ on\ first\ line\ of\ code\ and\ wait
complete -c bun -l if-present -d 'Exit without an error if the entrypoint does not exist'
complete -c bun -l no-install -d 'Disable auto install in the Bun runtime'
complete -c bun -l install -d 'Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).'
complete -c bun -s i -d 'Auto-install dependencies during execution. Equivalent to --install=fallback.'
complete -c bun -s e -l eval -d 'Evaluate argument as a script'
complete -c bun -l print -d 'Evaluate argument as a script and print the result'
complete -c bun -l prefer-offline -d 'Skip staleness checks for packages in the Bun runtime and resolve from disk'
complete -c bun -l prefer-latest -d 'Use the latest matching versions of packages in the Bun runtime, always checking npm'
complete -c bun -s p -l port -d 'Set the default port for Bun.serve'
complete -c bun -l conditions -d 'Pass custom conditions to resolve'
complete -c bun -l fetch-preconnect -d 'Preconnect to a URL while code is loading'
complete -c bun -l max-http-header-size -d 'Set the maximum size of HTTP headers in bytes. Default is 16KiB'
complete -c bun -l main-fields -d 'Main fields to lookup in package.json. Defaults to --target dependent'
complete -c bun -l extension-order -d 'Defaults to: .tsx,.ts,.jsx,.js,.json'
complete -c bun -l tsconfig-override -d 'Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json'
complete -c bun -s d -l define -d 'Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.'
complete -c bun -s l -l loader -d 'Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi'
complete -c bun -l no-macros -d 'Disable macros from being executed in the bundler, transpiler and runtime'
complete -c bun -l jsx-factory -d 'Changes the function called when compiling JSX elements using the classic JSX runtime'
complete -c bun -l jsx-fragment -d 'Changes the function called when compiling JSX fragments'
complete -c bun -l jsx-import-source -d 'Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"'
complete -c bun -l jsx-runtime -d '"automatic" (default) or "classic"'
complete -c bun -l ignore-dce-annotations -d 'Ignore tree-shaking annotations such as @__PURE__'
complete -c bun -l env-file -d 'Load environment variables from the specified file(s)'
complete -c bun -l cwd -d Absolute\ path\ to\ resolve\ files\ \&\ entry\ points\ from.\ This\ just\ changes\ the\ process\'\ cwd.
complete -c bun -s c -l config -d 'Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml'
complete -c bun -s h -l help -d 'Display this menu and exit'
