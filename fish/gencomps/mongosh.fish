complete -c mongosh -s h -l help -d 'Show this usage information'
complete -c mongosh -s f -l file -d '[arg]                           Load the specified mongosh script'
complete -c mongosh -l host -d '[arg]                           Server to connect to'
complete -c mongosh -l port -d '[arg]                           Port to connect to'
complete -c mongosh -l build-info -d 'Show build information'
complete -c mongosh -n __fish_no_arguments -l version -d 'Show version information'
complete -c mongosh -l quiet -d 'Silence output from the shell during the connection process'
complete -c mongosh -l shell -d 'Run the shell after executing files'
complete -c mongosh -l nodb -d Don\'t\ connect\ to\ mongod\ on\ startup\ -\ no\ \'db\ address\'\ \[arg\]\ expected
complete -c mongosh -l norc -d Will\ not\ run\ the\ \'.mongoshrc.js\'\ file\ on\ start\ up
complete -c mongosh -l eval -d '[arg]                           Evaluate javascript'
complete -c mongosh -s u -l username -d '[arg]                       Username for authentication'
complete -c mongosh -s p -l password -d '[arg]                       Password for authentication'
complete -c mongosh -l authenticationDatabase -d '[arg]         User source (defaults to dbname)'
complete -c mongosh -l authenticationMechanism -d '[arg]        Authentication mechanism'
complete -c mongosh -l awsIamSessionToken -d '[arg]             AWS IAM Temporary Session Token ID'
complete -c mongosh -l gssapiServiceName -d '[arg]              Service name to use when authenticating using GSSAPI/Kerberos'
complete -c mongosh -l sspiHostnameCanonicalization -d '[arg]   Specify the SSPI hostname canonicalization (none or forward, available on Windows)'
complete -c mongosh -l sspiRealmOverride -d '[arg]              Specify the SSPI server realm (available on Windows)'
complete -c mongosh -l tls -d 'Use TLS for all connections'
complete -c mongosh -l tlsCertificateKeyFile -d '[arg]          PEM certificate/key file for TLS'
complete -c mongosh -l tlsCertificateKeyFilePassword -d '[arg]  Password for key in PEM file for TLS'
complete -c mongosh -l tlsCAFile -d '[arg]                      Certificate Authority file for TLS'
complete -c mongosh -l tlsAllowInvalidHostnames -d 'Allow connections to servers with non-matching hostnames'
complete -c mongosh -l tlsAllowInvalidCertificates -d 'Allow connections to servers with invalid certificates'
complete -c mongosh -l tlsCertificateSelector -d '[arg]         TLS Certificate in system store (Windows and macOS only)'
complete -c mongosh -l tlsCRLFile -d '[arg]                     Specifies the .pem file that contains the Certificate Revocation List'
complete -c mongosh -l tlsDisabledProtocols -d '[arg]           Comma separated list of TLS protocols to disable [TLS1_0,TLS1_1,TLS1_2]'
complete -c mongosh -l tlsFIPSMode -d Enable\ the\ system\ TLS\ library\'s\ FIPS\ mode
complete -c mongosh -l apiVersion -d '[arg]                     Specifies the API version to connect with'
complete -c mongosh -l apiStrict -d 'Use strict API version mode'
complete -c mongosh -l apiDeprecationErrors -d 'Fail deprecated commands for the specified API version'
complete -c mongosh -l awsAccessKeyId -d '[arg]                 AWS Access Key for FLE Amazon KMS'
complete -c mongosh -l awsSecretAccessKey -d '[arg]             AWS Secret Key for FLE Amazon KMS'
complete -c mongosh -l awsSessionToken -d '[arg]                Optional AWS Session Token ID'
complete -c mongosh -l keyVaultNamespace -d '[arg]              database.collection to store encrypted FLE parameters'
complete -c mongosh -l kmsURL -d '[arg]                         Test parameter to override the URL of the KMS endpoint'
complete -c mongosh -l oidcTrustedEndpoint -d 'Treat the cluster/database mongosh as a trusted endpoint'
complete -c mongosh -l oidcIdTokenAsAccessToken -d 'Use ID tokens in place of access tokens for auth'
