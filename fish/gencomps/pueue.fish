complete -f -c pueue -n __fish_use_subcommand -a add -d 'Enqueue a task for execution.'
complete -f -c pueue -n __fish_use_subcommand -a pueue -d add\ \'ls\ \$HOME\ \&\&\ echo\ \"Some\ string\"\'
complete -f -c pueue -n __fish_use_subcommand -a remove -d 'Remove tasks from the list. Running or paused tasks need to be killed first'
complete -f -c pueue -n __fish_use_subcommand -a stash -d Stashed\ tasks\ won\'t\ be\ automatically\ started.\ You\ have\ to\ enqueue\ them\ or\ start\ them\ by\ hand
complete -f -c pueue -n __fish_use_subcommand -a enqueue -d Enqueue\ stashed\ tasks.\ They\'ll\ be\ handled\ normally\ afterwards
complete -f -c pueue -n __fish_use_subcommand -a start -d 'Resume operation of specific tasks or groups of tasks.'
complete -f -c pueue -n __fish_use_subcommand -a By -d 'default, this resumes the default group and all its tasks.'
complete -f -c pueue -n __fish_use_subcommand -a Can -d 'also be used force-start specific tasks.'
complete -f -c pueue -n __fish_use_subcommand -a restart -d 'Restart failed or successful task(s).'
complete -f -c pueue -n __fish_use_subcommand -a By -d default,\ identical\ tasks\ will\ be\ created\ and\ enqueued,\ but\ it\'s\ possible\ to\ restart\ in-place.
complete -f -c pueue -n __fish_use_subcommand -a You -d 'can also edit a few properties, such as the path and the command, before restarting.'
complete -f -c pueue -n __fish_use_subcommand -a pause -d 'Either pause running tasks or specific groups of tasks.'
complete -f -c pueue -n __fish_use_subcommand -a By -d 'default, pauses the default group and all its tasks.'
complete -f -c pueue -n __fish_use_subcommand -a A -d paused\ queue\ \(group\)\ won\'t\ start\ any\ new\ tasks.
complete -f -c pueue -n __fish_use_subcommand -a kill -d 'Kill specific running tasks or whole task groups..'
complete -f -c pueue -n __fish_use_subcommand -a Kills -d 'all tasks of the default group when no ids or a specific group are provided.'
complete -f -c pueue -n __fish_use_subcommand -a send -d Send\ something\ to\ a\ task.\ Useful\ for\ sending\ confirmations\ such\ as\ \'y\\n\'
complete -f -c pueue -n __fish_use_subcommand -a Multiple -d 'properties can be added in one go.'
complete -f -c pueue -n __fish_use_subcommand -a group -d 'Use this to add or remove groups.'
complete -f -c pueue -n __fish_use_subcommand -a By -d 'default, this will simply display all known groups.'
complete -f -c pueue -n __fish_use_subcommand -a status -d 'Display the current status of all tasks'
complete -f -c pueue -n __fish_use_subcommand -a format-status -d 'Accept a list or map of JSON pueue tasks via stdin and display it just like "pueue status".'
complete -f -c pueue -n __fish_use_subcommand -a A -d 'simple example might look like this:'
complete -f -c pueue -n __fish_use_subcommand -a pueue -d status\ --json\ \|\ jq\ -c\ \'.tasks\'\ \|\ pueue\ format-status
complete -f -c pueue -n __fish_use_subcommand -a log -d 'Display the log output of finished tasks.'
complete -f -c pueue -n __fish_use_subcommand -a Only -d 'the last few lines will be shown by default.'
complete -f -c pueue -n __fish_use_subcommand -a If -d 'you want to follow the output of a task, please use the "follow" subcommand.'
complete -f -c pueue -n __fish_use_subcommand -a follow -d 'Follow the output of a currently running task. This command works like "tail -f"'
complete -f -c pueue -n __fish_use_subcommand -a wait -d 'Wait until tasks are finished.'
complete -f -c pueue -n __fish_use_subcommand -a By -d 'default, this will wait for all tasks in the default group to finish.'
complete -c pueue -l color -d '<COLOR>      Colorize the output; auto enables color output when connected to a tty [default: auto] [possible values: auto, never, always]'
complete -c pueue -s c -l config -d '<CONFIG>    If provided, Pueue only uses this config file. This path can also be set via the "PUEUE_CONFIG_PATH" environment variable. The commandline option overwrites the environment variable!'
complete -c pueue -s p -l profile -d '<PROFILE>  The name of the profile that should be loaded from your config file'
complete -c pueue -s h -l help -d 'Print help'
complete -c pueue -n __fish_no_arguments -s V -l version -d 'Print version'
