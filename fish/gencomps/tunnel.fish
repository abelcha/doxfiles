complete -f -c tunnel -n __fish_use_subcommand -a login -d 'Generate a configuration file with your login details'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l config -d 'value                                      Specifies a config file in YAML format.'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l origincert -d 'value                                  Path to the certificate generated for your origin when you run cloudflared login. (default: "/me/.cloudflared/cert.pem") [$TUNNEL_ORIGIN_CERT]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l autoupdate-freq -d 'value                             Autoupdate frequency. Default is 24h0m0s. (default: 24h0m0s)'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l no-autoupdate -d 'Disable periodic check for updates, restarting the server with the new version. (default: false) [$NO_AUTOUPDATE]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l metrics -d 'value                                     Listen address for metrics reporting. (default: "localhost:") [$TUNNEL_METRICS]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l pidfile -d value\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Write\ the\ application\'s\ PID\ to\ this\ file\ after\ first\ successful\ connection.\ \[\$TUNNEL_PIDFILE\]
complete -c tunnel -n '__fish_seen_subcommand_from login' -l url -d 'URL                                           Connect to the local webserver at URL. (default: "http://localhost:8080") [$TUNNEL_URL]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l hello-world -d 'Run Hello World Server (default: false) [$TUNNEL_HELLO_WORLD]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l socks5 -d '--url                                      specify if this tunnel is running as a SOCK5 Server This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_SOCKS]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-connect-timeout -d '--url                       HTTP proxy timeout for establishing a new connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-tls-timeout -d '--url                           HTTP proxy timeout for completing a TLS handshake This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 10s)'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-tcp-keepalive -d '--url                         HTTP proxy TCP keepalive duration This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-no-happy-eyeballs -d '--url                     HTTP proxy should disable "happy eyeballs" for IPv4/v6 fallback This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false)'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-keepalive-connections -d '--url                 HTTP proxy maximum keepalive connection pool size This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 100)'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-keepalive-timeout -d '--url                     HTTP proxy timeout for closing an idle connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-connection-timeout -d 'value                    DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-expect-continue-timeout -d 'value               DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l http-host-header -d '--url                            Sets the HTTP Host header for the local webserver. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_HTTP_HOST_HEADER]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l origin-server-name -d '--url                          Hostname on the origin server certificate. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_SERVER_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l unix-socket -d 'value                                 Path to unix socket to use instead of --url [$TUNNEL_UNIX_SOCKET]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l origin-ca-pool -d '--url                              Path to the CA for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_CA_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l no-tls-verify -d --url\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Disables\ TLS\ verification\ of\ the\ certificate\ presented\ by\ your\ origin.\ Will\ allow\ any\ certificate\ from\ the\ origin\ to\ be\ accepted.\ Note:\ The\ connection\ from\ your\ machine\ to\ Cloudflare\'s\ Edge\ is\ still\ encrypted.\ This\ flag\ only\ takes\ effect\ if\ you\ define\ your\ origin\ with\ --url\ and\ if\ you\ do\ not\ use\ ingress\ rules.\ The\ recommended\ way\ is\ to\ rely\ on\ ingress\ rules\ and\ define\ this\ property\ under\ `originRequest`\ as\ per\ https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress\ \(default:\ false\)\ \[\$NO_TLS_VERIFY\]
complete -c tunnel -n '__fish_seen_subcommand_from login' -l no-chunked-encoding -d '--url                         Disables chunked transfer encoding; useful if you are running a WSGI server. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_NO_CHUNKED_ENCODING]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l http2-origin -d 'Enables HTTP/2 origin servers. (default: false) [$TUNNEL_ORIGIN_ENABLE_HTTP2]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l bastion -d 'Runs as jump host (default: false) [$TUNNEL_BASTION]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-address -d 'value                               Listen address for the proxy. (default: "127.0.0.1") [$TUNNEL_PROXY_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-port -d 'value                                  Listen port for the proxy. (default: 0) [$TUNNEL_PROXY_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l loglevel -d 'value                                    Application logging level {debug, info, warn, error, fatal}. At debug level cloudflared will log request URL, method, protocol, content length, as well as, all request and response headers. This can expose sensitive information in your logs. (default: "info") [$TUNNEL_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l transport-loglevel -d 'value, --proto-loglevel value  Transport logging level(previously called protocol logging level) {debug, info, warn, error, fatal} (default: "info") [$TUNNEL_PROTO_LOGLEVEL, $TUNNEL_TRANSPORT_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l logfile -d 'value                                     Save application log to this file for reporting issues. [$TUNNEL_LOGFILE]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l log-directory -d 'value                               Save application log to this directory for reporting issues. [$TUNNEL_LOGDIRECTORY]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l trace-output -d 'value                                Name of trace output file, generated when cloudflared stops. [$TUNNEL_TRACE_OUTPUT]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-dns -d 'Run a DNS over HTTPS proxy server. (default: false) [$TUNNEL_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-dns-port -d 'value                              Listen on given port for the DNS over HTTPS proxy server. (default: 53) [$TUNNEL_DNS_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-dns-address -d 'value                           Listen address for the DNS over HTTPS proxy server. (default: "localhost") [$TUNNEL_DNS_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-dns-upstream -d 'value                          Upstream endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://1.1.1.1/dns-query", "https://1.0.0.1/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_UPSTREAM]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-dns-max-upstream-conns -d 'value                Maximum concurrent connections to upstream. Setting to 0 means unlimited. (default: 5) [$TUNNEL_DNS_MAX_UPSTREAM_CONNS]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l proxy-dns-bootstrap -d 'value                         bootstrap endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://162.159.36.1/dns-query", "https://162.159.46.1/dns-query", "https://[2606:4700:4700::1111]/dns-query", "https://[2606:4700:4700::1001]/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_BOOTSTRAP]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l credentials-file -d 'value, --cred-file value         Filepath at which to read/write the tunnel credentials [$TUNNEL_CRED_FILE]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l region -d 'value                                      Cloudflare Edge region to connect to. Omit or set to empty to connect to the global region. [$TUNNEL_REGION]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l edge-ip-version -d 'value                             Cloudflare Edge IP address version to connect with. {4, 6, auto} (default: "4") [$TUNNEL_EDGE_IP_VERSION]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l edge-bind-address -d 'value                           Bind to IP address for outgoing connections to Cloudflare Edge. [$TUNNEL_EDGE_BIND_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l hostname -d 'value                                    Set a hostname on a Cloudflare zone to route traffic through this tunnel. [$TUNNEL_HOSTNAME]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l lb-pool -d 'value                                     The name of a (new/existing) load balancing pool to add this origin to. [$TUNNEL_LB_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l metrics-update-freq -d 'value                         Frequency to update tunnel metrics (default: 5s) [$TUNNEL_METRICS_UPDATE_FREQ]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l tag -d 'KEY=VALUE                                     Custom tags used to identify this tunnel, in format KEY=VALUE. Multiple tags may be specified  (accepts multiple inputs) [$TUNNEL_TAG]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l retries -d 'value                                     Maximum number of retries for connection/protocol errors. (default: 5) [$TUNNEL_RETRIES]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l label -d 'value                                       Use this option to give a meaningful label to a specific connector. When a tunnel starts up, a connector id unique to the tunnel is generated. This is a uuid. To make it easier to identify a connector, we will use the hostname of the machine the tunnel is running on along with the connector ID. This option exists if one wants to have more control over what their individual connectors are called.'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l grace-period -d 'value                                When cloudflared receives SIGINT/SIGTERM it will stop accepting new requests, wait for in-progress requests to terminate, then shutdown. Waiting for in-progress requests will timeout after this grace period, or when a second SIGTERM/SIGINT is received. (default: 30s) [$TUNNEL_GRACE_PERIOD]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l compression-quality -d 'value                         (beta) Use cross-stream compression instead HTTP compression. 0-off, 1-low, 2-medium, >=3-high. (default: 0) [$TUNNEL_COMPRESSION_LEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l name -d 'value, -n value                              Stable name to identify the tunnel. Using this flag will create, route and run a tunnel. For production usage, execute each command separately [$TUNNEL_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -l management-diagnostics -d 'Enables the in-depth diagnostic routes to be made available over the management service (/debug/pprof, /metrics, etc.) (default: true) [$TUNNEL_MANAGEMENT_DIAGNOSTICS]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -s f -l overwrite-dns -d 'Overwrites existing DNS records with this hostname (default: false) [$TUNNEL_FORCE_PROVISIONING_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from login' -s h -l help -d 'show help (default: false)'
complete -f -c tunnel -n __fish_use_subcommand -a create -d 'Create a new tunnel with given name'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l config -d 'value                                      Specifies a config file in YAML format.'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l origincert -d 'value                                  Path to the certificate generated for your origin when you run cloudflared login. (default: "/me/.cloudflared/cert.pem") [$TUNNEL_ORIGIN_CERT]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l autoupdate-freq -d 'value                             Autoupdate frequency. Default is 24h0m0s. (default: 24h0m0s)'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l no-autoupdate -d 'Disable periodic check for updates, restarting the server with the new version. (default: false) [$NO_AUTOUPDATE]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l metrics -d 'value                                     Listen address for metrics reporting. (default: "localhost:") [$TUNNEL_METRICS]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l pidfile -d value\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Write\ the\ application\'s\ PID\ to\ this\ file\ after\ first\ successful\ connection.\ \[\$TUNNEL_PIDFILE\]
complete -c tunnel -n '__fish_seen_subcommand_from create' -l url -d 'URL                                           Connect to the local webserver at URL. (default: "http://localhost:8080") [$TUNNEL_URL]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l hello-world -d 'Run Hello World Server (default: false) [$TUNNEL_HELLO_WORLD]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l socks5 -d '--url                                      specify if this tunnel is running as a SOCK5 Server This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_SOCKS]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-connect-timeout -d '--url                       HTTP proxy timeout for establishing a new connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-tls-timeout -d '--url                           HTTP proxy timeout for completing a TLS handshake This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 10s)'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-tcp-keepalive -d '--url                         HTTP proxy TCP keepalive duration This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-no-happy-eyeballs -d '--url                     HTTP proxy should disable "happy eyeballs" for IPv4/v6 fallback This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false)'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-keepalive-connections -d '--url                 HTTP proxy maximum keepalive connection pool size This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 100)'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-keepalive-timeout -d '--url                     HTTP proxy timeout for closing an idle connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-connection-timeout -d 'value                    DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-expect-continue-timeout -d 'value               DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l http-host-header -d '--url                            Sets the HTTP Host header for the local webserver. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_HTTP_HOST_HEADER]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l origin-server-name -d '--url                          Hostname on the origin server certificate. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_SERVER_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l unix-socket -d 'value                                 Path to unix socket to use instead of --url [$TUNNEL_UNIX_SOCKET]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l origin-ca-pool -d '--url                              Path to the CA for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_CA_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l no-tls-verify -d --url\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Disables\ TLS\ verification\ of\ the\ certificate\ presented\ by\ your\ origin.\ Will\ allow\ any\ certificate\ from\ the\ origin\ to\ be\ accepted.\ Note:\ The\ connection\ from\ your\ machine\ to\ Cloudflare\'s\ Edge\ is\ still\ encrypted.\ This\ flag\ only\ takes\ effect\ if\ you\ define\ your\ origin\ with\ --url\ and\ if\ you\ do\ not\ use\ ingress\ rules.\ The\ recommended\ way\ is\ to\ rely\ on\ ingress\ rules\ and\ define\ this\ property\ under\ `originRequest`\ as\ per\ https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress\ \(default:\ false\)\ \[\$NO_TLS_VERIFY\]
complete -c tunnel -n '__fish_seen_subcommand_from create' -l no-chunked-encoding -d '--url                         Disables chunked transfer encoding; useful if you are running a WSGI server. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_NO_CHUNKED_ENCODING]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l http2-origin -d 'Enables HTTP/2 origin servers. (default: false) [$TUNNEL_ORIGIN_ENABLE_HTTP2]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l bastion -d 'Runs as jump host (default: false) [$TUNNEL_BASTION]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-address -d 'value                               Listen address for the proxy. (default: "127.0.0.1") [$TUNNEL_PROXY_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-port -d 'value                                  Listen port for the proxy. (default: 0) [$TUNNEL_PROXY_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l loglevel -d 'value                                    Application logging level {debug, info, warn, error, fatal}. At debug level cloudflared will log request URL, method, protocol, content length, as well as, all request and response headers. This can expose sensitive information in your logs. (default: "info") [$TUNNEL_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l transport-loglevel -d 'value, --proto-loglevel value  Transport logging level(previously called protocol logging level) {debug, info, warn, error, fatal} (default: "info") [$TUNNEL_PROTO_LOGLEVEL, $TUNNEL_TRANSPORT_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l logfile -d 'value                                     Save application log to this file for reporting issues. [$TUNNEL_LOGFILE]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l log-directory -d 'value                               Save application log to this directory for reporting issues. [$TUNNEL_LOGDIRECTORY]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l trace-output -d 'value                                Name of trace output file, generated when cloudflared stops. [$TUNNEL_TRACE_OUTPUT]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-dns -d 'Run a DNS over HTTPS proxy server. (default: false) [$TUNNEL_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-dns-port -d 'value                              Listen on given port for the DNS over HTTPS proxy server. (default: 53) [$TUNNEL_DNS_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-dns-address -d 'value                           Listen address for the DNS over HTTPS proxy server. (default: "localhost") [$TUNNEL_DNS_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-dns-upstream -d 'value                          Upstream endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://1.1.1.1/dns-query", "https://1.0.0.1/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_UPSTREAM]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-dns-max-upstream-conns -d 'value                Maximum concurrent connections to upstream. Setting to 0 means unlimited. (default: 5) [$TUNNEL_DNS_MAX_UPSTREAM_CONNS]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l proxy-dns-bootstrap -d 'value                         bootstrap endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://162.159.36.1/dns-query", "https://162.159.46.1/dns-query", "https://[2606:4700:4700::1111]/dns-query", "https://[2606:4700:4700::1001]/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_BOOTSTRAP]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l credentials-file -d 'value, --cred-file value         Filepath at which to read/write the tunnel credentials [$TUNNEL_CRED_FILE]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l region -d 'value                                      Cloudflare Edge region to connect to. Omit or set to empty to connect to the global region. [$TUNNEL_REGION]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l edge-ip-version -d 'value                             Cloudflare Edge IP address version to connect with. {4, 6, auto} (default: "4") [$TUNNEL_EDGE_IP_VERSION]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l edge-bind-address -d 'value                           Bind to IP address for outgoing connections to Cloudflare Edge. [$TUNNEL_EDGE_BIND_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l hostname -d 'value                                    Set a hostname on a Cloudflare zone to route traffic through this tunnel. [$TUNNEL_HOSTNAME]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l lb-pool -d 'value                                     The name of a (new/existing) load balancing pool to add this origin to. [$TUNNEL_LB_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l metrics-update-freq -d 'value                         Frequency to update tunnel metrics (default: 5s) [$TUNNEL_METRICS_UPDATE_FREQ]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l tag -d 'KEY=VALUE                                     Custom tags used to identify this tunnel, in format KEY=VALUE. Multiple tags may be specified  (accepts multiple inputs) [$TUNNEL_TAG]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l retries -d 'value                                     Maximum number of retries for connection/protocol errors. (default: 5) [$TUNNEL_RETRIES]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l label -d 'value                                       Use this option to give a meaningful label to a specific connector. When a tunnel starts up, a connector id unique to the tunnel is generated. This is a uuid. To make it easier to identify a connector, we will use the hostname of the machine the tunnel is running on along with the connector ID. This option exists if one wants to have more control over what their individual connectors are called.'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l grace-period -d 'value                                When cloudflared receives SIGINT/SIGTERM it will stop accepting new requests, wait for in-progress requests to terminate, then shutdown. Waiting for in-progress requests will timeout after this grace period, or when a second SIGTERM/SIGINT is received. (default: 30s) [$TUNNEL_GRACE_PERIOD]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l compression-quality -d 'value                         (beta) Use cross-stream compression instead HTTP compression. 0-off, 1-low, 2-medium, >=3-high. (default: 0) [$TUNNEL_COMPRESSION_LEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l name -d 'value, -n value                              Stable name to identify the tunnel. Using this flag will create, route and run a tunnel. For production usage, execute each command separately [$TUNNEL_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -l management-diagnostics -d 'Enables the in-depth diagnostic routes to be made available over the management service (/debug/pprof, /metrics, etc.) (default: true) [$TUNNEL_MANAGEMENT_DIAGNOSTICS]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -s f -l overwrite-dns -d 'Overwrites existing DNS records with this hostname (default: false) [$TUNNEL_FORCE_PROVISIONING_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from create' -s h -l help -d 'show help (default: false)'
complete -f -c tunnel -n __fish_use_subcommand -a route -d 'Define which traffic routed from Cloudflare edge to this tunnel: requests to a DNS hostname, to a Cloudflare Load Balancer, or traffic originating from Cloudflare WARP clients'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l config -d 'value                                      Specifies a config file in YAML format.'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l origincert -d 'value                                  Path to the certificate generated for your origin when you run cloudflared login. (default: "/me/.cloudflared/cert.pem") [$TUNNEL_ORIGIN_CERT]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l autoupdate-freq -d 'value                             Autoupdate frequency. Default is 24h0m0s. (default: 24h0m0s)'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l no-autoupdate -d 'Disable periodic check for updates, restarting the server with the new version. (default: false) [$NO_AUTOUPDATE]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l metrics -d 'value                                     Listen address for metrics reporting. (default: "localhost:") [$TUNNEL_METRICS]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l pidfile -d value\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Write\ the\ application\'s\ PID\ to\ this\ file\ after\ first\ successful\ connection.\ \[\$TUNNEL_PIDFILE\]
complete -c tunnel -n '__fish_seen_subcommand_from route' -l url -d 'URL                                           Connect to the local webserver at URL. (default: "http://localhost:8080") [$TUNNEL_URL]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l hello-world -d 'Run Hello World Server (default: false) [$TUNNEL_HELLO_WORLD]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l socks5 -d '--url                                      specify if this tunnel is running as a SOCK5 Server This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_SOCKS]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-connect-timeout -d '--url                       HTTP proxy timeout for establishing a new connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-tls-timeout -d '--url                           HTTP proxy timeout for completing a TLS handshake This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 10s)'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-tcp-keepalive -d '--url                         HTTP proxy TCP keepalive duration This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-no-happy-eyeballs -d '--url                     HTTP proxy should disable "happy eyeballs" for IPv4/v6 fallback This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false)'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-keepalive-connections -d '--url                 HTTP proxy maximum keepalive connection pool size This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 100)'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-keepalive-timeout -d '--url                     HTTP proxy timeout for closing an idle connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-connection-timeout -d 'value                    DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-expect-continue-timeout -d 'value               DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l http-host-header -d '--url                            Sets the HTTP Host header for the local webserver. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_HTTP_HOST_HEADER]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l origin-server-name -d '--url                          Hostname on the origin server certificate. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_SERVER_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l unix-socket -d 'value                                 Path to unix socket to use instead of --url [$TUNNEL_UNIX_SOCKET]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l origin-ca-pool -d '--url                              Path to the CA for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_CA_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l no-tls-verify -d --url\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Disables\ TLS\ verification\ of\ the\ certificate\ presented\ by\ your\ origin.\ Will\ allow\ any\ certificate\ from\ the\ origin\ to\ be\ accepted.\ Note:\ The\ connection\ from\ your\ machine\ to\ Cloudflare\'s\ Edge\ is\ still\ encrypted.\ This\ flag\ only\ takes\ effect\ if\ you\ define\ your\ origin\ with\ --url\ and\ if\ you\ do\ not\ use\ ingress\ rules.\ The\ recommended\ way\ is\ to\ rely\ on\ ingress\ rules\ and\ define\ this\ property\ under\ `originRequest`\ as\ per\ https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress\ \(default:\ false\)\ \[\$NO_TLS_VERIFY\]
complete -c tunnel -n '__fish_seen_subcommand_from route' -l no-chunked-encoding -d '--url                         Disables chunked transfer encoding; useful if you are running a WSGI server. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_NO_CHUNKED_ENCODING]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l http2-origin -d 'Enables HTTP/2 origin servers. (default: false) [$TUNNEL_ORIGIN_ENABLE_HTTP2]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l bastion -d 'Runs as jump host (default: false) [$TUNNEL_BASTION]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-address -d 'value                               Listen address for the proxy. (default: "127.0.0.1") [$TUNNEL_PROXY_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-port -d 'value                                  Listen port for the proxy. (default: 0) [$TUNNEL_PROXY_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l loglevel -d 'value                                    Application logging level {debug, info, warn, error, fatal}. At debug level cloudflared will log request URL, method, protocol, content length, as well as, all request and response headers. This can expose sensitive information in your logs. (default: "info") [$TUNNEL_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l transport-loglevel -d 'value, --proto-loglevel value  Transport logging level(previously called protocol logging level) {debug, info, warn, error, fatal} (default: "info") [$TUNNEL_PROTO_LOGLEVEL, $TUNNEL_TRANSPORT_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l logfile -d 'value                                     Save application log to this file for reporting issues. [$TUNNEL_LOGFILE]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l log-directory -d 'value                               Save application log to this directory for reporting issues. [$TUNNEL_LOGDIRECTORY]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l trace-output -d 'value                                Name of trace output file, generated when cloudflared stops. [$TUNNEL_TRACE_OUTPUT]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-dns -d 'Run a DNS over HTTPS proxy server. (default: false) [$TUNNEL_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-dns-port -d 'value                              Listen on given port for the DNS over HTTPS proxy server. (default: 53) [$TUNNEL_DNS_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-dns-address -d 'value                           Listen address for the DNS over HTTPS proxy server. (default: "localhost") [$TUNNEL_DNS_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-dns-upstream -d 'value                          Upstream endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://1.1.1.1/dns-query", "https://1.0.0.1/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_UPSTREAM]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-dns-max-upstream-conns -d 'value                Maximum concurrent connections to upstream. Setting to 0 means unlimited. (default: 5) [$TUNNEL_DNS_MAX_UPSTREAM_CONNS]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l proxy-dns-bootstrap -d 'value                         bootstrap endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://162.159.36.1/dns-query", "https://162.159.46.1/dns-query", "https://[2606:4700:4700::1111]/dns-query", "https://[2606:4700:4700::1001]/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_BOOTSTRAP]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l credentials-file -d 'value, --cred-file value         Filepath at which to read/write the tunnel credentials [$TUNNEL_CRED_FILE]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l region -d 'value                                      Cloudflare Edge region to connect to. Omit or set to empty to connect to the global region. [$TUNNEL_REGION]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l edge-ip-version -d 'value                             Cloudflare Edge IP address version to connect with. {4, 6, auto} (default: "4") [$TUNNEL_EDGE_IP_VERSION]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l edge-bind-address -d 'value                           Bind to IP address for outgoing connections to Cloudflare Edge. [$TUNNEL_EDGE_BIND_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l hostname -d 'value                                    Set a hostname on a Cloudflare zone to route traffic through this tunnel. [$TUNNEL_HOSTNAME]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l lb-pool -d 'value                                     The name of a (new/existing) load balancing pool to add this origin to. [$TUNNEL_LB_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l metrics-update-freq -d 'value                         Frequency to update tunnel metrics (default: 5s) [$TUNNEL_METRICS_UPDATE_FREQ]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l tag -d 'KEY=VALUE                                     Custom tags used to identify this tunnel, in format KEY=VALUE. Multiple tags may be specified  (accepts multiple inputs) [$TUNNEL_TAG]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l retries -d 'value                                     Maximum number of retries for connection/protocol errors. (default: 5) [$TUNNEL_RETRIES]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l label -d 'value                                       Use this option to give a meaningful label to a specific connector. When a tunnel starts up, a connector id unique to the tunnel is generated. This is a uuid. To make it easier to identify a connector, we will use the hostname of the machine the tunnel is running on along with the connector ID. This option exists if one wants to have more control over what their individual connectors are called.'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l grace-period -d 'value                                When cloudflared receives SIGINT/SIGTERM it will stop accepting new requests, wait for in-progress requests to terminate, then shutdown. Waiting for in-progress requests will timeout after this grace period, or when a second SIGTERM/SIGINT is received. (default: 30s) [$TUNNEL_GRACE_PERIOD]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l compression-quality -d 'value                         (beta) Use cross-stream compression instead HTTP compression. 0-off, 1-low, 2-medium, >=3-high. (default: 0) [$TUNNEL_COMPRESSION_LEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l name -d 'value, -n value                              Stable name to identify the tunnel. Using this flag will create, route and run a tunnel. For production usage, execute each command separately [$TUNNEL_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -l management-diagnostics -d 'Enables the in-depth diagnostic routes to be made available over the management service (/debug/pprof, /metrics, etc.) (default: true) [$TUNNEL_MANAGEMENT_DIAGNOSTICS]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -s f -l overwrite-dns -d 'Overwrites existing DNS records with this hostname (default: false) [$TUNNEL_FORCE_PROVISIONING_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from route' -s h -l help -d 'show help (default: false)'
complete -f -c tunnel -n __fish_use_subcommand -a vnet -d 'Configure and query virtual networks to manage private IP routes with overlapping IPs.'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l config -d 'value                                      Specifies a config file in YAML format.'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l origincert -d 'value                                  Path to the certificate generated for your origin when you run cloudflared login. (default: "/me/.cloudflared/cert.pem") [$TUNNEL_ORIGIN_CERT]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l autoupdate-freq -d 'value                             Autoupdate frequency. Default is 24h0m0s. (default: 24h0m0s)'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l no-autoupdate -d 'Disable periodic check for updates, restarting the server with the new version. (default: false) [$NO_AUTOUPDATE]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l metrics -d 'value                                     Listen address for metrics reporting. (default: "localhost:") [$TUNNEL_METRICS]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l pidfile -d value\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Write\ the\ application\'s\ PID\ to\ this\ file\ after\ first\ successful\ connection.\ \[\$TUNNEL_PIDFILE\]
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l url -d 'URL                                           Connect to the local webserver at URL. (default: "http://localhost:8080") [$TUNNEL_URL]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l hello-world -d 'Run Hello World Server (default: false) [$TUNNEL_HELLO_WORLD]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l socks5 -d '--url                                      specify if this tunnel is running as a SOCK5 Server This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_SOCKS]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-connect-timeout -d '--url                       HTTP proxy timeout for establishing a new connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-tls-timeout -d '--url                           HTTP proxy timeout for completing a TLS handshake This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 10s)'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-tcp-keepalive -d '--url                         HTTP proxy TCP keepalive duration This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-no-happy-eyeballs -d '--url                     HTTP proxy should disable "happy eyeballs" for IPv4/v6 fallback This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false)'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-keepalive-connections -d '--url                 HTTP proxy maximum keepalive connection pool size This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 100)'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-keepalive-timeout -d '--url                     HTTP proxy timeout for closing an idle connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-connection-timeout -d 'value                    DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-expect-continue-timeout -d 'value               DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l http-host-header -d '--url                            Sets the HTTP Host header for the local webserver. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_HTTP_HOST_HEADER]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l origin-server-name -d '--url                          Hostname on the origin server certificate. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_SERVER_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l unix-socket -d 'value                                 Path to unix socket to use instead of --url [$TUNNEL_UNIX_SOCKET]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l origin-ca-pool -d '--url                              Path to the CA for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_CA_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l no-tls-verify -d --url\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Disables\ TLS\ verification\ of\ the\ certificate\ presented\ by\ your\ origin.\ Will\ allow\ any\ certificate\ from\ the\ origin\ to\ be\ accepted.\ Note:\ The\ connection\ from\ your\ machine\ to\ Cloudflare\'s\ Edge\ is\ still\ encrypted.\ This\ flag\ only\ takes\ effect\ if\ you\ define\ your\ origin\ with\ --url\ and\ if\ you\ do\ not\ use\ ingress\ rules.\ The\ recommended\ way\ is\ to\ rely\ on\ ingress\ rules\ and\ define\ this\ property\ under\ `originRequest`\ as\ per\ https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress\ \(default:\ false\)\ \[\$NO_TLS_VERIFY\]
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l no-chunked-encoding -d '--url                         Disables chunked transfer encoding; useful if you are running a WSGI server. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_NO_CHUNKED_ENCODING]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l http2-origin -d 'Enables HTTP/2 origin servers. (default: false) [$TUNNEL_ORIGIN_ENABLE_HTTP2]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l bastion -d 'Runs as jump host (default: false) [$TUNNEL_BASTION]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-address -d 'value                               Listen address for the proxy. (default: "127.0.0.1") [$TUNNEL_PROXY_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-port -d 'value                                  Listen port for the proxy. (default: 0) [$TUNNEL_PROXY_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l loglevel -d 'value                                    Application logging level {debug, info, warn, error, fatal}. At debug level cloudflared will log request URL, method, protocol, content length, as well as, all request and response headers. This can expose sensitive information in your logs. (default: "info") [$TUNNEL_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l transport-loglevel -d 'value, --proto-loglevel value  Transport logging level(previously called protocol logging level) {debug, info, warn, error, fatal} (default: "info") [$TUNNEL_PROTO_LOGLEVEL, $TUNNEL_TRANSPORT_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l logfile -d 'value                                     Save application log to this file for reporting issues. [$TUNNEL_LOGFILE]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l log-directory -d 'value                               Save application log to this directory for reporting issues. [$TUNNEL_LOGDIRECTORY]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l trace-output -d 'value                                Name of trace output file, generated when cloudflared stops. [$TUNNEL_TRACE_OUTPUT]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-dns -d 'Run a DNS over HTTPS proxy server. (default: false) [$TUNNEL_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-dns-port -d 'value                              Listen on given port for the DNS over HTTPS proxy server. (default: 53) [$TUNNEL_DNS_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-dns-address -d 'value                           Listen address for the DNS over HTTPS proxy server. (default: "localhost") [$TUNNEL_DNS_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-dns-upstream -d 'value                          Upstream endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://1.1.1.1/dns-query", "https://1.0.0.1/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_UPSTREAM]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-dns-max-upstream-conns -d 'value                Maximum concurrent connections to upstream. Setting to 0 means unlimited. (default: 5) [$TUNNEL_DNS_MAX_UPSTREAM_CONNS]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l proxy-dns-bootstrap -d 'value                         bootstrap endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://162.159.36.1/dns-query", "https://162.159.46.1/dns-query", "https://[2606:4700:4700::1111]/dns-query", "https://[2606:4700:4700::1001]/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_BOOTSTRAP]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l credentials-file -d 'value, --cred-file value         Filepath at which to read/write the tunnel credentials [$TUNNEL_CRED_FILE]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l region -d 'value                                      Cloudflare Edge region to connect to. Omit or set to empty to connect to the global region. [$TUNNEL_REGION]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l edge-ip-version -d 'value                             Cloudflare Edge IP address version to connect with. {4, 6, auto} (default: "4") [$TUNNEL_EDGE_IP_VERSION]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l edge-bind-address -d 'value                           Bind to IP address for outgoing connections to Cloudflare Edge. [$TUNNEL_EDGE_BIND_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l hostname -d 'value                                    Set a hostname on a Cloudflare zone to route traffic through this tunnel. [$TUNNEL_HOSTNAME]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l lb-pool -d 'value                                     The name of a (new/existing) load balancing pool to add this origin to. [$TUNNEL_LB_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l metrics-update-freq -d 'value                         Frequency to update tunnel metrics (default: 5s) [$TUNNEL_METRICS_UPDATE_FREQ]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l tag -d 'KEY=VALUE                                     Custom tags used to identify this tunnel, in format KEY=VALUE. Multiple tags may be specified  (accepts multiple inputs) [$TUNNEL_TAG]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l retries -d 'value                                     Maximum number of retries for connection/protocol errors. (default: 5) [$TUNNEL_RETRIES]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l label -d 'value                                       Use this option to give a meaningful label to a specific connector. When a tunnel starts up, a connector id unique to the tunnel is generated. This is a uuid. To make it easier to identify a connector, we will use the hostname of the machine the tunnel is running on along with the connector ID. This option exists if one wants to have more control over what their individual connectors are called.'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l grace-period -d 'value                                When cloudflared receives SIGINT/SIGTERM it will stop accepting new requests, wait for in-progress requests to terminate, then shutdown. Waiting for in-progress requests will timeout after this grace period, or when a second SIGTERM/SIGINT is received. (default: 30s) [$TUNNEL_GRACE_PERIOD]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l compression-quality -d 'value                         (beta) Use cross-stream compression instead HTTP compression. 0-off, 1-low, 2-medium, >=3-high. (default: 0) [$TUNNEL_COMPRESSION_LEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l name -d 'value, -n value                              Stable name to identify the tunnel. Using this flag will create, route and run a tunnel. For production usage, execute each command separately [$TUNNEL_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -l management-diagnostics -d 'Enables the in-depth diagnostic routes to be made available over the management service (/debug/pprof, /metrics, etc.) (default: true) [$TUNNEL_MANAGEMENT_DIAGNOSTICS]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -s f -l overwrite-dns -d 'Overwrites existing DNS records with this hostname (default: false) [$TUNNEL_FORCE_PROVISIONING_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from vnet' -s h -l help -d 'show help (default: false)'
complete -f -c tunnel -n __fish_use_subcommand -a run -d 'Proxy a local web server by running the given tunnel'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l config -d 'value                                      Specifies a config file in YAML format.'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l origincert -d 'value                                  Path to the certificate generated for your origin when you run cloudflared login. (default: "/me/.cloudflared/cert.pem") [$TUNNEL_ORIGIN_CERT]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l autoupdate-freq -d 'value                             Autoupdate frequency. Default is 24h0m0s. (default: 24h0m0s)'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l no-autoupdate -d 'Disable periodic check for updates, restarting the server with the new version. (default: false) [$NO_AUTOUPDATE]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l metrics -d 'value                                     Listen address for metrics reporting. (default: "localhost:") [$TUNNEL_METRICS]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l pidfile -d value\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Write\ the\ application\'s\ PID\ to\ this\ file\ after\ first\ successful\ connection.\ \[\$TUNNEL_PIDFILE\]
complete -c tunnel -n '__fish_seen_subcommand_from run' -l url -d 'URL                                           Connect to the local webserver at URL. (default: "http://localhost:8080") [$TUNNEL_URL]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l hello-world -d 'Run Hello World Server (default: false) [$TUNNEL_HELLO_WORLD]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l socks5 -d '--url                                      specify if this tunnel is running as a SOCK5 Server This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_SOCKS]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-connect-timeout -d '--url                       HTTP proxy timeout for establishing a new connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-tls-timeout -d '--url                           HTTP proxy timeout for completing a TLS handshake This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 10s)'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-tcp-keepalive -d '--url                         HTTP proxy TCP keepalive duration This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-no-happy-eyeballs -d '--url                     HTTP proxy should disable "happy eyeballs" for IPv4/v6 fallback This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false)'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-keepalive-connections -d '--url                 HTTP proxy maximum keepalive connection pool size This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 100)'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-keepalive-timeout -d '--url                     HTTP proxy timeout for closing an idle connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-connection-timeout -d 'value                    DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-expect-continue-timeout -d 'value               DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l http-host-header -d '--url                            Sets the HTTP Host header for the local webserver. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_HTTP_HOST_HEADER]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l origin-server-name -d '--url                          Hostname on the origin server certificate. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_SERVER_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l unix-socket -d 'value                                 Path to unix socket to use instead of --url [$TUNNEL_UNIX_SOCKET]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l origin-ca-pool -d '--url                              Path to the CA for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_CA_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l no-tls-verify -d --url\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Disables\ TLS\ verification\ of\ the\ certificate\ presented\ by\ your\ origin.\ Will\ allow\ any\ certificate\ from\ the\ origin\ to\ be\ accepted.\ Note:\ The\ connection\ from\ your\ machine\ to\ Cloudflare\'s\ Edge\ is\ still\ encrypted.\ This\ flag\ only\ takes\ effect\ if\ you\ define\ your\ origin\ with\ --url\ and\ if\ you\ do\ not\ use\ ingress\ rules.\ The\ recommended\ way\ is\ to\ rely\ on\ ingress\ rules\ and\ define\ this\ property\ under\ `originRequest`\ as\ per\ https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress\ \(default:\ false\)\ \[\$NO_TLS_VERIFY\]
complete -c tunnel -n '__fish_seen_subcommand_from run' -l no-chunked-encoding -d '--url                         Disables chunked transfer encoding; useful if you are running a WSGI server. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_NO_CHUNKED_ENCODING]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l http2-origin -d 'Enables HTTP/2 origin servers. (default: false) [$TUNNEL_ORIGIN_ENABLE_HTTP2]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l bastion -d 'Runs as jump host (default: false) [$TUNNEL_BASTION]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-address -d 'value                               Listen address for the proxy. (default: "127.0.0.1") [$TUNNEL_PROXY_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-port -d 'value                                  Listen port for the proxy. (default: 0) [$TUNNEL_PROXY_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l loglevel -d 'value                                    Application logging level {debug, info, warn, error, fatal}. At debug level cloudflared will log request URL, method, protocol, content length, as well as, all request and response headers. This can expose sensitive information in your logs. (default: "info") [$TUNNEL_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l transport-loglevel -d 'value, --proto-loglevel value  Transport logging level(previously called protocol logging level) {debug, info, warn, error, fatal} (default: "info") [$TUNNEL_PROTO_LOGLEVEL, $TUNNEL_TRANSPORT_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l logfile -d 'value                                     Save application log to this file for reporting issues. [$TUNNEL_LOGFILE]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l log-directory -d 'value                               Save application log to this directory for reporting issues. [$TUNNEL_LOGDIRECTORY]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l trace-output -d 'value                                Name of trace output file, generated when cloudflared stops. [$TUNNEL_TRACE_OUTPUT]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-dns -d 'Run a DNS over HTTPS proxy server. (default: false) [$TUNNEL_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-dns-port -d 'value                              Listen on given port for the DNS over HTTPS proxy server. (default: 53) [$TUNNEL_DNS_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-dns-address -d 'value                           Listen address for the DNS over HTTPS proxy server. (default: "localhost") [$TUNNEL_DNS_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-dns-upstream -d 'value                          Upstream endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://1.1.1.1/dns-query", "https://1.0.0.1/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_UPSTREAM]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-dns-max-upstream-conns -d 'value                Maximum concurrent connections to upstream. Setting to 0 means unlimited. (default: 5) [$TUNNEL_DNS_MAX_UPSTREAM_CONNS]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l proxy-dns-bootstrap -d 'value                         bootstrap endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://162.159.36.1/dns-query", "https://162.159.46.1/dns-query", "https://[2606:4700:4700::1111]/dns-query", "https://[2606:4700:4700::1001]/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_BOOTSTRAP]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l credentials-file -d 'value, --cred-file value         Filepath at which to read/write the tunnel credentials [$TUNNEL_CRED_FILE]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l region -d 'value                                      Cloudflare Edge region to connect to. Omit or set to empty to connect to the global region. [$TUNNEL_REGION]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l edge-ip-version -d 'value                             Cloudflare Edge IP address version to connect with. {4, 6, auto} (default: "4") [$TUNNEL_EDGE_IP_VERSION]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l edge-bind-address -d 'value                           Bind to IP address for outgoing connections to Cloudflare Edge. [$TUNNEL_EDGE_BIND_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l hostname -d 'value                                    Set a hostname on a Cloudflare zone to route traffic through this tunnel. [$TUNNEL_HOSTNAME]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l lb-pool -d 'value                                     The name of a (new/existing) load balancing pool to add this origin to. [$TUNNEL_LB_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l metrics-update-freq -d 'value                         Frequency to update tunnel metrics (default: 5s) [$TUNNEL_METRICS_UPDATE_FREQ]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l tag -d 'KEY=VALUE                                     Custom tags used to identify this tunnel, in format KEY=VALUE. Multiple tags may be specified  (accepts multiple inputs) [$TUNNEL_TAG]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l retries -d 'value                                     Maximum number of retries for connection/protocol errors. (default: 5) [$TUNNEL_RETRIES]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l label -d 'value                                       Use this option to give a meaningful label to a specific connector. When a tunnel starts up, a connector id unique to the tunnel is generated. This is a uuid. To make it easier to identify a connector, we will use the hostname of the machine the tunnel is running on along with the connector ID. This option exists if one wants to have more control over what their individual connectors are called.'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l grace-period -d 'value                                When cloudflared receives SIGINT/SIGTERM it will stop accepting new requests, wait for in-progress requests to terminate, then shutdown. Waiting for in-progress requests will timeout after this grace period, or when a second SIGTERM/SIGINT is received. (default: 30s) [$TUNNEL_GRACE_PERIOD]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l compression-quality -d 'value                         (beta) Use cross-stream compression instead HTTP compression. 0-off, 1-low, 2-medium, >=3-high. (default: 0) [$TUNNEL_COMPRESSION_LEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l name -d 'value, -n value                              Stable name to identify the tunnel. Using this flag will create, route and run a tunnel. For production usage, execute each command separately [$TUNNEL_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -l management-diagnostics -d 'Enables the in-depth diagnostic routes to be made available over the management service (/debug/pprof, /metrics, etc.) (default: true) [$TUNNEL_MANAGEMENT_DIAGNOSTICS]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -s f -l overwrite-dns -d 'Overwrites existing DNS records with this hostname (default: false) [$TUNNEL_FORCE_PROVISIONING_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from run' -s h -l help -d 'show help (default: false)'
complete -f -c tunnel -n __fish_use_subcommand -a list -d 'List existing tunnels'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l config -d 'value                                      Specifies a config file in YAML format.'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l origincert -d 'value                                  Path to the certificate generated for your origin when you run cloudflared login. (default: "/me/.cloudflared/cert.pem") [$TUNNEL_ORIGIN_CERT]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l autoupdate-freq -d 'value                             Autoupdate frequency. Default is 24h0m0s. (default: 24h0m0s)'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l no-autoupdate -d 'Disable periodic check for updates, restarting the server with the new version. (default: false) [$NO_AUTOUPDATE]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l metrics -d 'value                                     Listen address for metrics reporting. (default: "localhost:") [$TUNNEL_METRICS]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l pidfile -d value\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Write\ the\ application\'s\ PID\ to\ this\ file\ after\ first\ successful\ connection.\ \[\$TUNNEL_PIDFILE\]
complete -c tunnel -n '__fish_seen_subcommand_from list' -l url -d 'URL                                           Connect to the local webserver at URL. (default: "http://localhost:8080") [$TUNNEL_URL]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l hello-world -d 'Run Hello World Server (default: false) [$TUNNEL_HELLO_WORLD]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l socks5 -d '--url                                      specify if this tunnel is running as a SOCK5 Server This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_SOCKS]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-connect-timeout -d '--url                       HTTP proxy timeout for establishing a new connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-tls-timeout -d '--url                           HTTP proxy timeout for completing a TLS handshake This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 10s)'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-tcp-keepalive -d '--url                         HTTP proxy TCP keepalive duration This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-no-happy-eyeballs -d '--url                     HTTP proxy should disable "happy eyeballs" for IPv4/v6 fallback This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false)'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-keepalive-connections -d '--url                 HTTP proxy maximum keepalive connection pool size This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 100)'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-keepalive-timeout -d '--url                     HTTP proxy timeout for closing an idle connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-connection-timeout -d 'value                    DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-expect-continue-timeout -d 'value               DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l http-host-header -d '--url                            Sets the HTTP Host header for the local webserver. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_HTTP_HOST_HEADER]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l origin-server-name -d '--url                          Hostname on the origin server certificate. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_SERVER_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l unix-socket -d 'value                                 Path to unix socket to use instead of --url [$TUNNEL_UNIX_SOCKET]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l origin-ca-pool -d '--url                              Path to the CA for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_CA_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l no-tls-verify -d --url\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Disables\ TLS\ verification\ of\ the\ certificate\ presented\ by\ your\ origin.\ Will\ allow\ any\ certificate\ from\ the\ origin\ to\ be\ accepted.\ Note:\ The\ connection\ from\ your\ machine\ to\ Cloudflare\'s\ Edge\ is\ still\ encrypted.\ This\ flag\ only\ takes\ effect\ if\ you\ define\ your\ origin\ with\ --url\ and\ if\ you\ do\ not\ use\ ingress\ rules.\ The\ recommended\ way\ is\ to\ rely\ on\ ingress\ rules\ and\ define\ this\ property\ under\ `originRequest`\ as\ per\ https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress\ \(default:\ false\)\ \[\$NO_TLS_VERIFY\]
complete -c tunnel -n '__fish_seen_subcommand_from list' -l no-chunked-encoding -d '--url                         Disables chunked transfer encoding; useful if you are running a WSGI server. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_NO_CHUNKED_ENCODING]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l http2-origin -d 'Enables HTTP/2 origin servers. (default: false) [$TUNNEL_ORIGIN_ENABLE_HTTP2]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l bastion -d 'Runs as jump host (default: false) [$TUNNEL_BASTION]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-address -d 'value                               Listen address for the proxy. (default: "127.0.0.1") [$TUNNEL_PROXY_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-port -d 'value                                  Listen port for the proxy. (default: 0) [$TUNNEL_PROXY_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l loglevel -d 'value                                    Application logging level {debug, info, warn, error, fatal}. At debug level cloudflared will log request URL, method, protocol, content length, as well as, all request and response headers. This can expose sensitive information in your logs. (default: "info") [$TUNNEL_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l transport-loglevel -d 'value, --proto-loglevel value  Transport logging level(previously called protocol logging level) {debug, info, warn, error, fatal} (default: "info") [$TUNNEL_PROTO_LOGLEVEL, $TUNNEL_TRANSPORT_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l logfile -d 'value                                     Save application log to this file for reporting issues. [$TUNNEL_LOGFILE]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l log-directory -d 'value                               Save application log to this directory for reporting issues. [$TUNNEL_LOGDIRECTORY]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l trace-output -d 'value                                Name of trace output file, generated when cloudflared stops. [$TUNNEL_TRACE_OUTPUT]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-dns -d 'Run a DNS over HTTPS proxy server. (default: false) [$TUNNEL_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-dns-port -d 'value                              Listen on given port for the DNS over HTTPS proxy server. (default: 53) [$TUNNEL_DNS_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-dns-address -d 'value                           Listen address for the DNS over HTTPS proxy server. (default: "localhost") [$TUNNEL_DNS_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-dns-upstream -d 'value                          Upstream endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://1.1.1.1/dns-query", "https://1.0.0.1/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_UPSTREAM]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-dns-max-upstream-conns -d 'value                Maximum concurrent connections to upstream. Setting to 0 means unlimited. (default: 5) [$TUNNEL_DNS_MAX_UPSTREAM_CONNS]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l proxy-dns-bootstrap -d 'value                         bootstrap endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://162.159.36.1/dns-query", "https://162.159.46.1/dns-query", "https://[2606:4700:4700::1111]/dns-query", "https://[2606:4700:4700::1001]/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_BOOTSTRAP]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l credentials-file -d 'value, --cred-file value         Filepath at which to read/write the tunnel credentials [$TUNNEL_CRED_FILE]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l region -d 'value                                      Cloudflare Edge region to connect to. Omit or set to empty to connect to the global region. [$TUNNEL_REGION]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l edge-ip-version -d 'value                             Cloudflare Edge IP address version to connect with. {4, 6, auto} (default: "4") [$TUNNEL_EDGE_IP_VERSION]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l edge-bind-address -d 'value                           Bind to IP address for outgoing connections to Cloudflare Edge. [$TUNNEL_EDGE_BIND_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l hostname -d 'value                                    Set a hostname on a Cloudflare zone to route traffic through this tunnel. [$TUNNEL_HOSTNAME]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l lb-pool -d 'value                                     The name of a (new/existing) load balancing pool to add this origin to. [$TUNNEL_LB_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l metrics-update-freq -d 'value                         Frequency to update tunnel metrics (default: 5s) [$TUNNEL_METRICS_UPDATE_FREQ]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l tag -d 'KEY=VALUE                                     Custom tags used to identify this tunnel, in format KEY=VALUE. Multiple tags may be specified  (accepts multiple inputs) [$TUNNEL_TAG]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l retries -d 'value                                     Maximum number of retries for connection/protocol errors. (default: 5) [$TUNNEL_RETRIES]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l label -d 'value                                       Use this option to give a meaningful label to a specific connector. When a tunnel starts up, a connector id unique to the tunnel is generated. This is a uuid. To make it easier to identify a connector, we will use the hostname of the machine the tunnel is running on along with the connector ID. This option exists if one wants to have more control over what their individual connectors are called.'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l grace-period -d 'value                                When cloudflared receives SIGINT/SIGTERM it will stop accepting new requests, wait for in-progress requests to terminate, then shutdown. Waiting for in-progress requests will timeout after this grace period, or when a second SIGTERM/SIGINT is received. (default: 30s) [$TUNNEL_GRACE_PERIOD]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l compression-quality -d 'value                         (beta) Use cross-stream compression instead HTTP compression. 0-off, 1-low, 2-medium, >=3-high. (default: 0) [$TUNNEL_COMPRESSION_LEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l name -d 'value, -n value                              Stable name to identify the tunnel. Using this flag will create, route and run a tunnel. For production usage, execute each command separately [$TUNNEL_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -l management-diagnostics -d 'Enables the in-depth diagnostic routes to be made available over the management service (/debug/pprof, /metrics, etc.) (default: true) [$TUNNEL_MANAGEMENT_DIAGNOSTICS]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -s f -l overwrite-dns -d 'Overwrites existing DNS records with this hostname (default: false) [$TUNNEL_FORCE_PROVISIONING_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from list' -s h -l help -d 'show help (default: false)'
complete -f -c tunnel -n __fish_use_subcommand -a info -d 'List details about the active connectors for a tunnel'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l config -d 'value                                      Specifies a config file in YAML format.'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l origincert -d 'value                                  Path to the certificate generated for your origin when you run cloudflared login. (default: "/me/.cloudflared/cert.pem") [$TUNNEL_ORIGIN_CERT]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l autoupdate-freq -d 'value                             Autoupdate frequency. Default is 24h0m0s. (default: 24h0m0s)'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l no-autoupdate -d 'Disable periodic check for updates, restarting the server with the new version. (default: false) [$NO_AUTOUPDATE]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l metrics -d 'value                                     Listen address for metrics reporting. (default: "localhost:") [$TUNNEL_METRICS]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l pidfile -d value\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Write\ the\ application\'s\ PID\ to\ this\ file\ after\ first\ successful\ connection.\ \[\$TUNNEL_PIDFILE\]
complete -c tunnel -n '__fish_seen_subcommand_from info' -l url -d 'URL                                           Connect to the local webserver at URL. (default: "http://localhost:8080") [$TUNNEL_URL]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l hello-world -d 'Run Hello World Server (default: false) [$TUNNEL_HELLO_WORLD]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l socks5 -d '--url                                      specify if this tunnel is running as a SOCK5 Server This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_SOCKS]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-connect-timeout -d '--url                       HTTP proxy timeout for establishing a new connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-tls-timeout -d '--url                           HTTP proxy timeout for completing a TLS handshake This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 10s)'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-tcp-keepalive -d '--url                         HTTP proxy TCP keepalive duration This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-no-happy-eyeballs -d '--url                     HTTP proxy should disable "happy eyeballs" for IPv4/v6 fallback This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false)'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-keepalive-connections -d '--url                 HTTP proxy maximum keepalive connection pool size This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 100)'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-keepalive-timeout -d '--url                     HTTP proxy timeout for closing an idle connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-connection-timeout -d 'value                    DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-expect-continue-timeout -d 'value               DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l http-host-header -d '--url                            Sets the HTTP Host header for the local webserver. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_HTTP_HOST_HEADER]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l origin-server-name -d '--url                          Hostname on the origin server certificate. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_SERVER_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l unix-socket -d 'value                                 Path to unix socket to use instead of --url [$TUNNEL_UNIX_SOCKET]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l origin-ca-pool -d '--url                              Path to the CA for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_CA_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l no-tls-verify -d --url\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Disables\ TLS\ verification\ of\ the\ certificate\ presented\ by\ your\ origin.\ Will\ allow\ any\ certificate\ from\ the\ origin\ to\ be\ accepted.\ Note:\ The\ connection\ from\ your\ machine\ to\ Cloudflare\'s\ Edge\ is\ still\ encrypted.\ This\ flag\ only\ takes\ effect\ if\ you\ define\ your\ origin\ with\ --url\ and\ if\ you\ do\ not\ use\ ingress\ rules.\ The\ recommended\ way\ is\ to\ rely\ on\ ingress\ rules\ and\ define\ this\ property\ under\ `originRequest`\ as\ per\ https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress\ \(default:\ false\)\ \[\$NO_TLS_VERIFY\]
complete -c tunnel -n '__fish_seen_subcommand_from info' -l no-chunked-encoding -d '--url                         Disables chunked transfer encoding; useful if you are running a WSGI server. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_NO_CHUNKED_ENCODING]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l http2-origin -d 'Enables HTTP/2 origin servers. (default: false) [$TUNNEL_ORIGIN_ENABLE_HTTP2]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l bastion -d 'Runs as jump host (default: false) [$TUNNEL_BASTION]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-address -d 'value                               Listen address for the proxy. (default: "127.0.0.1") [$TUNNEL_PROXY_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-port -d 'value                                  Listen port for the proxy. (default: 0) [$TUNNEL_PROXY_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l loglevel -d 'value                                    Application logging level {debug, info, warn, error, fatal}. At debug level cloudflared will log request URL, method, protocol, content length, as well as, all request and response headers. This can expose sensitive information in your logs. (default: "info") [$TUNNEL_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l transport-loglevel -d 'value, --proto-loglevel value  Transport logging level(previously called protocol logging level) {debug, info, warn, error, fatal} (default: "info") [$TUNNEL_PROTO_LOGLEVEL, $TUNNEL_TRANSPORT_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l logfile -d 'value                                     Save application log to this file for reporting issues. [$TUNNEL_LOGFILE]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l log-directory -d 'value                               Save application log to this directory for reporting issues. [$TUNNEL_LOGDIRECTORY]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l trace-output -d 'value                                Name of trace output file, generated when cloudflared stops. [$TUNNEL_TRACE_OUTPUT]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-dns -d 'Run a DNS over HTTPS proxy server. (default: false) [$TUNNEL_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-dns-port -d 'value                              Listen on given port for the DNS over HTTPS proxy server. (default: 53) [$TUNNEL_DNS_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-dns-address -d 'value                           Listen address for the DNS over HTTPS proxy server. (default: "localhost") [$TUNNEL_DNS_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-dns-upstream -d 'value                          Upstream endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://1.1.1.1/dns-query", "https://1.0.0.1/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_UPSTREAM]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-dns-max-upstream-conns -d 'value                Maximum concurrent connections to upstream. Setting to 0 means unlimited. (default: 5) [$TUNNEL_DNS_MAX_UPSTREAM_CONNS]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l proxy-dns-bootstrap -d 'value                         bootstrap endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://162.159.36.1/dns-query", "https://162.159.46.1/dns-query", "https://[2606:4700:4700::1111]/dns-query", "https://[2606:4700:4700::1001]/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_BOOTSTRAP]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l credentials-file -d 'value, --cred-file value         Filepath at which to read/write the tunnel credentials [$TUNNEL_CRED_FILE]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l region -d 'value                                      Cloudflare Edge region to connect to. Omit or set to empty to connect to the global region. [$TUNNEL_REGION]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l edge-ip-version -d 'value                             Cloudflare Edge IP address version to connect with. {4, 6, auto} (default: "4") [$TUNNEL_EDGE_IP_VERSION]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l edge-bind-address -d 'value                           Bind to IP address for outgoing connections to Cloudflare Edge. [$TUNNEL_EDGE_BIND_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l hostname -d 'value                                    Set a hostname on a Cloudflare zone to route traffic through this tunnel. [$TUNNEL_HOSTNAME]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l lb-pool -d 'value                                     The name of a (new/existing) load balancing pool to add this origin to. [$TUNNEL_LB_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l metrics-update-freq -d 'value                         Frequency to update tunnel metrics (default: 5s) [$TUNNEL_METRICS_UPDATE_FREQ]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l tag -d 'KEY=VALUE                                     Custom tags used to identify this tunnel, in format KEY=VALUE. Multiple tags may be specified  (accepts multiple inputs) [$TUNNEL_TAG]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l retries -d 'value                                     Maximum number of retries for connection/protocol errors. (default: 5) [$TUNNEL_RETRIES]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l label -d 'value                                       Use this option to give a meaningful label to a specific connector. When a tunnel starts up, a connector id unique to the tunnel is generated. This is a uuid. To make it easier to identify a connector, we will use the hostname of the machine the tunnel is running on along with the connector ID. This option exists if one wants to have more control over what their individual connectors are called.'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l grace-period -d 'value                                When cloudflared receives SIGINT/SIGTERM it will stop accepting new requests, wait for in-progress requests to terminate, then shutdown. Waiting for in-progress requests will timeout after this grace period, or when a second SIGTERM/SIGINT is received. (default: 30s) [$TUNNEL_GRACE_PERIOD]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l compression-quality -d 'value                         (beta) Use cross-stream compression instead HTTP compression. 0-off, 1-low, 2-medium, >=3-high. (default: 0) [$TUNNEL_COMPRESSION_LEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l name -d 'value, -n value                              Stable name to identify the tunnel. Using this flag will create, route and run a tunnel. For production usage, execute each command separately [$TUNNEL_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -l management-diagnostics -d 'Enables the in-depth diagnostic routes to be made available over the management service (/debug/pprof, /metrics, etc.) (default: true) [$TUNNEL_MANAGEMENT_DIAGNOSTICS]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -s f -l overwrite-dns -d 'Overwrites existing DNS records with this hostname (default: false) [$TUNNEL_FORCE_PROVISIONING_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from info' -s h -l help -d 'show help (default: false)'
complete -f -c tunnel -n __fish_use_subcommand -a delete -d 'Delete existing tunnel by UUID or name'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l config -d 'value                                      Specifies a config file in YAML format.'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l origincert -d 'value                                  Path to the certificate generated for your origin when you run cloudflared login. (default: "/me/.cloudflared/cert.pem") [$TUNNEL_ORIGIN_CERT]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l autoupdate-freq -d 'value                             Autoupdate frequency. Default is 24h0m0s. (default: 24h0m0s)'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l no-autoupdate -d 'Disable periodic check for updates, restarting the server with the new version. (default: false) [$NO_AUTOUPDATE]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l metrics -d 'value                                     Listen address for metrics reporting. (default: "localhost:") [$TUNNEL_METRICS]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l pidfile -d value\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Write\ the\ application\'s\ PID\ to\ this\ file\ after\ first\ successful\ connection.\ \[\$TUNNEL_PIDFILE\]
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l url -d 'URL                                           Connect to the local webserver at URL. (default: "http://localhost:8080") [$TUNNEL_URL]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l hello-world -d 'Run Hello World Server (default: false) [$TUNNEL_HELLO_WORLD]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l socks5 -d '--url                                      specify if this tunnel is running as a SOCK5 Server This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_SOCKS]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-connect-timeout -d '--url                       HTTP proxy timeout for establishing a new connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-tls-timeout -d '--url                           HTTP proxy timeout for completing a TLS handshake This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 10s)'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-tcp-keepalive -d '--url                         HTTP proxy TCP keepalive duration This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-no-happy-eyeballs -d '--url                     HTTP proxy should disable "happy eyeballs" for IPv4/v6 fallback This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false)'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-keepalive-connections -d '--url                 HTTP proxy maximum keepalive connection pool size This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 100)'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-keepalive-timeout -d '--url                     HTTP proxy timeout for closing an idle connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-connection-timeout -d 'value                    DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-expect-continue-timeout -d 'value               DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l http-host-header -d '--url                            Sets the HTTP Host header for the local webserver. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_HTTP_HOST_HEADER]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l origin-server-name -d '--url                          Hostname on the origin server certificate. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_SERVER_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l unix-socket -d 'value                                 Path to unix socket to use instead of --url [$TUNNEL_UNIX_SOCKET]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l origin-ca-pool -d '--url                              Path to the CA for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_CA_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l no-tls-verify -d --url\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Disables\ TLS\ verification\ of\ the\ certificate\ presented\ by\ your\ origin.\ Will\ allow\ any\ certificate\ from\ the\ origin\ to\ be\ accepted.\ Note:\ The\ connection\ from\ your\ machine\ to\ Cloudflare\'s\ Edge\ is\ still\ encrypted.\ This\ flag\ only\ takes\ effect\ if\ you\ define\ your\ origin\ with\ --url\ and\ if\ you\ do\ not\ use\ ingress\ rules.\ The\ recommended\ way\ is\ to\ rely\ on\ ingress\ rules\ and\ define\ this\ property\ under\ `originRequest`\ as\ per\ https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress\ \(default:\ false\)\ \[\$NO_TLS_VERIFY\]
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l no-chunked-encoding -d '--url                         Disables chunked transfer encoding; useful if you are running a WSGI server. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_NO_CHUNKED_ENCODING]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l http2-origin -d 'Enables HTTP/2 origin servers. (default: false) [$TUNNEL_ORIGIN_ENABLE_HTTP2]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l bastion -d 'Runs as jump host (default: false) [$TUNNEL_BASTION]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-address -d 'value                               Listen address for the proxy. (default: "127.0.0.1") [$TUNNEL_PROXY_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-port -d 'value                                  Listen port for the proxy. (default: 0) [$TUNNEL_PROXY_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l loglevel -d 'value                                    Application logging level {debug, info, warn, error, fatal}. At debug level cloudflared will log request URL, method, protocol, content length, as well as, all request and response headers. This can expose sensitive information in your logs. (default: "info") [$TUNNEL_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l transport-loglevel -d 'value, --proto-loglevel value  Transport logging level(previously called protocol logging level) {debug, info, warn, error, fatal} (default: "info") [$TUNNEL_PROTO_LOGLEVEL, $TUNNEL_TRANSPORT_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l logfile -d 'value                                     Save application log to this file for reporting issues. [$TUNNEL_LOGFILE]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l log-directory -d 'value                               Save application log to this directory for reporting issues. [$TUNNEL_LOGDIRECTORY]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l trace-output -d 'value                                Name of trace output file, generated when cloudflared stops. [$TUNNEL_TRACE_OUTPUT]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-dns -d 'Run a DNS over HTTPS proxy server. (default: false) [$TUNNEL_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-dns-port -d 'value                              Listen on given port for the DNS over HTTPS proxy server. (default: 53) [$TUNNEL_DNS_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-dns-address -d 'value                           Listen address for the DNS over HTTPS proxy server. (default: "localhost") [$TUNNEL_DNS_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-dns-upstream -d 'value                          Upstream endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://1.1.1.1/dns-query", "https://1.0.0.1/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_UPSTREAM]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-dns-max-upstream-conns -d 'value                Maximum concurrent connections to upstream. Setting to 0 means unlimited. (default: 5) [$TUNNEL_DNS_MAX_UPSTREAM_CONNS]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l proxy-dns-bootstrap -d 'value                         bootstrap endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://162.159.36.1/dns-query", "https://162.159.46.1/dns-query", "https://[2606:4700:4700::1111]/dns-query", "https://[2606:4700:4700::1001]/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_BOOTSTRAP]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l credentials-file -d 'value, --cred-file value         Filepath at which to read/write the tunnel credentials [$TUNNEL_CRED_FILE]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l region -d 'value                                      Cloudflare Edge region to connect to. Omit or set to empty to connect to the global region. [$TUNNEL_REGION]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l edge-ip-version -d 'value                             Cloudflare Edge IP address version to connect with. {4, 6, auto} (default: "4") [$TUNNEL_EDGE_IP_VERSION]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l edge-bind-address -d 'value                           Bind to IP address for outgoing connections to Cloudflare Edge. [$TUNNEL_EDGE_BIND_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l hostname -d 'value                                    Set a hostname on a Cloudflare zone to route traffic through this tunnel. [$TUNNEL_HOSTNAME]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l lb-pool -d 'value                                     The name of a (new/existing) load balancing pool to add this origin to. [$TUNNEL_LB_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l metrics-update-freq -d 'value                         Frequency to update tunnel metrics (default: 5s) [$TUNNEL_METRICS_UPDATE_FREQ]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l tag -d 'KEY=VALUE                                     Custom tags used to identify this tunnel, in format KEY=VALUE. Multiple tags may be specified  (accepts multiple inputs) [$TUNNEL_TAG]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l retries -d 'value                                     Maximum number of retries for connection/protocol errors. (default: 5) [$TUNNEL_RETRIES]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l label -d 'value                                       Use this option to give a meaningful label to a specific connector. When a tunnel starts up, a connector id unique to the tunnel is generated. This is a uuid. To make it easier to identify a connector, we will use the hostname of the machine the tunnel is running on along with the connector ID. This option exists if one wants to have more control over what their individual connectors are called.'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l grace-period -d 'value                                When cloudflared receives SIGINT/SIGTERM it will stop accepting new requests, wait for in-progress requests to terminate, then shutdown. Waiting for in-progress requests will timeout after this grace period, or when a second SIGTERM/SIGINT is received. (default: 30s) [$TUNNEL_GRACE_PERIOD]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l compression-quality -d 'value                         (beta) Use cross-stream compression instead HTTP compression. 0-off, 1-low, 2-medium, >=3-high. (default: 0) [$TUNNEL_COMPRESSION_LEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l name -d 'value, -n value                              Stable name to identify the tunnel. Using this flag will create, route and run a tunnel. For production usage, execute each command separately [$TUNNEL_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -l management-diagnostics -d 'Enables the in-depth diagnostic routes to be made available over the management service (/debug/pprof, /metrics, etc.) (default: true) [$TUNNEL_MANAGEMENT_DIAGNOSTICS]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -s f -l overwrite-dns -d 'Overwrites existing DNS records with this hostname (default: false) [$TUNNEL_FORCE_PROVISIONING_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from delete' -s h -l help -d 'show help (default: false)'
complete -f -c tunnel -n __fish_use_subcommand -a cleanup -d 'Cleanup tunnel connections'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l config -d 'value                                      Specifies a config file in YAML format.'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l origincert -d 'value                                  Path to the certificate generated for your origin when you run cloudflared login. (default: "/me/.cloudflared/cert.pem") [$TUNNEL_ORIGIN_CERT]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l autoupdate-freq -d 'value                             Autoupdate frequency. Default is 24h0m0s. (default: 24h0m0s)'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l no-autoupdate -d 'Disable periodic check for updates, restarting the server with the new version. (default: false) [$NO_AUTOUPDATE]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l metrics -d 'value                                     Listen address for metrics reporting. (default: "localhost:") [$TUNNEL_METRICS]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l pidfile -d value\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Write\ the\ application\'s\ PID\ to\ this\ file\ after\ first\ successful\ connection.\ \[\$TUNNEL_PIDFILE\]
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l url -d 'URL                                           Connect to the local webserver at URL. (default: "http://localhost:8080") [$TUNNEL_URL]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l hello-world -d 'Run Hello World Server (default: false) [$TUNNEL_HELLO_WORLD]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l socks5 -d '--url                                      specify if this tunnel is running as a SOCK5 Server This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_SOCKS]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-connect-timeout -d '--url                       HTTP proxy timeout for establishing a new connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-tls-timeout -d '--url                           HTTP proxy timeout for completing a TLS handshake This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 10s)'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-tcp-keepalive -d '--url                         HTTP proxy TCP keepalive duration This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-no-happy-eyeballs -d '--url                     HTTP proxy should disable "happy eyeballs" for IPv4/v6 fallback This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false)'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-keepalive-connections -d '--url                 HTTP proxy maximum keepalive connection pool size This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 100)'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-keepalive-timeout -d '--url                     HTTP proxy timeout for closing an idle connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-connection-timeout -d 'value                    DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-expect-continue-timeout -d 'value               DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l http-host-header -d '--url                            Sets the HTTP Host header for the local webserver. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_HTTP_HOST_HEADER]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l origin-server-name -d '--url                          Hostname on the origin server certificate. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_SERVER_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l unix-socket -d 'value                                 Path to unix socket to use instead of --url [$TUNNEL_UNIX_SOCKET]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l origin-ca-pool -d '--url                              Path to the CA for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_CA_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l no-tls-verify -d --url\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Disables\ TLS\ verification\ of\ the\ certificate\ presented\ by\ your\ origin.\ Will\ allow\ any\ certificate\ from\ the\ origin\ to\ be\ accepted.\ Note:\ The\ connection\ from\ your\ machine\ to\ Cloudflare\'s\ Edge\ is\ still\ encrypted.\ This\ flag\ only\ takes\ effect\ if\ you\ define\ your\ origin\ with\ --url\ and\ if\ you\ do\ not\ use\ ingress\ rules.\ The\ recommended\ way\ is\ to\ rely\ on\ ingress\ rules\ and\ define\ this\ property\ under\ `originRequest`\ as\ per\ https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress\ \(default:\ false\)\ \[\$NO_TLS_VERIFY\]
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l no-chunked-encoding -d '--url                         Disables chunked transfer encoding; useful if you are running a WSGI server. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_NO_CHUNKED_ENCODING]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l http2-origin -d 'Enables HTTP/2 origin servers. (default: false) [$TUNNEL_ORIGIN_ENABLE_HTTP2]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l bastion -d 'Runs as jump host (default: false) [$TUNNEL_BASTION]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-address -d 'value                               Listen address for the proxy. (default: "127.0.0.1") [$TUNNEL_PROXY_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-port -d 'value                                  Listen port for the proxy. (default: 0) [$TUNNEL_PROXY_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l loglevel -d 'value                                    Application logging level {debug, info, warn, error, fatal}. At debug level cloudflared will log request URL, method, protocol, content length, as well as, all request and response headers. This can expose sensitive information in your logs. (default: "info") [$TUNNEL_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l transport-loglevel -d 'value, --proto-loglevel value  Transport logging level(previously called protocol logging level) {debug, info, warn, error, fatal} (default: "info") [$TUNNEL_PROTO_LOGLEVEL, $TUNNEL_TRANSPORT_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l logfile -d 'value                                     Save application log to this file for reporting issues. [$TUNNEL_LOGFILE]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l log-directory -d 'value                               Save application log to this directory for reporting issues. [$TUNNEL_LOGDIRECTORY]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l trace-output -d 'value                                Name of trace output file, generated when cloudflared stops. [$TUNNEL_TRACE_OUTPUT]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-dns -d 'Run a DNS over HTTPS proxy server. (default: false) [$TUNNEL_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-dns-port -d 'value                              Listen on given port for the DNS over HTTPS proxy server. (default: 53) [$TUNNEL_DNS_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-dns-address -d 'value                           Listen address for the DNS over HTTPS proxy server. (default: "localhost") [$TUNNEL_DNS_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-dns-upstream -d 'value                          Upstream endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://1.1.1.1/dns-query", "https://1.0.0.1/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_UPSTREAM]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-dns-max-upstream-conns -d 'value                Maximum concurrent connections to upstream. Setting to 0 means unlimited. (default: 5) [$TUNNEL_DNS_MAX_UPSTREAM_CONNS]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l proxy-dns-bootstrap -d 'value                         bootstrap endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://162.159.36.1/dns-query", "https://162.159.46.1/dns-query", "https://[2606:4700:4700::1111]/dns-query", "https://[2606:4700:4700::1001]/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_BOOTSTRAP]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l credentials-file -d 'value, --cred-file value         Filepath at which to read/write the tunnel credentials [$TUNNEL_CRED_FILE]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l region -d 'value                                      Cloudflare Edge region to connect to. Omit or set to empty to connect to the global region. [$TUNNEL_REGION]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l edge-ip-version -d 'value                             Cloudflare Edge IP address version to connect with. {4, 6, auto} (default: "4") [$TUNNEL_EDGE_IP_VERSION]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l edge-bind-address -d 'value                           Bind to IP address for outgoing connections to Cloudflare Edge. [$TUNNEL_EDGE_BIND_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l hostname -d 'value                                    Set a hostname on a Cloudflare zone to route traffic through this tunnel. [$TUNNEL_HOSTNAME]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l lb-pool -d 'value                                     The name of a (new/existing) load balancing pool to add this origin to. [$TUNNEL_LB_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l metrics-update-freq -d 'value                         Frequency to update tunnel metrics (default: 5s) [$TUNNEL_METRICS_UPDATE_FREQ]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l tag -d 'KEY=VALUE                                     Custom tags used to identify this tunnel, in format KEY=VALUE. Multiple tags may be specified  (accepts multiple inputs) [$TUNNEL_TAG]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l retries -d 'value                                     Maximum number of retries for connection/protocol errors. (default: 5) [$TUNNEL_RETRIES]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l label -d 'value                                       Use this option to give a meaningful label to a specific connector. When a tunnel starts up, a connector id unique to the tunnel is generated. This is a uuid. To make it easier to identify a connector, we will use the hostname of the machine the tunnel is running on along with the connector ID. This option exists if one wants to have more control over what their individual connectors are called.'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l grace-period -d 'value                                When cloudflared receives SIGINT/SIGTERM it will stop accepting new requests, wait for in-progress requests to terminate, then shutdown. Waiting for in-progress requests will timeout after this grace period, or when a second SIGTERM/SIGINT is received. (default: 30s) [$TUNNEL_GRACE_PERIOD]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l compression-quality -d 'value                         (beta) Use cross-stream compression instead HTTP compression. 0-off, 1-low, 2-medium, >=3-high. (default: 0) [$TUNNEL_COMPRESSION_LEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l name -d 'value, -n value                              Stable name to identify the tunnel. Using this flag will create, route and run a tunnel. For production usage, execute each command separately [$TUNNEL_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -l management-diagnostics -d 'Enables the in-depth diagnostic routes to be made available over the management service (/debug/pprof, /metrics, etc.) (default: true) [$TUNNEL_MANAGEMENT_DIAGNOSTICS]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -s f -l overwrite-dns -d 'Overwrites existing DNS records with this hostname (default: false) [$TUNNEL_FORCE_PROVISIONING_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from cleanup' -s h -l help -d 'show help (default: false)'
complete -f -c tunnel -n __fish_use_subcommand -a token -d 'Fetch the credentials token for an existing tunnel (by name or UUID) that allows to run it'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l config -d 'value                                      Specifies a config file in YAML format.'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l origincert -d 'value                                  Path to the certificate generated for your origin when you run cloudflared login. (default: "/me/.cloudflared/cert.pem") [$TUNNEL_ORIGIN_CERT]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l autoupdate-freq -d 'value                             Autoupdate frequency. Default is 24h0m0s. (default: 24h0m0s)'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l no-autoupdate -d 'Disable periodic check for updates, restarting the server with the new version. (default: false) [$NO_AUTOUPDATE]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l metrics -d 'value                                     Listen address for metrics reporting. (default: "localhost:") [$TUNNEL_METRICS]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l pidfile -d value\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Write\ the\ application\'s\ PID\ to\ this\ file\ after\ first\ successful\ connection.\ \[\$TUNNEL_PIDFILE\]
complete -c tunnel -n '__fish_seen_subcommand_from token' -l url -d 'URL                                           Connect to the local webserver at URL. (default: "http://localhost:8080") [$TUNNEL_URL]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l hello-world -d 'Run Hello World Server (default: false) [$TUNNEL_HELLO_WORLD]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l socks5 -d '--url                                      specify if this tunnel is running as a SOCK5 Server This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_SOCKS]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-connect-timeout -d '--url                       HTTP proxy timeout for establishing a new connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-tls-timeout -d '--url                           HTTP proxy timeout for completing a TLS handshake This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 10s)'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-tcp-keepalive -d '--url                         HTTP proxy TCP keepalive duration This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-no-happy-eyeballs -d '--url                     HTTP proxy should disable "happy eyeballs" for IPv4/v6 fallback This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false)'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-keepalive-connections -d '--url                 HTTP proxy maximum keepalive connection pool size This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 100)'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-keepalive-timeout -d '--url                     HTTP proxy timeout for closing an idle connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-connection-timeout -d 'value                    DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-expect-continue-timeout -d 'value               DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l http-host-header -d '--url                            Sets the HTTP Host header for the local webserver. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_HTTP_HOST_HEADER]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l origin-server-name -d '--url                          Hostname on the origin server certificate. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_SERVER_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l unix-socket -d 'value                                 Path to unix socket to use instead of --url [$TUNNEL_UNIX_SOCKET]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l origin-ca-pool -d '--url                              Path to the CA for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_CA_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l no-tls-verify -d --url\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Disables\ TLS\ verification\ of\ the\ certificate\ presented\ by\ your\ origin.\ Will\ allow\ any\ certificate\ from\ the\ origin\ to\ be\ accepted.\ Note:\ The\ connection\ from\ your\ machine\ to\ Cloudflare\'s\ Edge\ is\ still\ encrypted.\ This\ flag\ only\ takes\ effect\ if\ you\ define\ your\ origin\ with\ --url\ and\ if\ you\ do\ not\ use\ ingress\ rules.\ The\ recommended\ way\ is\ to\ rely\ on\ ingress\ rules\ and\ define\ this\ property\ under\ `originRequest`\ as\ per\ https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress\ \(default:\ false\)\ \[\$NO_TLS_VERIFY\]
complete -c tunnel -n '__fish_seen_subcommand_from token' -l no-chunked-encoding -d '--url                         Disables chunked transfer encoding; useful if you are running a WSGI server. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_NO_CHUNKED_ENCODING]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l http2-origin -d 'Enables HTTP/2 origin servers. (default: false) [$TUNNEL_ORIGIN_ENABLE_HTTP2]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l bastion -d 'Runs as jump host (default: false) [$TUNNEL_BASTION]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-address -d 'value                               Listen address for the proxy. (default: "127.0.0.1") [$TUNNEL_PROXY_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-port -d 'value                                  Listen port for the proxy. (default: 0) [$TUNNEL_PROXY_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l loglevel -d 'value                                    Application logging level {debug, info, warn, error, fatal}. At debug level cloudflared will log request URL, method, protocol, content length, as well as, all request and response headers. This can expose sensitive information in your logs. (default: "info") [$TUNNEL_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l transport-loglevel -d 'value, --proto-loglevel value  Transport logging level(previously called protocol logging level) {debug, info, warn, error, fatal} (default: "info") [$TUNNEL_PROTO_LOGLEVEL, $TUNNEL_TRANSPORT_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l logfile -d 'value                                     Save application log to this file for reporting issues. [$TUNNEL_LOGFILE]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l log-directory -d 'value                               Save application log to this directory for reporting issues. [$TUNNEL_LOGDIRECTORY]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l trace-output -d 'value                                Name of trace output file, generated when cloudflared stops. [$TUNNEL_TRACE_OUTPUT]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-dns -d 'Run a DNS over HTTPS proxy server. (default: false) [$TUNNEL_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-dns-port -d 'value                              Listen on given port for the DNS over HTTPS proxy server. (default: 53) [$TUNNEL_DNS_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-dns-address -d 'value                           Listen address for the DNS over HTTPS proxy server. (default: "localhost") [$TUNNEL_DNS_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-dns-upstream -d 'value                          Upstream endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://1.1.1.1/dns-query", "https://1.0.0.1/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_UPSTREAM]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-dns-max-upstream-conns -d 'value                Maximum concurrent connections to upstream. Setting to 0 means unlimited. (default: 5) [$TUNNEL_DNS_MAX_UPSTREAM_CONNS]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l proxy-dns-bootstrap -d 'value                         bootstrap endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://162.159.36.1/dns-query", "https://162.159.46.1/dns-query", "https://[2606:4700:4700::1111]/dns-query", "https://[2606:4700:4700::1001]/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_BOOTSTRAP]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l credentials-file -d 'value, --cred-file value         Filepath at which to read/write the tunnel credentials [$TUNNEL_CRED_FILE]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l region -d 'value                                      Cloudflare Edge region to connect to. Omit or set to empty to connect to the global region. [$TUNNEL_REGION]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l edge-ip-version -d 'value                             Cloudflare Edge IP address version to connect with. {4, 6, auto} (default: "4") [$TUNNEL_EDGE_IP_VERSION]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l edge-bind-address -d 'value                           Bind to IP address for outgoing connections to Cloudflare Edge. [$TUNNEL_EDGE_BIND_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l hostname -d 'value                                    Set a hostname on a Cloudflare zone to route traffic through this tunnel. [$TUNNEL_HOSTNAME]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l lb-pool -d 'value                                     The name of a (new/existing) load balancing pool to add this origin to. [$TUNNEL_LB_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l metrics-update-freq -d 'value                         Frequency to update tunnel metrics (default: 5s) [$TUNNEL_METRICS_UPDATE_FREQ]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l tag -d 'KEY=VALUE                                     Custom tags used to identify this tunnel, in format KEY=VALUE. Multiple tags may be specified  (accepts multiple inputs) [$TUNNEL_TAG]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l retries -d 'value                                     Maximum number of retries for connection/protocol errors. (default: 5) [$TUNNEL_RETRIES]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l label -d 'value                                       Use this option to give a meaningful label to a specific connector. When a tunnel starts up, a connector id unique to the tunnel is generated. This is a uuid. To make it easier to identify a connector, we will use the hostname of the machine the tunnel is running on along with the connector ID. This option exists if one wants to have more control over what their individual connectors are called.'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l grace-period -d 'value                                When cloudflared receives SIGINT/SIGTERM it will stop accepting new requests, wait for in-progress requests to terminate, then shutdown. Waiting for in-progress requests will timeout after this grace period, or when a second SIGTERM/SIGINT is received. (default: 30s) [$TUNNEL_GRACE_PERIOD]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l compression-quality -d 'value                         (beta) Use cross-stream compression instead HTTP compression. 0-off, 1-low, 2-medium, >=3-high. (default: 0) [$TUNNEL_COMPRESSION_LEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l name -d 'value, -n value                              Stable name to identify the tunnel. Using this flag will create, route and run a tunnel. For production usage, execute each command separately [$TUNNEL_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -l management-diagnostics -d 'Enables the in-depth diagnostic routes to be made available over the management service (/debug/pprof, /metrics, etc.) (default: true) [$TUNNEL_MANAGEMENT_DIAGNOSTICS]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -s f -l overwrite-dns -d 'Overwrites existing DNS records with this hostname (default: false) [$TUNNEL_FORCE_PROVISIONING_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from token' -s h -l help -d 'show help (default: false)'
complete -f -c tunnel -n __fish_use_subcommand -a help -d 'Shows a list of commands or help for one command'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l config -d 'value                                      Specifies a config file in YAML format.'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l origincert -d 'value                                  Path to the certificate generated for your origin when you run cloudflared login. (default: "/me/.cloudflared/cert.pem") [$TUNNEL_ORIGIN_CERT]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l autoupdate-freq -d 'value                             Autoupdate frequency. Default is 24h0m0s. (default: 24h0m0s)'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l no-autoupdate -d 'Disable periodic check for updates, restarting the server with the new version. (default: false) [$NO_AUTOUPDATE]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l metrics -d 'value                                     Listen address for metrics reporting. (default: "localhost:") [$TUNNEL_METRICS]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l pidfile -d value\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Write\ the\ application\'s\ PID\ to\ this\ file\ after\ first\ successful\ connection.\ \[\$TUNNEL_PIDFILE\]
complete -c tunnel -n '__fish_seen_subcommand_from help' -l url -d 'URL                                           Connect to the local webserver at URL. (default: "http://localhost:8080") [$TUNNEL_URL]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l hello-world -d 'Run Hello World Server (default: false) [$TUNNEL_HELLO_WORLD]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l socks5 -d '--url                                      specify if this tunnel is running as a SOCK5 Server This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_SOCKS]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-connect-timeout -d '--url                       HTTP proxy timeout for establishing a new connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-tls-timeout -d '--url                           HTTP proxy timeout for completing a TLS handshake This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 10s)'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-tcp-keepalive -d '--url                         HTTP proxy TCP keepalive duration This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-no-happy-eyeballs -d '--url                     HTTP proxy should disable "happy eyeballs" for IPv4/v6 fallback This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false)'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-keepalive-connections -d '--url                 HTTP proxy maximum keepalive connection pool size This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 100)'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-keepalive-timeout -d '--url                     HTTP proxy timeout for closing an idle connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-connection-timeout -d 'value                    DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-expect-continue-timeout -d 'value               DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l http-host-header -d '--url                            Sets the HTTP Host header for the local webserver. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_HTTP_HOST_HEADER]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l origin-server-name -d '--url                          Hostname on the origin server certificate. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_SERVER_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l unix-socket -d 'value                                 Path to unix socket to use instead of --url [$TUNNEL_UNIX_SOCKET]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l origin-ca-pool -d '--url                              Path to the CA for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_CA_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l no-tls-verify -d --url\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Disables\ TLS\ verification\ of\ the\ certificate\ presented\ by\ your\ origin.\ Will\ allow\ any\ certificate\ from\ the\ origin\ to\ be\ accepted.\ Note:\ The\ connection\ from\ your\ machine\ to\ Cloudflare\'s\ Edge\ is\ still\ encrypted.\ This\ flag\ only\ takes\ effect\ if\ you\ define\ your\ origin\ with\ --url\ and\ if\ you\ do\ not\ use\ ingress\ rules.\ The\ recommended\ way\ is\ to\ rely\ on\ ingress\ rules\ and\ define\ this\ property\ under\ `originRequest`\ as\ per\ https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress\ \(default:\ false\)\ \[\$NO_TLS_VERIFY\]
complete -c tunnel -n '__fish_seen_subcommand_from help' -l no-chunked-encoding -d '--url                         Disables chunked transfer encoding; useful if you are running a WSGI server. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_NO_CHUNKED_ENCODING]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l http2-origin -d 'Enables HTTP/2 origin servers. (default: false) [$TUNNEL_ORIGIN_ENABLE_HTTP2]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l bastion -d 'Runs as jump host (default: false) [$TUNNEL_BASTION]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-address -d 'value                               Listen address for the proxy. (default: "127.0.0.1") [$TUNNEL_PROXY_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-port -d 'value                                  Listen port for the proxy. (default: 0) [$TUNNEL_PROXY_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l loglevel -d 'value                                    Application logging level {debug, info, warn, error, fatal}. At debug level cloudflared will log request URL, method, protocol, content length, as well as, all request and response headers. This can expose sensitive information in your logs. (default: "info") [$TUNNEL_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l transport-loglevel -d 'value, --proto-loglevel value  Transport logging level(previously called protocol logging level) {debug, info, warn, error, fatal} (default: "info") [$TUNNEL_PROTO_LOGLEVEL, $TUNNEL_TRANSPORT_LOGLEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l logfile -d 'value                                     Save application log to this file for reporting issues. [$TUNNEL_LOGFILE]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l log-directory -d 'value                               Save application log to this directory for reporting issues. [$TUNNEL_LOGDIRECTORY]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l trace-output -d 'value                                Name of trace output file, generated when cloudflared stops. [$TUNNEL_TRACE_OUTPUT]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-dns -d 'Run a DNS over HTTPS proxy server. (default: false) [$TUNNEL_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-dns-port -d 'value                              Listen on given port for the DNS over HTTPS proxy server. (default: 53) [$TUNNEL_DNS_PORT]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-dns-address -d 'value                           Listen address for the DNS over HTTPS proxy server. (default: "localhost") [$TUNNEL_DNS_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-dns-upstream -d 'value                          Upstream endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://1.1.1.1/dns-query", "https://1.0.0.1/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_UPSTREAM]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-dns-max-upstream-conns -d 'value                Maximum concurrent connections to upstream. Setting to 0 means unlimited. (default: 5) [$TUNNEL_DNS_MAX_UPSTREAM_CONNS]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l proxy-dns-bootstrap -d 'value                         bootstrap endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://162.159.36.1/dns-query", "https://162.159.46.1/dns-query", "https://[2606:4700:4700::1111]/dns-query", "https://[2606:4700:4700::1001]/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_BOOTSTRAP]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l credentials-file -d 'value, --cred-file value         Filepath at which to read/write the tunnel credentials [$TUNNEL_CRED_FILE]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l region -d 'value                                      Cloudflare Edge region to connect to. Omit or set to empty to connect to the global region. [$TUNNEL_REGION]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l edge-ip-version -d 'value                             Cloudflare Edge IP address version to connect with. {4, 6, auto} (default: "4") [$TUNNEL_EDGE_IP_VERSION]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l edge-bind-address -d 'value                           Bind to IP address for outgoing connections to Cloudflare Edge. [$TUNNEL_EDGE_BIND_ADDRESS]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l hostname -d 'value                                    Set a hostname on a Cloudflare zone to route traffic through this tunnel. [$TUNNEL_HOSTNAME]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l lb-pool -d 'value                                     The name of a (new/existing) load balancing pool to add this origin to. [$TUNNEL_LB_POOL]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l metrics-update-freq -d 'value                         Frequency to update tunnel metrics (default: 5s) [$TUNNEL_METRICS_UPDATE_FREQ]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l tag -d 'KEY=VALUE                                     Custom tags used to identify this tunnel, in format KEY=VALUE. Multiple tags may be specified  (accepts multiple inputs) [$TUNNEL_TAG]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l retries -d 'value                                     Maximum number of retries for connection/protocol errors. (default: 5) [$TUNNEL_RETRIES]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l label -d 'value                                       Use this option to give a meaningful label to a specific connector. When a tunnel starts up, a connector id unique to the tunnel is generated. This is a uuid. To make it easier to identify a connector, we will use the hostname of the machine the tunnel is running on along with the connector ID. This option exists if one wants to have more control over what their individual connectors are called.'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l grace-period -d 'value                                When cloudflared receives SIGINT/SIGTERM it will stop accepting new requests, wait for in-progress requests to terminate, then shutdown. Waiting for in-progress requests will timeout after this grace period, or when a second SIGTERM/SIGINT is received. (default: 30s) [$TUNNEL_GRACE_PERIOD]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l compression-quality -d 'value                         (beta) Use cross-stream compression instead HTTP compression. 0-off, 1-low, 2-medium, >=3-high. (default: 0) [$TUNNEL_COMPRESSION_LEVEL]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l name -d 'value, -n value                              Stable name to identify the tunnel. Using this flag will create, route and run a tunnel. For production usage, execute each command separately [$TUNNEL_NAME]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -l management-diagnostics -d 'Enables the in-depth diagnostic routes to be made available over the management service (/debug/pprof, /metrics, etc.) (default: true) [$TUNNEL_MANAGEMENT_DIAGNOSTICS]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -s f -l overwrite-dns -d 'Overwrites existing DNS records with this hostname (default: false) [$TUNNEL_FORCE_PROVISIONING_DNS]'
complete -c tunnel -n '__fish_seen_subcommand_from help' -s h -l help -d 'show help (default: false)'
complete -c tunnel -l config -d 'value                                      Specifies a config file in YAML format.'
complete -c tunnel -l origincert -d 'value                                  Path to the certificate generated for your origin when you run cloudflared login. (default: "/me/.cloudflared/cert.pem") [$TUNNEL_ORIGIN_CERT]'
complete -c tunnel -l autoupdate-freq -d 'value                             Autoupdate frequency. Default is 24h0m0s. (default: 24h0m0s)'
complete -c tunnel -l no-autoupdate -d 'Disable periodic check for updates, restarting the server with the new version. (default: false) [$NO_AUTOUPDATE]'
complete -c tunnel -l metrics -d 'value                                     Listen address for metrics reporting. (default: "localhost:") [$TUNNEL_METRICS]'
complete -c tunnel -l pidfile -d value\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Write\ the\ application\'s\ PID\ to\ this\ file\ after\ first\ successful\ connection.\ \[\$TUNNEL_PIDFILE\]
complete -c tunnel -l url -d 'URL                                           Connect to the local webserver at URL. (default: "http://localhost:8080") [$TUNNEL_URL]'
complete -c tunnel -l hello-world -d 'Run Hello World Server (default: false) [$TUNNEL_HELLO_WORLD]'
complete -c tunnel -l socks5 -d '--url                                      specify if this tunnel is running as a SOCK5 Server This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_SOCKS]'
complete -c tunnel -l proxy-connect-timeout -d '--url                       HTTP proxy timeout for establishing a new connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -l proxy-tls-timeout -d '--url                           HTTP proxy timeout for completing a TLS handshake This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 10s)'
complete -c tunnel -l proxy-tcp-keepalive -d '--url                         HTTP proxy TCP keepalive duration This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 30s)'
complete -c tunnel -l proxy-no-happy-eyeballs -d '--url                     HTTP proxy should disable "happy eyeballs" for IPv4/v6 fallback This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false)'
complete -c tunnel -l proxy-keepalive-connections -d '--url                 HTTP proxy maximum keepalive connection pool size This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 100)'
complete -c tunnel -l proxy-keepalive-timeout -d '--url                     HTTP proxy timeout for closing an idle connection This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: 1m30s)'
complete -c tunnel -l proxy-connection-timeout -d 'value                    DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -l proxy-expect-continue-timeout -d 'value               DEPRECATED. No longer has any effect. (default: 1m30s)'
complete -c tunnel -l http-host-header -d '--url                            Sets the HTTP Host header for the local webserver. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_HTTP_HOST_HEADER]'
complete -c tunnel -l origin-server-name -d '--url                          Hostname on the origin server certificate. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_SERVER_NAME]'
complete -c tunnel -l unix-socket -d 'value                                 Path to unix socket to use instead of --url [$TUNNEL_UNIX_SOCKET]'
complete -c tunnel -l origin-ca-pool -d '--url                              Path to the CA for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress [$TUNNEL_ORIGIN_CA_POOL]'
complete -c tunnel -l no-tls-verify -d --url\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Disables\ TLS\ verification\ of\ the\ certificate\ presented\ by\ your\ origin.\ Will\ allow\ any\ certificate\ from\ the\ origin\ to\ be\ accepted.\ Note:\ The\ connection\ from\ your\ machine\ to\ Cloudflare\'s\ Edge\ is\ still\ encrypted.\ This\ flag\ only\ takes\ effect\ if\ you\ define\ your\ origin\ with\ --url\ and\ if\ you\ do\ not\ use\ ingress\ rules.\ The\ recommended\ way\ is\ to\ rely\ on\ ingress\ rules\ and\ define\ this\ property\ under\ `originRequest`\ as\ per\ https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress\ \(default:\ false\)\ \[\$NO_TLS_VERIFY\]
complete -c tunnel -l no-chunked-encoding -d '--url                         Disables chunked transfer encoding; useful if you are running a WSGI server. This flag only takes effect if you define your origin with --url and if you do not use ingress rules. The recommended way is to rely on ingress rules and define this property under `originRequest` as per https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress (default: false) [$TUNNEL_NO_CHUNKED_ENCODING]'
complete -c tunnel -l http2-origin -d 'Enables HTTP/2 origin servers. (default: false) [$TUNNEL_ORIGIN_ENABLE_HTTP2]'
complete -c tunnel -l bastion -d 'Runs as jump host (default: false) [$TUNNEL_BASTION]'
complete -c tunnel -l proxy-address -d 'value                               Listen address for the proxy. (default: "127.0.0.1") [$TUNNEL_PROXY_ADDRESS]'
complete -c tunnel -l proxy-port -d 'value                                  Listen port for the proxy. (default: 0) [$TUNNEL_PROXY_PORT]'
complete -c tunnel -l loglevel -d 'value                                    Application logging level {debug, info, warn, error, fatal}. At debug level cloudflared will log request URL, method, protocol, content length, as well as, all request and response headers. This can expose sensitive information in your logs. (default: "info") [$TUNNEL_LOGLEVEL]'
complete -c tunnel -l transport-loglevel -d 'value, --proto-loglevel value  Transport logging level(previously called protocol logging level) {debug, info, warn, error, fatal} (default: "info") [$TUNNEL_PROTO_LOGLEVEL, $TUNNEL_TRANSPORT_LOGLEVEL]'
complete -c tunnel -l logfile -d 'value                                     Save application log to this file for reporting issues. [$TUNNEL_LOGFILE]'
complete -c tunnel -l log-directory -d 'value                               Save application log to this directory for reporting issues. [$TUNNEL_LOGDIRECTORY]'
complete -c tunnel -l trace-output -d 'value                                Name of trace output file, generated when cloudflared stops. [$TUNNEL_TRACE_OUTPUT]'
complete -c tunnel -l proxy-dns -d 'Run a DNS over HTTPS proxy server. (default: false) [$TUNNEL_DNS]'
complete -c tunnel -l proxy-dns-port -d 'value                              Listen on given port for the DNS over HTTPS proxy server. (default: 53) [$TUNNEL_DNS_PORT]'
complete -c tunnel -l proxy-dns-address -d 'value                           Listen address for the DNS over HTTPS proxy server. (default: "localhost") [$TUNNEL_DNS_ADDRESS]'
complete -c tunnel -l proxy-dns-upstream -d 'value                          Upstream endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://1.1.1.1/dns-query", "https://1.0.0.1/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_UPSTREAM]'
complete -c tunnel -l proxy-dns-max-upstream-conns -d 'value                Maximum concurrent connections to upstream. Setting to 0 means unlimited. (default: 5) [$TUNNEL_DNS_MAX_UPSTREAM_CONNS]'
complete -c tunnel -l proxy-dns-bootstrap -d 'value                         bootstrap endpoint URL, you can specify multiple endpoints for redundancy. (default: "https://162.159.36.1/dns-query", "https://162.159.46.1/dns-query", "https://[2606:4700:4700::1111]/dns-query", "https://[2606:4700:4700::1001]/dns-query")  (accepts multiple inputs) [$TUNNEL_DNS_BOOTSTRAP]'
complete -c tunnel -l credentials-file -d 'value, --cred-file value         Filepath at which to read/write the tunnel credentials [$TUNNEL_CRED_FILE]'
complete -c tunnel -l region -d 'value                                      Cloudflare Edge region to connect to. Omit or set to empty to connect to the global region. [$TUNNEL_REGION]'
complete -c tunnel -l edge-ip-version -d 'value                             Cloudflare Edge IP address version to connect with. {4, 6, auto} (default: "4") [$TUNNEL_EDGE_IP_VERSION]'
complete -c tunnel -l edge-bind-address -d 'value                           Bind to IP address for outgoing connections to Cloudflare Edge. [$TUNNEL_EDGE_BIND_ADDRESS]'
complete -c tunnel -l hostname -d 'value                                    Set a hostname on a Cloudflare zone to route traffic through this tunnel. [$TUNNEL_HOSTNAME]'
complete -c tunnel -l lb-pool -d 'value                                     The name of a (new/existing) load balancing pool to add this origin to. [$TUNNEL_LB_POOL]'
complete -c tunnel -l metrics-update-freq -d 'value                         Frequency to update tunnel metrics (default: 5s) [$TUNNEL_METRICS_UPDATE_FREQ]'
complete -c tunnel -l tag -d 'KEY=VALUE                                     Custom tags used to identify this tunnel, in format KEY=VALUE. Multiple tags may be specified  (accepts multiple inputs) [$TUNNEL_TAG]'
complete -c tunnel -l retries -d 'value                                     Maximum number of retries for connection/protocol errors. (default: 5) [$TUNNEL_RETRIES]'
complete -c tunnel -l label -d 'value                                       Use this option to give a meaningful label to a specific connector. When a tunnel starts up, a connector id unique to the tunnel is generated. This is a uuid. To make it easier to identify a connector, we will use the hostname of the machine the tunnel is running on along with the connector ID. This option exists if one wants to have more control over what their individual connectors are called.'
complete -c tunnel -l grace-period -d 'value                                When cloudflared receives SIGINT/SIGTERM it will stop accepting new requests, wait for in-progress requests to terminate, then shutdown. Waiting for in-progress requests will timeout after this grace period, or when a second SIGTERM/SIGINT is received. (default: 30s) [$TUNNEL_GRACE_PERIOD]'
complete -c tunnel -l compression-quality -d 'value                         (beta) Use cross-stream compression instead HTTP compression. 0-off, 1-low, 2-medium, >=3-high. (default: 0) [$TUNNEL_COMPRESSION_LEVEL]'
complete -c tunnel -l name -d 'value, -n value                              Stable name to identify the tunnel. Using this flag will create, route and run a tunnel. For production usage, execute each command separately [$TUNNEL_NAME]'
complete -c tunnel -l management-diagnostics -d 'Enables the in-depth diagnostic routes to be made available over the management service (/debug/pprof, /metrics, etc.) (default: true) [$TUNNEL_MANAGEMENT_DIAGNOSTICS]'
complete -c tunnel -s f -l overwrite-dns -d 'Overwrites existing DNS records with this hostname (default: false) [$TUNNEL_FORCE_PROVISIONING_DNS]'
complete -c tunnel -s h -l help -d 'show help (default: false)'
