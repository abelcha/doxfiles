# set -l formats_raw "csv|excel|html|json|json_lines|jsonl|ldjson|ltsv|markdown|mediawiki|ndjson|sqlite|ssv|tsv|ipynb"
# set -l formats "(echo $format_raw|tr '|' ' ')"

complete -c sqlitebiter -n __fish_no_arguments -l version -d 'Show the version and exit.'
complete -c sqlitebiter -s o -l output-path -d 'PATH          Output path of the SQLite database file.'
complete -c sqlitebiter -s a -l append -d 'Append table(s) to existing database.'
complete -c sqlitebiter -l add-primary-key -d PRIMARY_KEY_NAME
complete -c sqlitebiter -l convert-config -d 'TEXT           [experimental] Configurations for data'
complete -c sqlitebiter -s i -l index -d 'INDEX_ATTR          Comma separated attribute names to create'
complete -c sqlitebiter -l no-type-inference -d 'All of the columns assume as TEXT data type'
complete -c sqlitebiter -l type-hint-header -d 'Use header suffixes as type hints. If there'
complete -c sqlitebiter -l matrix-formatting -d '[header_aligned|trim]'
complete -c sqlitebiter -l replace-symbol -d 'TEXT           Replace symbols in attributes.'
complete -c sqlitebiter -s v -l verbose -d 'Verbosity level.  [default: 0]'
complete -c sqlitebiter -l max-workers -d 'WORKERS           Specify the maximum number of workers that'
complete -f -c sqlitebiter -n __fish_use_subcommand -a --debug -d 'For debug print.'
complete -c sqlitebiter -n __fish_no_arguments -l version -d 'Show the version and exit.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -s o -l output-path -d 'PATH          Output path of the SQLite database file.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -s a -l append -d 'Append table(s) to existing database.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -l add-primary-key -d PRIMARY_KEY_NAME
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -l convert-config -d 'TEXT           [experimental] Configurations for data'
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -s i -l index -d 'INDEX_ATTR          Comma separated attribute names to create'
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -l no-type-inference -d 'All of the columns assume as TEXT data type'
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -l type-hint-header -d 'Use header suffixes as type hints. If there'
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -l matrix-formatting -d '[header_aligned|trim]'
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -l replace-symbol -d 'TEXT           Replace symbols in attributes.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -s v -l verbose -d 'Verbosity level.  [default: 0]'
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -l max-workers -d 'WORKERS           Specify the maximum number of workers that'
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -l debug -d 'For debug print.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -s q -l quiet -d 'Suppress execution log messages.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from --debug' -s h -l help -d 'Show this message and exit.'
complete -f -c sqlitebiter -n __fish_use_subcommand -a -q -d '--quiet                     Suppress execution log messages.'
complete -c sqlitebiter -n __fish_no_arguments -l version -d 'Show the version and exit.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -s o -l output-path -d 'PATH          Output path of the SQLite database file.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -s a -l append -d 'Append table(s) to existing database.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -l add-primary-key -d PRIMARY_KEY_NAME
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -l convert-config -d 'TEXT           [experimental] Configurations for data'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -s i -l index -d 'INDEX_ATTR          Comma separated attribute names to create'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -l no-type-inference -d 'All of the columns assume as TEXT data type'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -l type-hint-header -d 'Use header suffixes as type hints. If there'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -l matrix-formatting -d '[header_aligned|trim]'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -l replace-symbol -d 'TEXT           Replace symbols in attributes.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -s v -l verbose -d 'Verbosity level.  [default: 0]'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -l max-workers -d 'WORKERS           Specify the maximum number of workers that'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -l debug -d 'For debug print.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -s q -l quiet -d 'Suppress execution log messages.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -q' -s h -l help -d 'Show this message and exit.'
complete -f -c sqlitebiter -n __fish_use_subcommand -a -h -d '--help                      Show this message and exit.'
complete -c sqlitebiter -n __fish_no_arguments -l version -d 'Show the version and exit.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -s o -l output-path -d 'PATH          Output path of the SQLite database file.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -s a -l append -d 'Append table(s) to existing database.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -l add-primary-key -d PRIMARY_KEY_NAME
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -l convert-config -d 'TEXT           [experimental] Configurations for data'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -s i -l index -d 'INDEX_ATTR          Comma separated attribute names to create'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -l no-type-inference -d 'All of the columns assume as TEXT data type'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -l type-hint-header -d 'Use header suffixes as type hints. If there'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -l matrix-formatting -d '[header_aligned|trim]'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -l replace-symbol -d 'TEXT           Replace symbols in attributes.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -s v -l verbose -d 'Verbosity level.  [default: 0]'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -l max-workers -d 'WORKERS           Specify the maximum number of workers that'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -l debug -d 'For debug print.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -s q -l quiet -d 'Suppress execution log messages.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from -h' -s h -l help -d 'Show this message and exit.'
complete -f -c sqlitebiter -n __fish_use_subcommand -a configure -d 'Configure the following application settings:'
complete -c sqlitebiter -n '__fish_seen_subcommand_from configure' -s h -l help -d 'Show this message and exit.'
complete -f -c sqlitebiter -n __fish_use_subcommand -a file -d 'Convert tabular data within CSV/Excel/HTML/JSON/Jupyter...'
complete -c sqlitebiter -n '__fish_seen_subcommand_from file' -s r -l recursive -d 'Read all files under each directory,'
complete -c sqlitebiter -n '__fish_seen_subcommand_from file' -l pattern -d 'PATTERN               Convert files matching PATTERN.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from file' -l exclude -d 'PATTERN               Exclude files matching PATTERN.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from file' -l follow-symlinks -d 'Follow symlinks.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from file' -s f -l format -d '<formatss>' -x -a 'csv excel html json json_lines jsonl ldjson ltsv markdown mediawiki ndjson sqlite ssv tsv ipynb'
complete -c sqlitebiter -n '__fish_seen_subcommand_from file' -l encoding -d 'ENCODING             Encoding to load files. Auto-detection from'
complete -c sqlitebiter -n '__fish_seen_subcommand_from file' -s h -l help -d 'Show this message and exit.'
complete -f -c sqlitebiter -n __fish_use_subcommand -a gs -d 'Convert a spreadsheet in Google Sheets to a SQLite database...'
complete -c sqlitebiter -n '__fish_seen_subcommand_from gs' -s h -l help -d 'Show this message and exit.'
complete -f -c sqlitebiter -n __fish_use_subcommand -a stdin -d 'Convert tabular data within CSV/HTML/JSON/Jupyter...'
complete -c sqlitebiter -n '__fish_seen_subcommand_from stdin' -s h -l help -d 'Show this message and exit.'
complete -f -c sqlitebiter -n __fish_use_subcommand -a url -d 'Scrape tabular data from a URL and convert data to a SQLite...'
complete -c sqlitebiter -n '__fish_seen_subcommand_from url' -s f -l format -d '[csv|excel|html|json|json_lines|jsonl|ldjson|ltsv|markdown|mediawiki|ndjson|sqlite|ssv|tsv|ipynb]'
complete -c sqlitebiter -n '__fish_seen_subcommand_from url' -s e -l encoding -d 'ENCODING         HTML page read encoding. Defaults to utf-8.'
complete -c sqlitebiter -n '__fish_seen_subcommand_from url' -s p -l proxy -d 'PROXY               Specify a proxy in the form'
complete -c sqlitebiter -n '__fish_seen_subcommand_from url' -s h -l help -d 'Show this message and exit.'
complete -f -c sqlitebiter -n __fish_use_subcommand -a version -d 'Show version information'
complete -c sqlitebiter -n '__fish_seen_subcommand_from version' -s h -l help -d 'Show this message and exit.'
