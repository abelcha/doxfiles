complete -c react-native -s v -d 'Output the current version'
complete -c react-native -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a config -d '[options]                           Print CLI configuration'
complete -c react-native -n '__fish_seen_subcommand_from config' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from config' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a clean -d '[options]                            Cleans your project by removing React Native related caches and modules.'
complete -c react-native -n '__fish_seen_subcommand_from clean' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from clean' -l include -d '<string>       Comma-separated flag of caches to clear e.g.'
complete -c react-native -n '__fish_seen_subcommand_from clean' -l project-root -d '<string>  Root path to your React Native project. When not'
complete -c react-native -n '__fish_seen_subcommand_from clean' -l verify-cache -d 'Whether to verify the cache. Currently only applies'
complete -c react-native -n '__fish_seen_subcommand_from clean' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a info -d '[options]                             Get relevant version info about OS, toolchain and libraries'
complete -c react-native -n '__fish_seen_subcommand_from info' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from info' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a upgrade -d '[options]                          Generate a link to the upgrade helper to help you upgrade'
complete -c react-native -n '__fish_seen_subcommand_from upgrade' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from upgrade' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a profile-hermes -d '[options] [destinationDir]  Pull and convert a Hermes tracing profile to Chrome tracing profile, then store it in the directory <destinationDir> of the local machine'
complete -c react-native -n '__fish_seen_subcommand_from profile-hermes' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from profile-hermes' -l filename -d '<string>        File name of the profile to be downloaded, eg.'
complete -c react-native -n '__fish_seen_subcommand_from profile-hermes' -l raw -d 'Pulls the original Hermes tracing profile without'
complete -c react-native -n '__fish_seen_subcommand_from profile-hermes' -l sourcemap-path -d '<string>  The local path to your source map file, eg.'
complete -c react-native -n '__fish_seen_subcommand_from profile-hermes' -l generate-sourcemap -d 'Generates the JS bundle and source map'
complete -c react-native -n '__fish_seen_subcommand_from profile-hermes' -l port -d '<number>             (default: "8081")'
complete -c react-native -n '__fish_seen_subcommand_from profile-hermes' -l appId -d '<string>           Specify an applicationId to launch after build. If'
complete -c react-native -n '__fish_seen_subcommand_from profile-hermes' -l appIdSuffix -d '<string>     Specify an applicationIdSuffix to launch after'
complete -c react-native -n '__fish_seen_subcommand_from profile-hermes' -l host -d '<string>            The host of the packager. (default: "localhost")'
complete -c react-native -n '__fish_seen_subcommand_from profile-hermes' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a log-ios -d '[options]                          starts iOS device syslog tail'
complete -c react-native -n '__fish_seen_subcommand_from log-ios' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from log-ios' -l interactive -d 'Explicitly select simulator to tail logs from. By default it'
complete -c react-native -n '__fish_seen_subcommand_from log-ios' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a run-ios -d '[options]                          builds your app and starts it on iOS simulator'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l mode -d '<string>          Explicitly set the scheme configuration to use. This'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l scheme -d '<string>        Explicitly set Xcode scheme to use'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l destination -d '<string>   Explicitly extend destination e.g. "arch=x86_64"'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l verbose -d 'Do not use xcbeautify or xcpretty even if installed'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l xcconfig -d '[string]      Explicitly set xcconfig to use'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l buildFolder -d '<string>   Location for iOS build artifacts. Corresponds to'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l extra-params -d '<string>  Custom params that will be passed to xcodebuild'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l target -d '<string>        Explicitly set Xcode target to use.'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l interactive -d 'Explicitly select which scheme and configuration to'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l force-pods -d 'Force CocoaPods installation'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l no-packager -d 'Do not launch packager while running the app'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l port -d '<number>           (default: 8081)'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l terminal -d '<string>      Launches the Metro Bundler in a new window using the'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l binary-path -d '<string>   Path relative to project root where pre-built .app'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l list-devices -d 'List all available iOS devices and simulators and'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l simulator -d '<string>     Explicitly set the simulator to use. Optionally set'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l device -d '[string]        Explicitly set the device to use by name. If the'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -l udid -d '<string>          Explicitly set the device to use by UDID'
complete -c react-native -n '__fish_seen_subcommand_from run-ios' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a build-ios -d '[options]                        builds your app for iOS platform'
complete -c react-native -n '__fish_seen_subcommand_from build-ios' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from build-ios' -l mode -d '<string>          Explicitly set the scheme configuration to use. This'
complete -c react-native -n '__fish_seen_subcommand_from build-ios' -l scheme -d '<string>        Explicitly set Xcode scheme to use'
complete -c react-native -n '__fish_seen_subcommand_from build-ios' -l destination -d '<string>   Explicitly extend destination e.g. "arch=x86_64"'
complete -c react-native -n '__fish_seen_subcommand_from build-ios' -l verbose -d 'Do not use xcbeautify or xcpretty even if installed'
complete -c react-native -n '__fish_seen_subcommand_from build-ios' -l xcconfig -d '[string]      Explicitly set xcconfig to use'
complete -c react-native -n '__fish_seen_subcommand_from build-ios' -l buildFolder -d '<string>   Location for iOS build artifacts. Corresponds to'
complete -c react-native -n '__fish_seen_subcommand_from build-ios' -l extra-params -d '<string>  Custom params that will be passed to xcodebuild'
complete -c react-native -n '__fish_seen_subcommand_from build-ios' -l target -d '<string>        Explicitly set Xcode target to use.'
complete -c react-native -n '__fish_seen_subcommand_from build-ios' -l interactive -d 'Explicitly select which scheme and configuration to'
complete -c react-native -n '__fish_seen_subcommand_from build-ios' -l force-pods -d 'Force CocoaPods installation'
complete -c react-native -n '__fish_seen_subcommand_from build-ios' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a log-android -d '[options]                      starts logkitty'
complete -c react-native -n '__fish_seen_subcommand_from log-android' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from log-android' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a run-android -d '[options]                      builds your app and starts it on a connected Android emulator or device'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l mode -d \<string\>\ \ \ \ \ \ \ \ \ \ \ Specify\ your\ app\'s\ build\ variant
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l tasks -d \<list\>\ \ \ \ \ \ \ \ \ \ \ \ Run\ custom\ Gradle\ tasks.\ By\ default\ it\'s
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l active-arch-only -d 'Build native libraries only for the current device'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l extra-params -d '<string>   Custom params passed to gradle build command'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l interactive -d 'Explicitly select build type and flavour to use'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l no-packager -d 'Do not launch packager while running the app'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l port -d '<number>            (default: 8081)'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l terminal -d '<string>       Launches the Metro Bundler in a new window using'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l appId -d '<string>          Specify an applicationId to launch after build. If'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l appIdSuffix -d '<string>    Specify an applicationIdSuffix to launch after'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l main-activity -d '<string>  Name of the activity to start'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l deviceId -d '<string>       builds your app and starts it on a specific'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l list-devices -d 'Lists all available Android devices and simulators'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l binary-path -d '<string>    Path relative to project root where pre-built .apk'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -l user -d '<number>           Id of the User Profile you want to install the app'
complete -c react-native -n '__fish_seen_subcommand_from run-android' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a build-android -d '[options]                    builds your app'
complete -c react-native -n '__fish_seen_subcommand_from build-android' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from build-android' -l mode -d \<string\>\ \ \ \ \ \ \ \ \ \ Specify\ your\ app\'s\ build\ variant
complete -c react-native -n '__fish_seen_subcommand_from build-android' -l tasks -d \<list\>\ \ \ \ \ \ \ \ \ \ \ Run\ custom\ Gradle\ tasks.\ By\ default\ it\'s
complete -c react-native -n '__fish_seen_subcommand_from build-android' -l active-arch-only -d 'Build native libraries only for the current device'
complete -c react-native -n '__fish_seen_subcommand_from build-android' -l extra-params -d '<string>  Custom params passed to gradle build command'
complete -c react-native -n '__fish_seen_subcommand_from build-android' -l interactive -d 'Explicitly select build type and flavour to use'
complete -c react-native -n '__fish_seen_subcommand_from build-android' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a bundle -d '[options]                           Build the bundle for the provided JavaScript entry file.'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l entry-file -d '<path>                    Path to the root JS file, either absolute or relative to JS root'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l platform -d '<string>                    Either "ios" or "android" (default: "ios")'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l transformer -d '<string>                 Specify a custom transformer to be used'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l dev -d '[boolean]                        If false, warnings are disabled and the bundle is minified (default: true)'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l minify -d '[boolean]                     Allows overriding whether bundle is minified. This defaults to false if dev is true, and true if dev is false. Disabling minification can be useful for speeding up production builds for testing purposes.'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l bundle-output -d '<string>               File name where to store the resulting bundle, ex. /tmp/groups.bundle'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l bundle-encoding -d '<string>             Encoding the bundle should be written in (https://nodejs.org/api/buffer.html#buffer_buffer). (default: "utf8")'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l max-workers -d '<number>                 Specifies the maximum number of workers the worker-pool will spawn for transforming files. This defaults to the number of the cores available on your machine.'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l sourcemap-output -d '<string>            File name where to store the sourcemap file for resulting bundle, ex. /tmp/groups.map'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l sourcemap-sources-root -d \<string\>\ \ \ \ \ \ Path\ to\ make\ sourcemap\'s\ sources\ entries\ relative\ to,\ ex.\ /root/dir
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l sourcemap-use-absolute-path -d 'Report SourceMapURL using its full path (default: false)'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l assets-dest -d '<string>                 Directory name where to store assets referenced in the bundle'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l unstable-transform-profile -d '<string>  Experimental, transform JS for a specific JS engine. Currently supported: hermes, hermes-canary, default (default: "default")'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l asset-catalog-dest -d '[string]          Path where to create an iOS Asset Catalog for images'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l reset-cache -d 'Removes cached files (default: false)'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l read-global-cache -d 'Try to fetch transformed JS code from the global cache, if configured. (default: false)'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -l config -d '<string>                      Path to the CLI configuration file'
complete -c react-native -n '__fish_seen_subcommand_from bundle' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a ram-bundle -d '[options]                       Build the RAM bundle for the provided JavaScript entry file. See https://reactnative.dev/docs/ram-bundles-inline-requires.'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l entry-file -d '<path>                    Path to the root JS file, either absolute or relative to JS root'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l platform -d '<string>                    Either "ios" or "android" (default: "ios")'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l transformer -d '<string>                 Specify a custom transformer to be used'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l dev -d '[boolean]                        If false, warnings are disabled and the bundle is minified (default: true)'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l minify -d '[boolean]                     Allows overriding whether bundle is minified. This defaults to false if dev is true, and true if dev is false. Disabling minification can be useful for speeding up production builds for testing purposes.'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l bundle-output -d '<string>               File name where to store the resulting bundle, ex. /tmp/groups.bundle'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l bundle-encoding -d '<string>             Encoding the bundle should be written in (https://nodejs.org/api/buffer.html#buffer_buffer). (default: "utf8")'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l max-workers -d '<number>                 Specifies the maximum number of workers the worker-pool will spawn for transforming files. This defaults to the number of the cores available on your machine.'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l sourcemap-output -d '<string>            File name where to store the sourcemap file for resulting bundle, ex. /tmp/groups.map'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l sourcemap-sources-root -d \<string\>\ \ \ \ \ \ Path\ to\ make\ sourcemap\'s\ sources\ entries\ relative\ to,\ ex.\ /root/dir
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l sourcemap-use-absolute-path -d 'Report SourceMapURL using its full path (default: false)'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l assets-dest -d '<string>                 Directory name where to store assets referenced in the bundle'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l unstable-transform-profile -d '<string>  Experimental, transform JS for a specific JS engine. Currently supported: hermes, hermes-canary, default (default: "default")'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l asset-catalog-dest -d '[string]          Path where to create an iOS Asset Catalog for images'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l reset-cache -d 'Removes cached files (default: false)'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l read-global-cache -d 'Try to fetch transformed JS code from the global cache, if configured. (default: false)'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l config -d '<string>                      Path to the CLI configuration file'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -l indexed-ram-bundle -d 'Force the "Indexed RAM" bundle file format, even when building for android (default: false)'
complete -c react-native -n '__fish_seen_subcommand_from ram-bundle' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a start -d '[options]                            Start the React Native development server.'
complete -c react-native -n '__fish_seen_subcommand_from start' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from start' -l port -d '<number>'
complete -c react-native -n '__fish_seen_subcommand_from start' -l host -d '<string>                                                (default: "")'
complete -c react-native -n '__fish_seen_subcommand_from start' -l projectRoot -d '<path>                                          Path to a custom project root'
complete -c react-native -n '__fish_seen_subcommand_from start' -l watchFolders -d '<list>                                         Specify any additional folders to be added to the watch list'
complete -c react-native -n '__fish_seen_subcommand_from start' -l assetPlugins -d '<list>                                         Specify any additional asset plugins to be used by the packager by full filepath'
complete -c react-native -n '__fish_seen_subcommand_from start' -l sourceExts -d '<list>                                           Specify any additional source extensions to be used by the packager'
complete -c react-native -n '__fish_seen_subcommand_from start' -l max-workers -d '<number>                                        Specifies the maximum number of workers the worker-pool will spawn for transforming files. This defaults to the number of the cores available on your machine.'
complete -c react-native -n '__fish_seen_subcommand_from start' -l transformer -d '<string>                                        Specify a custom transformer to be used'
complete -c react-native -n '__fish_seen_subcommand_from start' -l https -d 'Enables https connections to the server'
complete -c react-native -n '__fish_seen_subcommand_from start' -l key -d '<path>                                                  Path to custom SSL key'
complete -c react-native -n '__fish_seen_subcommand_from start' -l cert -d '<path>                                                 Path to custom SSL cert'
complete -c react-native -n '__fish_seen_subcommand_from start' -l config -d '<string>                                             Path to the CLI configuration file'
complete -c react-native -n '__fish_seen_subcommand_from start' -l no-interactive -d 'Disables interactive mode'
complete -c react-native -n '__fish_seen_subcommand_from start' -l experimental-debugger -d \[Experimental\]\ Enable\ the\ new\ debugger\ experience\ and\ \'j\'\ to\ debug.\ This\ enables\ the\ new\ frontend\ experience\ only:\ connection\ reliability\ and\ some\ basic\ features\ are\ unstable\ in\ this\ release.
complete -c react-native -n '__fish_seen_subcommand_from start' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a init -d '[options] [projectName]               New app will be initialized in the directory of the same name. Android and iOS projects will use this name for publishing setup.'
complete -c react-native -n '__fish_seen_subcommand_from init' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n __fish_no_arguments -l version -d '<string>        Shortcut for `--template react-native@version`'
complete -c react-native -n '__fish_seen_subcommand_from init' -l template -d '<string>       Uses a custom template. Valid arguments are the'
complete -c react-native -n '__fish_seen_subcommand_from init' -l npm -d 'Forces using npm for initialization'
complete -c react-native -n '__fish_seen_subcommand_from init' -l pm -d '<string>             Use specific package manager to initialize the'
complete -c react-native -n '__fish_seen_subcommand_from init' -l directory -d '<string>      Uses a custom directory instead of `<projectName>`.'
complete -c react-native -n '__fish_seen_subcommand_from init' -l title -d '<string>          Uses a custom app title name for application'
complete -c react-native -n '__fish_seen_subcommand_from init' -l skip-install -d 'Skips dependencies installation step'
complete -c react-native -n '__fish_seen_subcommand_from init' -l install-pods -d '[boolean]  Determine if CocoaPods should be installed when'
complete -c react-native -n '__fish_seen_subcommand_from init' -l package-name -d '<string>   Inits a project with a custom package name'
complete -c react-native -n '__fish_seen_subcommand_from init' -l platform-name -d '<string>  Name of out of tree platform to be used for ex.'
complete -c react-native -n '__fish_seen_subcommand_from init' -l skip-git-init -d 'Skip git repository initialization'
complete -c react-native -n '__fish_seen_subcommand_from init' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a doctor -d '[options]                           Diagnose and fix common Node.js, iOS, Android & React Native issues.'
complete -c react-native -n '__fish_seen_subcommand_from doctor' -l verbose -d 'Increase logging verbosity'
complete -c react-native -n '__fish_seen_subcommand_from doctor' -l fix -d 'Attempt to fix all diagnosed issues.'
complete -c react-native -n '__fish_seen_subcommand_from doctor' -l contributor -d 'Add healthchecks required to installations required for'
complete -c react-native -n '__fish_seen_subcommand_from doctor' -s h -l help -d 'display help for command'
complete -f -c react-native -n __fish_use_subcommand -a help -d '[command]                             display help for command'
complete -c react-native -n '__fish_seen_subcommand_from help' -s v -d 'Output the current version'
complete -c react-native -n '__fish_seen_subcommand_from help' -s h -l help -d 'display help for command'
