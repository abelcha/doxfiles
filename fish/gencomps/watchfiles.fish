complete -f -c watchfiles -n __fish_use_subcommand -a paths -d 'Filesystem paths to watch, defaults to current directory'
complete -c watchfiles -s h -l help -d 'show this help message and exit'
complete -c watchfiles -l ignore-paths -d '[IGNORE_PATHS]'
complete -c watchfiles -l target-type -d '[{command,function,auto}]'
complete -f -c watchfiles -n __fish_use_subcommand -a --filter -d '[FILTER]     Which files to watch, defaults to "default" which uses the "DefaultFilter", "python" uses the "PythonFilter", "all" uses no filter, any other value is interpreted as a python function/class path which is imported'
complete -f -c watchfiles -n __fish_use_subcommand -a --args -d '[ARGS]         Arguments to set on sys.argv before calling target function, used only if the target is a function'
complete -f -c watchfiles -n __fish_use_subcommand -a --verbose -d 'Set log level to "debug", wins over `--verbosity`'
complete -f -c watchfiles -n __fish_use_subcommand -a --non-recursive -d 'Do not watch for changes in sub-directories recursively'
complete -f -c watchfiles -n __fish_use_subcommand -a --verbosity -d '[{warning,info,debug}]'
complete -f -c watchfiles -n __fish_use_subcommand -a Log -d 'level, defaults to "info"'
complete -f -c watchfiles -n __fish_use_subcommand -a --sigint-timeout -d '[SIGINT_TIMEOUT]'
complete -f -c watchfiles -n __fish_use_subcommand -a How -d 'long to wait for the sigint timeout before sending sigkill.'
complete -f -c watchfiles -n __fish_use_subcommand -a --grace-period -d '[GRACE_PERIOD]'
complete -f -c watchfiles -n __fish_use_subcommand -a Number -d 'of seconds after the process is started before watching for changes.'
complete -f -c watchfiles -n __fish_use_subcommand -a --sigkill-timeout -d '[SIGKILL_TIMEOUT]'
complete -f -c watchfiles -n __fish_use_subcommand -a How -d 'long to wait for the sigkill timeout before issuing a timeout exception.'
complete -c watchfiles -n __fish_no_arguments -s V -l version -d show\ program\'s\ version\ number\ and\ exit
