#string replace -a -- {} arangorestore  {} --help
complete -c arangorestore -l all-databases -d '<boolean>                          Restore the data of all databases. (default: false) (introduced in v3.5.0)'
complete -c arangorestore -l batch-size -d '<uint64>                              The maximum size for individual data batches (in bytes). (default: 8388608)'
complete -c arangorestore -l collection -d '<string...>                           Restrict the restore to this collection name (can be specified multiple times). (default: )'
complete -c arangorestore -l configuration -d '<string>                           The configuration file or "none". (default: "")'
complete -c arangorestore -l continue -d '<boolean>                               Continue the restore operation. (default: false)'
complete -c arangorestore -l create-collection -d '<boolean>                      Create collection structure. (default: true)'
complete -c arangorestore -l create-database -d '<boolean>                        Create the target database if it does not exist. (default: false)'
complete -c arangorestore -l enable-revision-trees -d '<boolean>                  Enable revision trees for new collections if the collection attributes `syncByRevision` and `usesRevisionsAsDocumentIds` are'
complete -c arangorestore -l envelope -d '<boolean>                               wrap each document into a {type, data} envelope (this is required for compatibility with v3.7 and before). (default: false)'
complete -c arangorestore -l force -d '<boolean>                                  Continue the restore even in the face of some server-side errors. (default: false)'
complete -c arangorestore -l force-same-database -d '<boolean>                    Force the same database name as in the source `dump.json` file. (default: false)'
complete -c arangorestore -l ignore-distribute-shards-like-errors -d '<boolean>   Continue the restore even if the sharding prototype collection is missing. (default: false)'
complete -c arangorestore -l import-data -d '<boolean>                            Import data into collection. (default: true)'
complete -c arangorestore -l include-system-collections -d '<boolean>             Include system collections. (default: false)'
complete -c arangorestore -l initial-connect-retries -d '<uint32>                 The number of connect retries for the initial connection. (default: 3) (introduced in v3.7.13, v3.8.1)'
complete -c arangorestore -l input-directory -d '<string>                         The input directory. (default: "/usr/local/arangodb/dump")'
complete -c arangorestore -l number-of-shards -d '<string...>                     Override the `numberOfShards` value (can be specified multiple times, e.g. --number-of-shards 2 --number-of-shards myCollection=3).'
complete -c arangorestore -l overwrite -d '<boolean>                              Overwrite collections if they exist. (default: true)'
complete -c arangorestore -l progress -d '<boolean>                               Show the progress. (default: true)'
complete -c arangorestore -l replication-factor -d '<string...>                   Override the `replicationFactor` value (can be specified multiple times, e.g. --replication-factor 2 --replication-factor'
complete -c arangorestore -l threads -d '<uint32>                                 The maximum number of collections to process in parallel. (default: 8) (introduced in v3.4.0)'
complete -c arangorestore -n __fish_no_arguments -l version -d '<boolean>                                Print the version and other related information, then exit.'
complete -c arangorestore -l version-json -d '<boolean>                           Print the version and other related information in JSON format, then exit. (introduced in v3.9.0)'
complete -c arangorestore -l view -d '<string...>                                 Restrict the restore to this view name (can be specified multiple times). (default: )'
complete -c arangorestore -l log.color -d '<boolean>                              Use colors for TTY logging. (default: true)'
complete -c arangorestore -l log.escape-control-chars -d '<boolean>               Escape control characters in log messages. (default: true) (introduced in v3.9.0)'
complete -c arangorestore -l log.escape-unicode-chars -d '<boolean>               Escape Unicode characters in log messages. (default: false) (introduced in v3.9.0)'
complete -c arangorestore -l log.file-group -d '<string>                          group to use for new log file, user must be a member of this group (default: "") (introduced in v3.4.5)'
complete -c arangorestore -l log.file-mode -d '<string>                           mode to use for new log file, umask will be applied as well (default: "") (introduced in v3.4.5)'
complete -c arangorestore -l log.hostname -d '<string>                            The hostname to use in log message. Leave empty for none, use "auto" to automatically determine a hostname. (default: "")'
complete -c arangorestore -l log.ids -d '<boolean>                                Log unique message IDs. (default: true) (introduced in v3.5.0)'
complete -c arangorestore -l log.level -d '<string...>                            Set the topic-specific log level, using `--log.level level` for the general topic or `--log.level topic=level` for the specified'
complete -c arangorestore -l log.max-entry-length -d '<uint32>                    The maximum length of a log entry (in bytes). (default: 134217728) (introduced in v3.7.9)'
complete -c arangorestore -l log.output -d '<string...>                           Log destination(s), e.g. file:///path/to/file (any occurrence of $PID is replaced with the process ID). (default: )'
complete -c arangorestore -l log.role -d '<boolean>                               Log the server role. (default: false)'
complete -c arangorestore -l log.structured-param -d '<string...>                 Toggle the usage of the log category parameter in structured log messages. (default: ) (introduced in v3.10.0)'
complete -c arangorestore -l log.time-format -d '<string>                         The time format to use in logs.'
complete -c arangorestore -l log.use-json-format -d '<boolean>                    Use JSON as output format for logging. (default: false) (introduced in v3.8.0)'
complete -c arangorestore -l server.authentication -d '<boolean>                  Require authentication credentials when connecting (does not affect the server-side authentication settings). (default: true)'
complete -c arangorestore -l server.connection-timeout -d '<double>               The connection timeout (in seconds). (default: 5)'
complete -c arangorestore -l server.database -d '<string>                         The database name to use when connecting. (default: "_system")'
complete -c arangorestore -l server.endpoint -d \<string...\>\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ endpoint\ to\ connect\ to.\ Use\ \'none\'\ to\ start\ without\ a\ server.\ Use\ http+ssl://\ as\ schema\ to\ connect\ to\ an\ SSL-secured\ server
complete -c arangorestore -l server.password -d '<string>                         The password to use when connecting. If not specified and authentication is required, the user is prompted for a password'
complete -c arangorestore -l server.request-timeout -d '<double>                  The request timeout (in seconds). (default: 1200)'
complete -c arangorestore -l server.username -d '<string>                         The username to use when connecting. (default: "root")'
complete -c arangorestore -l ssl.protocol -d '<uint64>                            The SSL protocol (1 = SSLv2 (unsupported), 2 = SSLv2 or SSLv3 (negotiated), 3 = SSLv3, 4 = TLSv1, 5 = TLSv1.2, 6 = TLSv1.3, 9 ='
complete -c arangorestore -l temp.path -d '<string>                               The path for temporary files. (default: "")'
