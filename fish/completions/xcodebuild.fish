function __xcodebuild_get_schemes
    command xcodebuild -list -json | jq -r '.project.schemes.[]'
end
function __xcodebuild_get_targets
    command xcodebuild -list -json | jq -r '.project.targets.[]'
end
function __xcodebuild_get_configurations
    command xcodebuild -list -json | jq -r '.project.configurations.[]'
end
complete -c xcodebuild -o usage                                        -d 'print brief usage'
complete -c xcodebuild -o help                                         -d 'print complete usage'
complete -c xcodebuild -o verbose                                      -d 'provide additional status output'
complete -c xcodebuild -o license                                      -d 'show the Xcode and SDK license agreements'
complete -c xcodebuild -o checkFirstLaunchStatus                       -d 'Check if any First Launch tasks need to be performed'
complete -c xcodebuild -o runFirstLaunch                               -d 'install packages and agree to the license. Add an `-checkForNewerComponents` flag to check for any additional Xcode Device support components.'
complete -c xcodebuild -o downloadAllPlatforms                         -d 'downloads a matching simulator runtime for every platform in this Xcode'
complete -c xcodebuild -o downloadPlatform                             -d 'NAME download the platform NAME'
complete -c xcodebuild -o importPlatform                               -d 'DMG_Path import the platform NAME'
complete -c xcodebuild -o project                                      -d 'NAME build the project NAME'
complete -c xcodebuild -o target                                       -d 'NAME build the target NAME' -xa '(__xcodebuild_get_targets)'
complete -c xcodebuild -o alltargets                                   -d 'build all targets'
complete -c xcodebuild -o workspace                                    -d 'NAME build the workspace NAME'
complete -c xcodebuild -o scheme                                       -d 'NAME build the scheme NAME' -xa '(__xcodebuild_get_schemes)'
complete -c xcodebuild -o configuration                                -d 'NAME use the build configuration NAME for building each target' -xa '(__xcodebuild_get_configurations)'
complete -c xcodebuild -o xcconfig                                     -d 'PATH apply the build settings defined in the file at PATH as overrides'
complete -c xcodebuild -o arch                                         -d 'ARCH build each target for the architecture ARCH; this will override architectures defined in the project'
complete -c xcodebuild -o sdk                                          -d 'SDK use SDK as the name or path of the base SDK when building the project'
complete -c xcodebuild -o toolchain                                    -d 'NAME use the toolchain with identifier or name NAME'
complete -c xcodebuild -o destination                                  -d 'DESTINATIONSPECIFIER use the destination described by DESTINATIONSPECIFIER (a comma-oeparated set of key=value pairs describing the destination to use)'
complete -c xcodebuild -o destination-timeout                          -d 'TIMEOUT wait for TIMEOUT seconds while searching for the destination device'
complete -c xcodebuild -o parallelizeTargets                           -d 'build independent targets in parallel'
complete -c xcodebuild -o jobs                                         -d 'NUMBER specify the maximum number of concurrent build operations'
complete -c xcodebuild -o maximum-concurrent-test-device-destinations  -d 'NUMBER the maximum number of device destinations to test on concurrently'
complete -c xcodebuild -o maximum-concurrent-test-simulator-destination -d 'NUMBER the maximum number of simulator destinations to test on concurrently'
complete -c xcodebuild -o parallel-testing-enabled -xa 'YES NO'         -d 'overrides the per-target setting in the scheme'
complete -c xcodebuild -o parallel-testing-worker-count                -d 'NUMBER the exact number of test runners that will be spawned during parallel testing'
complete -c xcodebuild -o maximum-parallel-testing-workers             -d 'NUMBER the maximum number of test runners that will be spawned during parallel testing'
complete -c xcodebuild -o dry-run                                      -d 'do everything except actually running the commands'
complete -c xcodebuild -o quiet                                        -d 'do not print any output except for warnings and errors'
complete -c xcodebuild -o hideShellScriptEnvironment                   -d "don't show shell script environment variables in build log"
complete -c xcodebuild -o showsdks                                     -d 'display a compact list of the installed SDKs'
complete -c xcodebuild -o showdestinations                             -d 'display a list of destinations'
complete -c xcodebuild -o showTestPlans                                -d 'display a list of test plans'
complete -c xcodebuild -o showBuildSettings                            -d 'display a list of build settings and values'
complete -c xcodebuild -o showBuildSettingsForIndex                    -d 'display build settings for the index service'
complete -c xcodebuild -o list                                         -d 'lists the targets and configurations in a project, or the schemes in a workspace'
complete -c xcodebuild -o find-executable                              -d 'NAME display the full path to executable NAME in the provided SDK and toolchain'
complete -c xcodebuild -o find-library                                 -d 'NAME display the full path to library NAME in the provided SDK and toolchain'
complete -c xcodebuild -o version                                      -d 'display the version of Xcode; with -odk will display info about one or all installed SDKs'
complete -c xcodebuild -o enableAddressSanitizer -xa 'YES NO'           -d 'turn the address sanitizer on or off'
complete -c xcodebuild -o enableThreadSanitizer -xa 'YES NO'            -d 'turn the thread sanitizer on or off'
complete -c xcodebuild -o enableUndefinedBehaviorSanitizer -xa 'YES NO' -d 'turn the undefined behavior sanitizer on or off'
complete -c xcodebuild -o resultBundlePath                             -d 'PATH specifies the directory where a result bundle describing what occurred will be placed'
complete -c xcodebuild -o resultStreamPath                             -d 'PATH specifies the file where a result stream will be written to (the file must already exist)'
complete -c xcodebuild -o resultBundleVersion                          -d '3 [default] specifies which result bundle version should be used'
complete -c xcodebuild -o clonedSourcePackagesDirPath                  -d 'PATH specifies the directory to which remote source packages are fetch or expected to be found'
complete -c xcodebuild -o derivedDataPath                              -d 'PATH specifies the directory where build products and other derived data will go'
complete -c xcodebuild -o archivePath                                  -d 'PATH specifies the directory where any created archives will be placed, or the archive that should be exported'
complete -c xcodebuild -o exportArchive                                -d 'specifies that an archive should be exported'
complete -c xcodebuild -o exportNotarizedApp                           -d 'export an archive that has been notarized by Apple'
complete -c xcodebuild -o exportOptionsPlist                           -d 'PATH specifies a path to a plist file that configures archive exporting'
complete -c xcodebuild -o enableCodeCoverage -xa 'YES NO'               -d 'turn code coverage on or off when testing'
complete -c xcodebuild -o exportPath                                   -d 'PATH specifies the destination for the product exported from an archive'
complete -c xcodebuild -o skipUnavailableActions                       -d 'specifies that scheme actions that cannot be performed should be skipped instead of causing a failure'
complete -c xcodebuild -o exportLocalizations                          -d 'exports completed and outstanding project localizations'
complete -c xcodebuild -o importLocalizations                          -d 'imports localizations for a project, assuming any necessary localized resources have been created in Xcode'
complete -c xcodebuild -o localizationPath                             -d 'specifies a path to XLIFF localization files'
complete -c xcodebuild -o exportLanguage                               -d 'specifies multiple optional ISO 639-1 languages included in a localization export'
complete -c xcodebuild -o defaultLanguage                              -d 'specifies the default ISO 639-1 language to be used as the source language on export'
complete -c xcodebuild -o xctestrun                                    -d 'specifies a path to a test run specification'
complete -c xcodebuild -o testProductsPath                             -d 'specifies a path for the test products'
complete -c xcodebuild -o enablePerformanceTestsDiagnostics -xa 'YES NO' -d 'enables performance trace and memgraph collection for performance XCTests'
complete -c xcodebuild -o testPlan                                     -d 'specifies the name of the test plan associated with the scheme to use for testing'
complete -c xcodebuild -o only-testing                                 -d 'constrains testing by specifying tests to include, and excluding other tests'
complete -c xcodebuild -o skip-testing                                 -d 'constrains testing by specifying tests to exclude, but including other tests'
complete -c xcodebuild -o test-timeouts-enabled -xa 'YES NO'            -d 'enable or disable test timeout behavior'
complete -c xcodebuild -o default-test-execution-time-allowance        -d 'SECONDS the default execution time an individual test is given to execute, if test timeouts are enabled'
complete -c xcodebuild -o maximum-test-execution-time-allowance        -d "SECONDS the maximum execution time an individual test is given to execute, regardless of the test's preferred allowance"
complete -c xcodebuild -o test-iterations                              -d '<number> If specified, tests will run <number> times. May be used in conjunction with either -retry-tests-on-failure or -run-tests-until-failure, in which case this will become the maximum number of iterations.'
complete -c xcodebuild -o retry-tests-on-failure                       -d 'If specified, tests will retry on failure. May be used in conjunction with -test-iterations <number>, in which case <number> will be the maximum number of iterations. Otherwise, a maximum of 3 is assumed. May not be used with -run-tests-until-failure.'
complete -c xcodebuild -o run-tests-until-failure                      -d 'If specified, tests will run until they fail. May be used in conjunction with -test-iterations <number>, in which case <number> will be the maximum number of iterations. Otherwise, a maximum of 100 is assumed. May not be used with -retry-tests-on-failure.'
complete -c xcodebuild -o test-repetition-relaunch-enabled -xa 'YES NO' -d 'Enable or disable, tests repeating in a new process for each repetition.  Must be used in conjunction with -test-iterations, -retry-tests-on-failure, or -run-tests-until-failure. If not specified, tests will repeat in the same process.'
complete -c xcodebuild -o only-test-configuration                      -d 'constrains testing by specifying test configurations to include, and excluding other test configurations'
complete -c xcodebuild -o skip-test-configuration                      -d 'constrains testing by specifying test configurations to exclude, but including other test configurations'
complete -c xcodebuild -o collect-test-diagnostics                     -d 'on-failure|never Whether or not testing collects verbose diagnostics (like a sysdiagnose) when encountering a failure'
complete -c xcodebuild -o testLanguage                                 -d 'constrains testing by specifying ISO 639-1 language in which to run the tests'
complete -c xcodebuild -o testRegion                                   -d 'constrains testing by specifying ISO 3166-1 region in which to run the tests'
complete -c xcodebuild -o enumerate-tests                              -d 'Enumerate the tests that would be executed by this command without actually executing them'
complete -c xcodebuild -o test-enumeration-otyle                       -d 'The style in which to enumerate the tests. Valid styles: flat, hierarchical'
complete -c xcodebuild -o test-enumeration-format                      -d 'The output format of the enumerated tests. Valid formats: text, json'
complete -c xcodebuild -o test-enumeration-output-path                 -d "The path (relative or absolute) where the results of test enumeration should be written. If '-' is supplied, writes to standard out."
complete -c xcodebuild -o resolvePackageDependencies                   -d 'resolves any Swift package dependencies referenced by the project or workspace'
complete -c xcodebuild -o disableAutomaticPackageResolution            -d 'prevents packages from automatically being resolved to versions other than those recorded in the `Package.resolved` file'
complete -c xcodebuild -o onlyUsePackageVersionsFromResolvedFile       -d 'prevents packages from automatically being resolved to versions other than those recorded in the `Package.resolved` file'
complete -c xcodebuild -o skipPackageUpdates                           -d 'Skip updating package dependencies from their remote'
complete -c xcodebuild -o disablePackageRepositoryCache                -d 'disable use of a local cache of remote package repositories'
complete -c xcodebuild -o skipPackagePluginValidation                  -d 'Skip validation of package plugins (this can be a security risk if they are not from trusted sources)'
complete -c xcodebuild -o skipMacroValidation                          -d 'Skip validation of macros (this can be a security risk if they are not from trusted sources)'
complete -c xcodebuild -o packageCachePath                             -d 'path of caches used for package support'
complete -c xcodebuild -o packageAuthorizationProvider                 -d 'keychain|netrc Specify the credential store to be used when resolving packages'
complete -c xcodebuild -o defaultPackageRegistryURL                    -d 'URL of the default package registry'
complete -c xcodebuild -o packageDependencySCMToRegistryTransformation -d 'specifies the transformation to apply to SCM-based package dependencies (none, useRegistryIdentity, or useRegistryIdentityAndSources)'
complete -c xcodebuild -o skipPackageSignatureValidation               -d 'Skip validation of package signatures (this can be a security risk if they are not from trusted sources)'
complete -c xcodebuild -o packageFingerprintPolicy                     -d 'Package fingerprint checking policy (`warn` or `strict`)'
complete -c xcodebuild -o packageSigningEntityPolicy                   -d 'Package signing entity checking policy (`warn` or `strict`)'
complete -c xcodebuild -o json                                         -d 'output as JSON (note: -json implies -quiet)'
complete -c xcodebuild -o allowProvisioningUpdates                     -d "Allow xcodebuild to communicate with the Apple Developer website. For automatically signed targets, xcodebuild will create and update profiles, app IDs, and certificates. For manually signed targets, xcodebuild will download missing or updated provisioning profiles. Requires a developer account to have been added in Xcode's Accounts settings or an App Store Connect authentication key to be specified via the -authenticationKeyPath, -authenticationKeyID, and -authenticationKeyIssuerID parameters."
complete -c xcodebuild -o allowProvisioningDeviceRegistration          -d 'Allow xcodebuild to register your destination device on the developer portal if necessary. This flag only takes effect if -allowProvisioningUpdates is also passed.'
complete -c xcodebuild -o authenticationKeyPath                        -d 'specifies the path to an authentication key issued by App Store Connect. If specified, xcodebuild will authenticate with the Apple Developer website using this credential. The -authenticationKeyID and -authenticationKeyIssuerID parameters are required.'
complete -c xcodebuild -o authenticationKeyID                          -d 'specifies the key identifier associated with the App Store Conect authentication key at -authenticationKeyPath. This string can be located in the users and access details for your provider at "https://appstoreconnect.apple.com".'
complete -c xcodebuild -o authenticationKeyIssuerID                    -d 'specifies the App Store Connect issuer identifier associated with the authentication key at -authenticationKeyPath. This string can be located in the users and access details for your provider at "https://appstoreconnect.apple.com".'
complete -c xcodebuild -o scmProvider                                  -d 'which implementation to use for Git operations (system/xcode)'
complete -c xcodebuild -o showBuildTimingSummary                       -d 'display a report of the timings of all the commands invoked during the build'
complete -c xcodebuild -o create-xcframework                           -d 'create an xcframework from prebuilt libraries; -help for more information.'
