complete -c gleam -n __fish_use_subcommand -a add -d 'Add new project dependencies'
complete -c gleam -n '__fish_seen_subcommand_from add' -l dev -d 'Add the packages as dev-only dependencies'
complete -c gleam -n '__fish_seen_subcommand_from add' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a build -d 'Build the project'
complete -c gleam -n '__fish_seen_subcommand_from build' -l warnings-as-errors -d 'Emit compile time warnings as errors'
complete -c gleam -n '__fish_seen_subcommand_from build' -s t -l target -d '<TARGET>     The platform to target (erlang|javascript)' -x -a 'erlang javascript'
complete -c gleam -n '__fish_seen_subcommand_from build' -l no-print-progress -d "Don't print progress information"
complete -c gleam -n '__fish_seen_subcommand_from build' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a check -d 'Type check the project'
complete -c gleam -n '__fish_seen_subcommand_from check' -s t -l target -d '<TARGET>  The platform to target (erlang|javascript)' -x -a 'erlang javascript'
complete -c gleam -n '__fish_seen_subcommand_from check' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a clean -d 'Clean build artifacts'
complete -c gleam -n '__fish_seen_subcommand_from clean' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a deps -d 'Work with dependency packages'
complete -c gleam -n '__fish_seen_subcommand_from deps' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a docs -d 'Render HTML documentation'
complete -c gleam -n '__fish_seen_subcommand_from docs' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a export -d 'Export something useful from the Gleam project'
complete -c gleam -n '__fish_seen_subcommand_from export' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a fix -d 'Rewrite deprecated Gleam code'
complete -c gleam -n '__fish_seen_subcommand_from fix' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a format -d 'Format source code'
complete -c gleam -n '__fish_seen_subcommand_from format' -l stdin -d 'Read source from STDIN'
complete -c gleam -n '__fish_seen_subcommand_from format' -l check -d 'Check if inputs are formatted without changing them'
complete -c gleam -n '__fish_seen_subcommand_from format' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a help -d 'Print this message or the help of the given subcommand(s)'
complete -c gleam -n __fish_use_subcommand -a hex -d 'Work with the Hex package manager'
complete -c gleam -n '__fish_seen_subcommand_from hex' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a lsp -d 'Run the language server, to be used by editors'
complete -c gleam -n '__fish_seen_subcommand_from lsp' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a new -d 'Create a new project'
complete -c gleam -n '__fish_seen_subcommand_from new' -l name -d '<NAME>          Name of the project'
complete -c gleam -n '__fish_seen_subcommand_from new' -l template -d '<TEMPLATE>  The template to use [default: erlang] [possible values: erlang, javascript]'
complete -c gleam -n '__fish_seen_subcommand_from new' -l skip-git -d 'Skip git initialization and creation of .gitignore, .git/* and .github/* files'
complete -c gleam -n '__fish_seen_subcommand_from new' -l skip-github -d 'Skip creation of .github/* files'
complete -c gleam -n '__fish_seen_subcommand_from new' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a publish -d 'Publish the project to the Hex package manager'
complete -c gleam -n __fish_use_subcommand -a remove -d 'Remove project dependencies'
complete -c gleam -n '__fish_seen_subcommand_from remove' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a run -d 'Run the project'
complete -c gleam -n '__fish_seen_subcommand_from run' -s t -l target -d '<TARGET>    The platform to target (erlang|javascript)' -x -a 'erlang javascript'
complete -c gleam -n '__fish_seen_subcommand_from run' -l runtime -d '<RUNTIME>  The runtime to target (nodejs|deno|bun)' -x -a 'nodejs deno bun'
complete -c gleam -n '__fish_seen_subcommand_from run' -s m -l module -d '<MODULE>    The module to run'
complete -c gleam -n '__fish_seen_subcommand_from run' -l no-print-progress -d "Don't print progress information"
complete -c gleam -n '__fish_seen_subcommand_from run' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a shell -d 'Start an Erlang shell'
complete -c gleam -n '__fish_seen_subcommand_from shell' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a test -d 'Run the project tests'
complete -c gleam -n '__fish_seen_subcommand_from test' -s t -l target -d '<TARGET>    The platform to target (erlang|javascript)' -x -a 'erlang javascript'
complete -c gleam -n '__fish_seen_subcommand_from test' -l runtime -d '<RUNTIME>  The runtime to target (nodejs|deno|bun)' -x -a 'nodejs deno bun'
complete -c gleam -n '__fish_seen_subcommand_from test' -s h -l help -d 'Print help'
complete -c gleam -n __fish_use_subcommand -a update -d 'Update dependency packages to their latest versions'
complete -c gleam -n '__fish_seen_subcommand_from update' -s h -l help -d 'Print help'
complete -c gleam -s h -l help -d 'Print help'
complete -c gleam -n __fish_no_arguments -s V -l version -d 'Print version'

complete -c gleam --no-files -n __fish_is_first_arg
