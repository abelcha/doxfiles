#string replace -a -- {} arangosh  arangosh --help-all|rrg -v Section
complete -c arangosh -l check-configuration -d '<boolean>                            Check the configuration and'
complete -c arangosh -l config -d '<string>                                          The configuration file or'
complete -c arangosh -l configuration -d '<string>                                   The configuration file or'
complete -c arangosh -l default-language -d '<string>                                An ISO-639 language code.'
complete -c arangosh -l default-language-check -d '<boolean>                         Check if `--icu-language` /'
complete -c arangosh -l define -d '<string...>                                       Define a value for a `@key@`'
complete -c arangosh -l dump-dependencies -d '<boolean>                              Dump the dependency graph of'
complete -c arangosh -l dump-options -d '<boolean>                                   Dump all available startup'
complete -c arangosh -l icu-language -d '<string>                                    An ICU locale ID to set a'
complete -c arangosh -l jslint -d '<string...>                                       Do not start as a shell, run'
complete -c arangosh -l log -d '<string...>                                          Set the topic-specific log'
complete -c arangosh -l quiet -d '<boolean>                                          Silent startup. (default:'
complete -c arangosh -n __fish_no_arguments -l version -d '<boolean>                                        Print the version and other'
complete -c arangosh -l version-json -d '<boolean>                                   Print the version and other'
complete -c arangosh -l console.audit-file -d '<string>                              The audit log file to save'
complete -c arangosh -l console.auto-complete -d '<boolean>                          Enable auto-completion.'
complete -c arangosh -l console.colors -d '<boolean>                                 Enable color support.'
complete -c arangosh -l console.history -d '<boolean>                                Whether to load and persist'
complete -c arangosh -l console.pager -d '<boolean>                                  Enable paging. (default:'
complete -c arangosh -l console.pager-command -d '<string>                           The pager command. (default:'
complete -c arangosh -l console.pretty-print -d '<boolean>                           Enable pretty-printing.'
complete -c arangosh -l console.prompt -d '<string>                                  The prompt used in REPL'
complete -f -c arangosh -n __fish_use_subcommand -a name -d 'of the current database,'
complete -c arangosh -l javascript.allow-external-process-control -d '<boolean>      Allow the execution and'
complete -c arangosh -l javascript.allow-port-testing -d '<boolean>                  Allow the testing of ports'
complete -c arangosh -l javascript.check-syntax -d '<string...>                      Check the syntax of the'
complete -c arangosh -l javascript.client-module -d '<string>                        The client module to use at'
complete -c arangosh -l javascript.copy-directory -d '<string>                       The target directory to copy'
complete -c arangosh -l javascript.copy-installation -d '<boolean>                   Copy the contents of'
complete -c arangosh -l javascript.current-module-directory -d '<boolean>            Add the current directory to'
complete -c arangosh -l javascript.endpoints-allowlist -d '<string...>               Endpoints that can be'
complete -c arangosh -l javascript.endpoints-denylist -d '<string...>                Endpoints that cannot be'
complete -c arangosh -l javascript.environment-variables-allowlist -d '<string...>   Environment variables that'
complete -c arangosh -l javascript.environment-variables-denylist -d '<string...>    Environment variables that'
complete -c arangosh -l javascript.execute -d '<string...>                           Execute the JavaScript code'
complete -c arangosh -l javascript.execute-string -d '<string...>                    Execute the JavaScript code'
complete -c arangosh -l javascript.files-allowlist -d '<string...>                   Filesystem paths that are'
complete -c arangosh -l javascript.gc-interval -d '<uint64>                          Request-based garbage'
complete -c arangosh -l javascript.harden -d '<boolean>                              Disable access to JavaScript'
complete -c arangosh -l javascript.module-directory -d '<string...>                  Additional paths containing'
complete -c arangosh -l javascript.startup-directory -d '<string>                    The startup paths containing'
complete -c arangosh -l javascript.startup-options-allowlist -d '<string...>         Startup options whose names'
complete -c arangosh -l javascript.startup-options-denylist -d '<string...>          Startup options whose names'
complete -c arangosh -l javascript.unit-test-filter -d '<string>                     Filter the test cases in the'
complete -c arangosh -l javascript.unit-tests -d '<string...>                        Do not start as a shell, run'
complete -c arangosh -l javascript.v8-max-heap -d '<uint64>                          The maximal heap size (in'
complete -c arangosh -l javascript.v8-options -d '<string...>                        Options to pass to V8.'
complete -c arangosh -l log.color -d '<boolean>                                      Use colors for TTY logging.'
complete -c arangosh -l log.escape-control-chars -d '<boolean>                       Escape control characters in'
complete -c arangosh -l log.escape-unicode-chars -d '<boolean>                       Escape Unicode characters in'
complete -c arangosh -l log.file -d \<string\>\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ shortcut\ for\ \'--log.output
complete -c arangosh -l log.file-group -d '<string>                                  group to use for new log'
complete -c arangosh -l log.file-mode -d '<string>                                   mode to use for new log file,'
complete -c arangosh -l log.force-direct -d '<boolean>                               Do not start a separate'
complete -c arangosh -l log.foreground-tty -d '<boolean>                             Also log to TTY if'
complete -c arangosh -l log.hostname -d '<string>                                    The hostname to use in log'
complete -c arangosh -l log.ids -d '<boolean>                                        Log unique message IDs.'
complete -c arangosh -l log.level -d '<string...>                                    Set the topic-specific log'
complete -c arangosh -l log.line-number -d '<boolean>                                Include the function name,'
complete -c arangosh -l log.max-entry-length -d '<uint32>                            The maximum length of a log'
complete -c arangosh -l log.output -d '<string...>                                   Log destination(s), e.g.'
complete -c arangosh -l log.performance -d '<boolean>                                Shortcut for `--log.level'
complete -c arangosh -l log.prefix -d '<string>                                      Prefix log message with this'
complete -c arangosh -l log.process -d '<boolean>                                    Show the process identifier'
complete -c arangosh -l log.request-parameters -d '<boolean>                         include full URLs and HTTP'
complete -c arangosh -l log.role -d '<boolean>                                       Log the server role.'
complete -c arangosh -l log.shorten-filenames -d '<boolean>                          shorten filenames in log'
complete -c arangosh -l log.structured-param -d '<string...>                         Toggle the usage of the log'
complete -c arangosh -l log.thread -d '<boolean>                                     Show the thread identifier'
complete -c arangosh -l log.thread-name -d '<boolean>                                Show thread name in log'
complete -c arangosh -l log.time-format -d '<string>                                 The time format to use in'
complete -c arangosh -l log.use-json-format -d '<boolean>                            Use JSON as output format'
complete -c arangosh -l log.use-local-time -d '<boolean>                             Use the local timezone'
complete -c arangosh -l log.use-microtime -d '<boolean>                              Use Unix timestamps in'
complete -c arangosh -l random.generator -d '<uint32>                                The random number generator'
complete -c arangosh -l server.ask-jwt-secret -d '<boolean>                          If enabled, you are prompted'
complete -c arangosh -l server.password. -d If
complete -c arangosh -l server.authentication -d '<boolean>                          Require authentication'
complete -c arangosh -l server.connection-timeout -d '<double>                       The connection timeout (in'
complete -c arangosh -l server.database -d '<string>                                 The database name to use'
complete -c arangosh -l server.endpoint -d '<string...>                              The endpoint to connect to.'
complete -c arangosh -l server.force-json -d '<boolean>                              Force to not use VelocyPack'
complete -c arangosh -l server.jwt-secret-keyfile -d '<string>                       If enabled, the JWT secret'
complete -c arangosh -l server.max-packet-size -d '<uint64>                          The maximum packet size (in'
complete -c arangosh -l server.password -d '<string>                                 The password to use when'
complete -c arangosh -l server.request-timeout -d '<double>                          The request timeout (in'
complete -c arangosh -l server.username -d '<string>                                 The username to use when'
complete -c arangosh -l ssl.protocol -d '<uint64>                                    The SSL protocol (1 = SSLv2'
complete -c arangosh -l temp.path -d '<string>                                       The path for temporary files.'
