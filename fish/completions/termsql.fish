complete -c termsql -s h -l help -d 'show this help message and exit'
complete -c termsql -s 1 -l head -d 'use first line/head(er) for column names'
complete -c termsql -s 0 -l show-header -d 'show column names as header in output (not shown by'
complete -c termsql -s d -d '[DELIMITER], --delimiter [DELIMITER]'
complete -c termsql -s g -d '[REGEX_DELIMITER], --regex-delimiter [REGEX_DELIMITER]'
complete -c termsql -s u -d '[QUOTECHAR], --quotechar [QUOTECHAR]'
complete -c termsql -l csv -d 'Use csv parser to split cells. Delimiter defaults to'
complete -c termsql -s p -d '[SEPARATOR], --separator [SEPARATOR]'
complete -c termsql -s l -d '[LINE_AS_COLUMN], --line-as-column [LINE_AS_COLUMN]'
complete -c termsql -s R -l raw -d 'create extra column raw with untreated input data'
complete -c termsql -s k -d '[KEY_COLUMNS], --key-columns [KEY_COLUMNS]'
complete -c termsql -s k -d 'COL0 or -c one,two,three -k one,two)'
complete -c termsql -s c -d '[COLUMNS], --columns [COLUMNS]'
complete -c termsql -l calc -d '[CALC]         use sqlite as simple calculator, you can do multiple'
complete -c termsql -s w -l whitespace -d 'use whitespace as field separator (default is |).'
complete -c termsql -s H -d '[OFFSET_HEAD], --offset-head [OFFSET_HEAD]'
complete -c termsql -s T -d '[OFFSET_TAIL], --offset-tail [OFFSET_TAIL]'
complete -c termsql -s M -d '[MAX_ROWS], --max-rows [MAX_ROWS]'
complete -c termsql -s D -l dump -d 'dump complete SQL to create table and content'
complete -c termsql -s Q -l sql -d 'outputs the full query, like it would be fed to SQlite'
complete -c termsql -s m -d '[MODE], --mode [MODE]'
complete -c termsql -s r -d '[MERGE], --merge [MERGE]'
complete -c termsql -s x -l select-all -d 'add final SELECT * FROM to user defined query'
complete -c termsql -s a -l append -d don\'t\ DROP\ TABLE\ and\ instead\ just\ append\ data\ to
complete -c termsql -s i -d '[INFILE], --infile [INFILE]'
complete -c termsql -s o -d '[OUTFILE], --outfile [OUTFILE]'
complete -c termsql -s P -d '[PIPE], --pipe [PIPE]'
complete -c termsql -s f -d '[FILE], --file [FILE]'
complete -c termsql -s e -l edit -d 'writes to the input file instead of stdout. For this'
complete -c termsql -s q -d '[QUERYFILE], --queryfile [QUERYFILE]'
complete -f -c termsql -n __fish_use_subcommand -a -t -d '[TABLE], --table [TABLE]'
complete -f -c termsql -n __fish_use_subcommand -a tablename -d '(must be a valid sqlite tablename)'
complete -f -c termsql -n __fish_use_subcommand -a -s -d '[SQLITE], --sqlite [SQLITE]'
complete -f -c termsql -n __fish_use_subcommand -a path -d 'to sqlite executable'
complete -f -c termsql -n __fish_use_subcommand -a --select -d same\ as\ \'select\ ...\'\ SQL\ statement
complete -f -c termsql -n __fish_use_subcommand -a --where -d shortcut\ for\ \'select\ \*\ from\ tbl\ where\ ...\'\ SQL
complete -c termsql -l limit -d shortcut\ for\ \'select\ \*\ from\ tbl\ limit\ ...\'\ SQL
complete -c termsql -l groupby -d shortcut\ for\ \'select\ \*\ from\ tbl\ group\ by\ ...\'\ SQL
complete -c termsql -l orderby -d shortcut\ for\ \'select\ \*\ from\ tbl\ order\ by\ ...\'\ SQL
complete -c termsql -n __fish_no_arguments -s v -l version -d 'display version information'
