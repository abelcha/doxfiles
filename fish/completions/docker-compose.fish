complete -c docker-compose -l all-resources -d 'Include all resources, even those not used by services'
complete -c docker-compose -l ansi -d 'string                Control when to print ANSI control characters ("never"|"always"|"auto") (default "auto")'
complete -c docker-compose -l compatibility -d 'Run compose in backward compatibility mode'
complete -c docker-compose -l dry-run -d 'Execute command in dry run mode'
complete -c docker-compose -l env-file -d 'stringArray       Specify an alternate environment file'
complete -c docker-compose -s f -l file -d 'stringArray           Compose configuration files'
complete -c docker-compose -l parallel -d 'int               Control max parallelism, -1 for unlimited (default -1)'
complete -c docker-compose -l profile -d 'stringArray        Specify a profile to enable'
complete -c docker-compose -l progress -d 'string            Set type of progress output (auto, tty, plain, json, quiet) (default "auto")'
complete -c docker-compose -l project-directory -d 'string   Specify an alternate working directory'
complete -c docker-compose -s p -l project-name -d 'string        Project name'
complete -f -c docker-compose -n __fish_use_subcommand -a attach -d "Attach local standard input, output, and error streams to a service's running container"
complete -f -c docker-compose -n __fish_use_subcommand -a build -d 'Build or rebuild services'
complete -f -c docker-compose -n __fish_use_subcommand -a commit -d "Create a new image from a service container's changes"
complete -f -c docker-compose -n __fish_use_subcommand -a config -d 'Parse, resolve and render compose file in canonical format'
complete -f -c docker-compose -n __fish_use_subcommand -a cp -d 'Copy files/folders between a service container and the local filesystem'
complete -f -c docker-compose -n __fish_use_subcommand -a create -d 'Creates containers for a service'
complete -f -c docker-compose -n __fish_use_subcommand -a down -d 'Stop and remove containers, networks'
complete -f -c docker-compose -n __fish_use_subcommand -a events -d 'Receive real time events from containers'
complete -f -c docker-compose -n __fish_use_subcommand -a export -d "Export a service container's filesystem as a tar archive"
complete -f -c docker-compose -n __fish_use_subcommand -a images -d 'List images used by the created containers'
complete -f -c docker-compose -n __fish_use_subcommand -a kill -d 'Force stop service containers'
complete -f -c docker-compose -n __fish_use_subcommand -a logs -d 'View output from containers'
complete -f -c docker-compose -n __fish_use_subcommand -a ls -d 'List running compose projects'
complete -f -c docker-compose -n __fish_use_subcommand -a pause -d 'Pause services'
complete -f -c docker-compose -n __fish_use_subcommand -a port -d 'Print the public port for a port binding'
complete -f -c docker-compose -n __fish_use_subcommand -a ps -d 'List containers'
complete -f -c docker-compose -n __fish_use_subcommand -a publish -d 'Publish compose application'
complete -f -c docker-compose -n __fish_use_subcommand -a pull -d 'Pull service images'
complete -f -c docker-compose -n __fish_use_subcommand -a push -d 'Push service images'
complete -f -c docker-compose -n __fish_use_subcommand -a restart -d 'Restart service containers'
complete -f -c docker-compose -n __fish_use_subcommand -a rm -d 'Removes stopped service containers'
complete -f -c docker-compose -n __fish_use_subcommand -a run -d 'Run a one-off command on a service'
complete -f -c docker-compose -n __fish_use_subcommand -a scale -d 'Scale services'
complete -f -c docker-compose -n __fish_use_subcommand -a start -d 'Start services'
complete -f -c docker-compose -n __fish_use_subcommand -a stats -d 'Display a live stream of container(s) resource usage statistics'
complete -f -c docker-compose -n __fish_use_subcommand -a stop -d 'Stop services'
complete -f -c docker-compose -n __fish_use_subcommand -a top -d 'Display the running processes'
complete -f -c docker-compose -n __fish_use_subcommand -a unpause -d 'Unpause services'
complete -f -c docker-compose -n __fish_use_subcommand -a up -d 'Create and start containers'
complete -f -c docker-compose -n __fish_use_subcommand -a version -d 'Show the Docker Compose version information'
complete -f -c docker-compose -n __fish_use_subcommand -a wait -d 'Block until containers of all (or specified) services stop.'
complete -f -c docker-compose -n __fish_use_subcommand -a watch -d 'Watch build context for service and rebuild/refresh containers when files are updated'
