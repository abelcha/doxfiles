complete -c oq -s h -l help -d 'Show this help message.'
complete -c oq -n __fish_no_arguments -s V -l version -d 'Returns the current versions of oq and jq.'
complete -c oq -s i -d 'FORMAT, --input FORMAT        Format of the input data. Supported formats: json, simpleyaml, xml, yaml'
complete -c oq -s o -d 'FORMAT, --output FORMAT       Format of the output data. Supported formats: json, simpleyaml, xml, yaml'
complete -c oq -l indent -d 'NUMBER                  Use the given number of spaces for indentation (JSON/XML only).'
complete -c oq -l tab -d 'Use a tab for each indentation level instead of two spaces.'
complete -c oq -s n -l null-input -d Don\'t\ read\ any\ input\ at\ all,\ running\ the\ filter\ once\ using\ `null`\ as\ the\ input.
complete -c oq -l no-prolog -d 'Whether the XML prolog should be emitted if converting to XML.'
complete -c oq -l xml-item -d 'NAME                  The name for XML array elements without keys.'
complete -c oq -l xmlns -d 'If XML namespaces should be parsed.  NOTE: This will become the default in oq 2.x.'
complete -c oq -l xml-force-array -d 'NAME           Forces an element with the provided name to be parsed as an array even if it only contains one item.'
complete -c oq -l xml-namespace-alias -d 'ALIAS      Value should be in the form of: `key=namespace`. Elements within the provided namespace are normalized to the provided key.  NOTE: Requires the `--xmlns` option to be passed as well.'
complete -c oq -l xml-root -d 'ROOT                  Name of the root XML element if converting to XML.'
complete -f -c oq -n __fish_use_subcommand -a -n -d '--null-input          use `null` as the single input value;'
complete -f -c oq -n __fish_use_subcommand -a -R -d '--raw-input           read each line as string instead of JSON;'
complete -f -c oq -n __fish_use_subcommand -a -s -d '--slurp               read all inputs into an array and use it as'
complete -f -c oq -n __fish_use_subcommand -a the -d 'single input value;'
complete -f -c oq -n __fish_use_subcommand -a -c -d '--compact-output      compact instead of pretty-printed output;'
complete -f -c oq -n __fish_use_subcommand -a -r -d '--raw-output          output strings without escapes and quotes;'
complete -f -c oq -n __fish_use_subcommand -a --raw-output0 -d 'implies -r and output NUL after each output;'
complete -f -c oq -n __fish_use_subcommand -a -j -d '--join-output         implies -r and output without newline after'
complete -f -c oq -n __fish_use_subcommand -a each -d 'output;'
complete -f -c oq -n __fish_use_subcommand -a -a -d '--ascii-output        output strings by only ASCII characters'
complete -f -c oq -n __fish_use_subcommand -a using -d 'escape sequences;'
complete -f -c oq -n __fish_use_subcommand -a -S -d '--sort-keys           sort keys of each object on output;'
complete -f -c oq -n __fish_use_subcommand -a -C -d '--color-output        colorize JSON output;'
complete -f -c oq -n __fish_use_subcommand -a -M -d '--monochrome-output   disable colored output;'
complete -f -c oq -n __fish_use_subcommand -a --tab -d 'use tabs for indentation;'
complete -f -c oq -n __fish_use_subcommand -a --indent -d 'n            use n spaces for indentation (max 7 spaces);'
complete -f -c oq -n __fish_use_subcommand -a --unbuffered -d 'flush output stream after each output;'
complete -f -c oq -n __fish_use_subcommand -a --stream -d 'parse the input value in streaming fashion;'
complete -f -c oq -n __fish_use_subcommand -a --stream-errors -d 'implies --stream and report parse error as'
complete -f -c oq -n __fish_use_subcommand -a an -d 'array;'
complete -f -c oq -n __fish_use_subcommand -a --seq -d 'parse input/output as application/json-seq;'
complete -f -c oq -n __fish_use_subcommand -a -f -d '--from-file file      load filter from the file;'
complete -f -c oq -n __fish_use_subcommand -a -L -d 'directory              search modules from the directory;'
complete -f -c oq -n __fish_use_subcommand -a --arg -d 'name value      set $name to the string value;'
complete -f -c oq -n __fish_use_subcommand -a --argjson -d 'name value  set $name to the JSON value;'
complete -f -c oq -n __fish_use_subcommand -a --slurpfile -d 'name file set $name to an array of JSON values read'
complete -f -c oq -n __fish_use_subcommand -a from -d 'the file;'
complete -f -c oq -n __fish_use_subcommand -a --rawfile -d 'name file   set $name to string contents of file;'
complete -f -c oq -n __fish_use_subcommand -a --args -d 'consume remaining arguments as positional'
complete -f -c oq -n __fish_use_subcommand -a string -d 'values;'
complete -f -c oq -n __fish_use_subcommand -a --jsonargs -d 'consume remaining arguments as positional'
complete -f -c oq -n __fish_use_subcommand -a JSON -d 'values;'
complete -f -c oq -n __fish_use_subcommand -a -e -d '--exit-status         set exit status code based on the output;'
complete -f -c oq -n __fish_use_subcommand -a -V -d '--version             show the version;'
complete -f -c oq -n __fish_use_subcommand -a --build-configuration -d show\ jq\'s\ build\ configuration\;
complete -f -c oq -n __fish_use_subcommand -a -h -d '--help                show the help;'
complete -f -c oq -n __fish_use_subcommand -a -- -d 'terminates argument processing;'
