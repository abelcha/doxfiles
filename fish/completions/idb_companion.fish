complete -c idb_companion -l udid -d "UDID|mac|only       Launches a companion server for the specified UDID, 'mac' for a mac companion, or 'only' to run a companion for the only simulator/device available."
complete -c idb_companion -l boot -d 'UDID                Boots the simulator with the specified UDID.'
complete -c idb_companion -l reboot -d 'UDID              Reboots the target with the specified UDID.'
complete -c idb_companion -l shutdown -d 'UDID            Shuts down the target with the specified UDID.'
complete -c idb_companion -l erase -d 'UDID               Erases the target with the specified UDID.'
complete -c idb_companion -l clean -d 'UDID               Performs a soft reset to the specified UDID.'
complete -c idb_companion -l delete -d "UDID|all          Deletes the simulator with the specified UDID, or 'all' to delete all simulators in the set."
complete -c idb_companion -l create -d 'VALUE             Creates a simulator using the VALUE argument like "iPhone X,iOS 12.4"'
complete -c idb_companion -l clone -d 'UDID               Clones a simulator by a given UDID'
complete -c idb_companion -l clone-destination-set -d 'A path to the destination device set in a clone operation, --device-set-path specifies the source simulator.'
complete -c idb_companion -l recover -d 'ecid:ECID        Causes the targeted device ECID to enter recovery mode'
complete -c idb_companion -l unrecover -d 'ecid:ECID      Causes the targeted device ECID to exit recovery mode'
complete -c idb_companion -l activate -d 'ecid:ECID       Causes the device to activate'
complete -c idb_companion -l notify -d 'PATH|stdout       Launches a companion notifier which will stream availability updates to the specified path, or stdout.'
complete -c idb_companion -l forward -d 'UDID:PORT        Forwards the remote socket for the specified UDID to the specified remote PORT. Input and output is relayed via stdin/stdout'
complete -c idb_companion -l list -d '1                   Lists all available devices and simulators in the current context. If Xcode is not correctly installed, only devices will be listed.'
complete -c idb_companion -n __fish_no_arguments -l version -d 'Writes companion version information to stdout.'
complete -c idb_companion -l help -d 'Show this help message and exit.'
complete -c idb_companion -l grpc-port -d 'PORT           Port to start the grpc companion server on (default: 10882).'
complete -c idb_companion -l tls-cert-path -d 'PATH       If specified exposed GRPC server will be listening on a TLS enabled socket.'
complete -c idb_companion -l grpc-domain-sock -d 'PATH    Unix Domain Socket path to start the companion server on, will superceed TCP binding via --grpc-port.'
complete -c idb_companion -l debug-port -d 'PORT          Port to connect debugger on (default: 10881).'
complete -c idb_companion -l log-file-path -d 'PATH       Path to write a log file to e.g ./output.log (default: logs to stdErr).'
complete -c idb_companion -l log-level -d "info|debug     The log level to use, 'debug' for a higher level of debugging 'info' for a lower level of logging (default 'debug')."
complete -c idb_companion -l device-set-path -d 'PATH     Path to a custom Simulator device set.'
complete -c idb_companion -l only -d 'FILTER_OPTION       If provided, will limit interaction to a subset of all available targets'
complete -c idb_companion -l headless -d "VALUE           If VALUE is a true value, the Simulator boot's lifecycle will be tied to the lifecycle of this invocation."
complete -c idb_companion -l verify-booted -d 'VALUE      If VALUE is a true value, will verify that the Simulator is in a known-booted state before --boot completes. Default is true.'
complete -c idb_companion -l terminate-offline -d 'VALUE  Terminate if the target goes offline, otherwise the companion will stay alive.'
