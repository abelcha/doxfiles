complete -c tsup -s d -l out-dir -d '<dir>          Output directory (default: dist)'
complete -c tsup -l format -d '<format>            Bundle format, "cjs", "iife", "esm" (default: cjs)'
complete -c tsup -l minify -d '[terser]            Minify bundle'
complete -c tsup -l minify-whitespace -d 'Minify whitespace'
complete -c tsup -l minify-identifiers -d 'Minify identifiers'
complete -c tsup -l minify-syntax -d 'Minify syntax'
complete -c tsup -l keep-names -d 'Keep original function and class names in minified code'
complete -c tsup -l target -d '<target>            Bundle target, "es20XX" or "esnext" (default: es2017)'
complete -c tsup -l legacy-output -d 'Output different formats to different folder instead of using different extensions'
complete -c tsup -l dts -d '[entry]                Generate declaration file'
complete -c tsup -l dts-resolve -d 'Resolve externals types used for d.ts files'
complete -c tsup -l dts-only -d 'Emit declaration files only'
complete -c tsup -l experimental-dts -d '[entry]   Generate declaration file (experimental)'
complete -c tsup -l sourcemap -d '[inline]         Generate external sourcemap, or inline source: --sourcemap inline'
complete -c tsup -l watch -d '[path]               Watch mode, if path is not specified, it watches the current folder ".". Repeat "--watch" for more than one path'
complete -c tsup -l ignore-watch -d '<path>        Ignore custom paths in watch mode'
complete -c tsup -l onSuccess -d '<command>        Execute command after successful build, specially useful for watch mode'
complete -c tsup -l inject -d '<file>              Replace a global variable with an import from another file'
complete -c tsup -l external -d '<name>            Mark specific packages / package.json (dependencies and peerDependencies) as external'
complete -c tsup -l global-name -d '<name>         Global variable name for iife format'
complete -c tsup -l jsxFactory -d '<jsxFactory>    Name of JSX factory function (default: React.createElement)'
complete -c tsup -l jsxFragment -d '<jsxFragment>  Name of JSX fragment function (default: React.Fragment)'
complete -c tsup -l replaceNodeEnv -d 'Replace process.env.NODE_ENV'
complete -c tsup -l no-splitting -d 'Disable code splitting (default: true)'
complete -c tsup -l clean -d 'Clean output directory'
complete -c tsup -l silent -d 'Suppress non-error logs (excluding "onSuccess" process output)'
complete -c tsup -l pure -d '<express>             Mark specific expressions as pure'
complete -c tsup -l metafile -d 'Emit esbuild metafile (a JSON file)'
complete -c tsup -l platform -d '<platform>        Target platform (default: node)'
complete -c tsup -l loader -d '<ext=loader>        Specify the loader for a file extension'
complete -c tsup -l tsconfig -d '<filename>        Use a custom tsconfig'
complete -c tsup -l config -d '<filename>          Use a custom config file'
complete -c tsup -l no-config -d 'Disable config file (default: true)'
complete -c tsup -l shims -d 'Enable cjs and esm shims'
complete -c tsup -l inject-style -d 'Inject style tag to document head'
complete -c tsup -l treeshake -d '[strategy]       Using Rollup for treeshaking instead, "recommended" or "smallest" or "safest"'
complete -c tsup -l publicDir -d '[dir]            Copy public directory to output directory'
complete -c tsup -l killSignal -d '<signal>        Signal to kill child process, "SIGTERM" or "SIGKILL"'
complete -c tsup -l cjsInterop -d 'Enable cjs interop'
complete -c tsup -s h -l help -d 'Display this message'
complete -c tsup -n __fish_no_arguments -s v -l version -d 'Display version number'
