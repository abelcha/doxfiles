complete -c "playwright" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -s "h" -l "help" -d "display help for command"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "open" -d "open page in browser specified via -b, --browser"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "codegen" -d "open page and generate code for user actions"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "install" -d "ensure browsers necessary for this version of Playwright are installed"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "uninstall" -d "Removes browsers used by this installation of Playwright from the system (chromium, firefox, webkit, ffmpeg). This does not include branded channels."
complete -f -c "playwright" -n "__fish_use_subcommand" -a "install-deps" -d "install dependencies necessary to run browsers (will ask for sudo permissions)"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "cr" -d "open page in Chromium"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "ff" -d "open page in Firefox"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "wk" -d "open page in WebKit"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "screenshot" -d "capture a page screenshot"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "pdf" -d "save page as pdf"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "run-server"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "show-trace" -d "show trace viewer"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "test" -d "run tests with Playwright Test"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "show-report" -d "show HTML report"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "merge-reports" -d "merge multiple blob reports (for sharded tests) into a single report"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "clear-cache" -d "clears build and test caches"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from install" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from install" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from uninstall" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from uninstall" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from install-deps" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from install-deps" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from run-server" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from run-server" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from show-trace" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from show-trace" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from show-report" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from show-report" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from merge-reports" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from merge-reports" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from clear-cache" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from clear-cache" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from help" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from help" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -s "b" -l "browser" -d "browser to use" -xa "cr chromium ff firefox wk webkit"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "block-service-workers" -d "block service workers"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "channel" -d "Chromium distribution channel, \"chrome\", \"chrome-beta\", \"msedge-dev\", etc"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "color-scheme" -d "emulate preferred color scheme" -xa "light dark"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "device" -d "emulate device, for example  \"iPhone 11\""
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "geolocation" -d "specify geolocation coordinates, for example \"37.819722,-122.478611\""
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "ignore-https-errors" -d "ignore https errors"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "load-storage" -d "load context storage state from the file, previously saved with --save-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "lang" -d "specify language / locale, for example \"en-GB\""
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "proxy-server" -d "specify proxy server, for example \"http://myproxy:3128\" or \"socks5://myproxy:8080\""
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "proxy-bypass" -d "comma-separated domains to bypass proxy, for example \".com,chromium.org,.domain.com\""
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "save-har" -d "save HAR file with all network activity at the end"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "save-har-glob" -d "filter entries in the HAR by matching url against this glob pattern"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "save-storage" -d "save context storage state at the end, for later use with --load-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "timezone" -d "time zone to emulate, for example \"Europe/Rome\""
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "timeout" -d "timeout for Playwright actions in milliseconds, no timeout by default"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "user-agent" -d "specify user agent string"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -l "viewport-size" -d "specify browser viewport size in pixels, for example \"1280, 720\""
complete -c "playwright" -n "__fish_seen_subcommand_from open" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -s "o" -l "output" -d "saves the generated script to a file"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "target" -d "language to generate" -xa "javascript playwright-test python python-async python-pytest csharp csharp-mstest csharp-nunit java java-junit"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "test-id-attribute" -d "use the specified attribute to generate data test ID selectors"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -s "b" -l "browser" -d "browser to use" -xa "cr chromium ff firefox wk webkit"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "block-service-workers" -d "block service workers"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "channel" -d "Chromium distribution channel, \"chrome\", \"chrome-beta\", \"msedge-dev\", etc"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "color-scheme" -d "emulate preferred color scheme, \"light\" or \"dark\"" -xa "light dark"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "device" -d "emulate device, for example  \"iPhone 11\""
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "geolocation" -d "specify geolocation coordinates, for example \"37.819722,-122.478611\""
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "ignore-https-errors" -d "ignore https errors"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "load-storage" -d "load context storage state from the file, previously saved with --save-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "lang" -d "specify language / locale, for example \"en-GB\""
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "proxy-server" -d "specify proxy server, for example \"http://myproxy:3128\" or \"socks5://myproxy:8080\""
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "proxy-bypass" -d "comma-separated domains to bypass proxy, for example \".com,chromium.org,.domain.com\""
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "save-har" -d "save HAR file with all network activity at the end"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "save-har-glob" -d "filter entries in the HAR by matching url against this glob pattern"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "save-storage" -d "save context storage state at the end, for later use with --load-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "timezone" -d "time zone to emulate, for example \"Europe/Rome\""
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "timeout" -d "timeout for Playwright actions in milliseconds, no timeout by default"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "user-agent" -d "specify user agent string"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -l "viewport-size" -d "specify browser viewport size in pixels, for example \"1280, 720\""
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from install" -l "with-deps" -d "install system dependencies for browsers"
complete -c "playwright" -n "__fish_seen_subcommand_from install" -l "dry-run" -d "do not execute installation, only print information"
complete -c "playwright" -n "__fish_seen_subcommand_from install" -l "force" -d "force reinstall of stable browser channels"
complete -c "playwright" -n "__fish_seen_subcommand_from install" -l "only-shell" -d "only install headless shell when installing chromium"
complete -c "playwright" -n "__fish_seen_subcommand_from install" -l "no-shell" -d "do not install chromium headless shell"
complete -c "playwright" -n "__fish_seen_subcommand_from install" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from uninstall" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from uninstall" -l "all" -d "Removes all browsers used by any Playwright installation from the system."
complete -c "playwright" -n "__fish_seen_subcommand_from install-deps" -l "dry-run" -d "Do not execute installation commands, only print them"
complete -c "playwright" -n "__fish_seen_subcommand_from install-deps" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -s "b" -l "browser" -d "browser to use" -xa "cr chromium ff firefox wk webkit"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "block-service-workers" -d "block service workers"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "channel" -d "Chromium distribution channel"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "color-scheme" -d "emulate preferred color scheme" -xa "light dark"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "device" -d "emulate device, for example  \"iPhone 11\""
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "geolocation" -d "specify geolocation coordinates, for example \"37.819722,-122.478611\""
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "ignore-https-errors" -d "ignore https errors"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "load-storage" -d "load context storage state from the file, previously saved with --save-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "lang" -d "specify language / locale, for example \"en-GB\""
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "proxy-server" -d "specify proxy server, for example \"http://myproxy:3128\" or \"socks5://myproxy:8080\""
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "proxy-bypass" -d "comma-separated domains to bypass proxy, for example \".com,chromium.org,.domain.com\""
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "save-har" -d "save HAR file with all network activity at the end"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "save-har-glob" -d "filter entries in the HAR by matching url against this glob pattern"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "save-storage" -d "save context storage state at the end, for later use with --load-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "timezone" -d "time zone to emulate, for example \"Europe/Rome\""
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "timeout" -d "timeout for Playwright actions in milliseconds, no timeout by default"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "user-agent" -d "specify user agent string"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -l "viewport-size" -d "specify browser viewport size in pixels, for example \"1280, 720\""
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -s "b" -l "browser" -d "browser to use" -xa "cr chromium ff firefox wk webkit"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "block-service-workers" -d "block service workers"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "channel" -d "Chromium distribution channel, \"chrome\", \"chrome-beta\", \"msedge-dev\", etc"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "color-scheme" -d "emulate preferred color scheme" -xa "light dark"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "device" -d "emulate device, for example  \"iPhone 11\""
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "geolocation" -d "specify geolocation coordinates, for example \"37.819722,-122.478611\""
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "ignore-https-errors" -d "ignore https errors"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "load-storage" -d "load context storage state from the file, previously saved with --save-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "lang" -d "specify language / locale, for example \"en-GB\""
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "proxy-server" -d "specify proxy server, for example \"http://myproxy:3128\" or \"socks5://myproxy:8080\""
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "proxy-bypass" -d "comma-separated domains to bypass proxy, for example \".com,chromium.org,.domain.com\""
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "save-har" -d "save HAR file with all network activity at the end"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "save-har-glob" -d "filter entries in the HAR by matching url against this glob pattern"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "save-storage" -d "save context storage state at the end, for later use with --load-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "timezone" -d "time zone to emulate, for example \"Europe/Rome\""
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "timeout" -d "timeout for Playwright actions in milliseconds, no timeout by default"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "user-agent" -d "specify user agent string"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -l "viewport-size" -d "specify browser viewport size in pixels, for example \"1280, 720\""
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -s "b" -l "browser" -d "browser to use" -xa "cr chromium ff firefox wk webkit"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "block-service-workers" -d "block service workers"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "channel" -d "Chromium distribution channel" -xa "chrome chrome-beta msedge-dev"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "color-scheme" -d "emulate preferred color scheme" -xa "light dark"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "device" -d "emulate device"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "geolocation" -d "specify geolocation coordinates"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "ignore-https-errors" -d "ignore https errors"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "load-storage" -d "load context storage state from the file, previously saved with --save-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "lang" -d "specify language / locale"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "proxy-server" -d "specify proxy server"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "proxy-bypass" -d "comma-separated domains to bypass proxy"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "save-har" -d "save HAR file with all network activity at the end"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "save-har-glob" -d "filter entries in the HAR by matching url against this glob pattern"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "save-storage" -d "save context storage state at the end, for later use with --load-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "timezone" -d "time zone to emulate"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "timeout" -d "timeout for Playwright actions in milliseconds, no timeout by default"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "user-agent" -d "specify user agent string"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -l "viewport-size" -d "specify browser viewport size in pixels"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -s "b" -l "browser" -d "browser to use" -xa "cr chromium ff firefox wk webkit"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "wait-for-selector" -d "wait for selector before taking a screenshot"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "wait-for-timeout" -d "wait for timeout in milliseconds before taking a screenshot"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "full-page" -d "whether to take a full page screenshot (entire scrollable area)"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "block-service-workers" -d "block service workers"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "channel" -d "Chromium distribution channel, \"chrome\", \"chrome-beta\", \"msedge-dev\", etc"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "color-scheme" -d "emulate preferred color scheme, \"light\" or \"dark\"" -xa "light dark"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "device" -d "emulate device, for example  \"iPhone 11\""
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "geolocation" -d "specify geolocation coordinates, for example \"37.819722,-122.478611\""
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "ignore-https-errors" -d "ignore https errors"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "load-storage" -d "load context storage state from the file, previously saved with --save-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "lang" -d "specify language / locale, for example \"en-GB\""
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "proxy-server" -d "specify proxy server, for example \"http://myproxy:3128\" or \"socks5://myproxy:8080\""
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "proxy-bypass" -d "comma-separated domains to bypass proxy, for example \".com,chromium.org,.domain.com\""
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "save-har" -d "save HAR file with all network activity at the end"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "save-har-glob" -d "filter entries in the HAR by matching url against this glob pattern"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "save-storage" -d "save context storage state at the end, for later use with --load-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "timezone" -d "time zone to emulate, for example \"Europe/Rome\""
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "timeout" -d "timeout for Playwright actions in milliseconds, no timeout by default"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "user-agent" -d "specify user agent string"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -l "viewport-size" -d "specify browser viewport size in pixels, for example \"1280, 720\""
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "paper-format" -d "paper format" -xa "Letter Legal Tabloid Ledger A0 A1 A2 A3 A4 A5 A6"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "wait-for-selector" -d "wait for given selector before saving as pdf"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "wait-for-timeout" -d "wait for given timeout in milliseconds before saving as pdf"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -s "b" -l "browser" -d "browser to use" -xa "cr chromium ff firefox wk webkit"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "block-service-workers" -d "block service workers"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "channel" -d "Chromium distribution channel, \"chrome\", \"chrome-beta\", \"msedge-dev\", etc"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "color-scheme" -d "emulate preferred color scheme" -xa "light dark"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "device" -d "emulate device, for example  \"iPhone 11\""
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "geolocation" -d "specify geolocation coordinates, for example \"37.819722,-122.478611\""
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "ignore-https-errors" -d "ignore https errors"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "load-storage" -d "load context storage state from the file, previously saved with --save-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "lang" -d "specify language / locale, for example \"en-GB\""
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "proxy-server" -d "specify proxy server, for example \"http://myproxy:3128\" or \"socks5://myproxy:8080\""
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "proxy-bypass" -d "comma-separated domains to bypass proxy, for example \".com,chromium.org,.domain.com\""
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "save-har" -d "save HAR file with all network activity at the end"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "save-har-glob" -d "filter entries in the HAR by matching url against this glob pattern"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "save-storage" -d "save context storage state at the end, for later use with --load-storage"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "timezone" -d "time zone to emulate, for example \"Europe/Rome\""
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "timeout" -d "timeout for Playwright actions in milliseconds, no timeout by default"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "user-agent" -d "specify user agent string"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -l "viewport-size" -d "specify browser viewport size in pixels, for example \"1280, 720\""
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from run-server" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from run-server" -l "port" -d "Server port"
complete -c "playwright" -n "__fish_seen_subcommand_from run-server" -l "host" -d "Server host"
complete -c "playwright" -n "__fish_seen_subcommand_from run-server" -l "path" -d "Endpoint Path (default: \"/\")"
complete -c "playwright" -n "__fish_seen_subcommand_from run-server" -l "max-clients" -d "Maximum clients"
complete -c "playwright" -n "__fish_seen_subcommand_from run-server" -l "mode" -d "Server mode, either \"default\" or \"extension\"" -xa "default extension"
complete -c "playwright" -n "__fish_seen_subcommand_from show-trace" -s "b" -l "browser" -d "browser to use" -xa "cr chromium ff firefox wk webkit"
complete -c "playwright" -n "__fish_seen_subcommand_from show-trace" -s "h" -l "host" -d "Host to serve trace on; specifying this option opens trace in a browser tab"
complete -c "playwright" -n "__fish_seen_subcommand_from show-trace" -s "p" -l "port" -d "Port to serve trace on, 0 for any free port; specifying this option opens trace in a browser tab"
complete -c "playwright" -n "__fish_seen_subcommand_from show-trace" -l "stdin" -d "Accept trace URLs over stdin to update the viewer"
complete -c "playwright" -n "__fish_seen_subcommand_from show-trace" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "browser" -d "Browser to use for tests" -xa "all chromium firefox webkit"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -s "c" -l "config" -d "Configuration file, or a test directory with optional \"playwright.config.{m,c}?{js,ts}\""
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "debug" -d "Run tests with Playwright Inspector. Shortcut for \"PWDEBUG=1\" environment variable and \"--timeout=0 --max-failures=1 --headed --workers=1\" options"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "fail-on-flaky-tests" -d "Fail if any test is flagged as flaky (default: false)"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "forbid-only" -d "Fail if test.only is called (default: false)"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "fully-parallel" -d "Run all tests in parallel (default: false)"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -s "g" -l "grep" -d "Only run tests matching this regular expression (default: \".*\")"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -s "gv" -l "grep-invert" -d "Only run tests that do not match this regular expression"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "global-timeout" -d "Maximum time this test suite can run in milliseconds (default: unlimited)"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "headed" -d "Run tests in headed browsers (default: headless)"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "ignore-snapshots" -d "Ignore screenshot and snapshot expectations"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -s "j" -l "workers" -d "Number of concurrent workers or percentage of logical CPU cores, use 1 to run in a single worker (default: 50%)"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "last-failed" -d "Only re-run the failures"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "list" -d "Collect all the tests and report them, but do not run"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "max-failures" -d "Stop after the first N failures"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "no-deps" -d "Do not run project dependencies"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "only-changed" -d "Only run test files that have been changed between 'HEAD' and 'ref'. Defaults to running all uncommitted changes. Only supports Git."
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "output" -d "Folder for output artifacts (default: \"test-results\")"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "pass-with-no-tests" -d "Makes test run succeed even if no tests were found"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "project" -d "Only run tests from the specified list of projects, supports '*' wildcard (default: run all projects)"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "quiet" -d "Suppress stdio"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "repeat-each" -d "Run each test N times (default: 1)"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "reporter" -d "Reporter to use, comma-separated, can be \"list\", \"line\", \"dot\", \"json\", \"junit\", \"null\", \"github\", \"html\", \"blob\" (default: \"list\")" -xa "list line dot json junit null github html blob"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "retries" -d "Maximum retry count for flaky tests, zero for no retries (default: no retries)"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "shard" -d "Shard tests and execute only the selected shard, specify in the form \"current/all\", 1-based, for example \"3/5\""
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "timeout" -d "Specify test timeout threshold in milliseconds, zero for unlimited (default: 30000)"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "trace" -d "Force tracing mode" -xa "on off on-first-retry on-all-retries retain-on-failure retain-on-first-failure"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "tsconfig" -d "Path to a single tsconfig applicable to all imported files (default: look up tsconfig for each imported file separately)"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -s "u" -l "update-snapshots" -d "Update snapshots with actual results. Possible values are \"all\", \"changed\", \"missing\", and \"none\". Running tests without the flag defaults to \"missing\"; running tests with the flag but without a value defaults to \"changed\"." -xa "all changed missing none"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "ui" -d "Run tests in interactive UI mode"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "ui-host" -d "Host to serve UI on; specifying this option opens UI in a browser tab"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "ui-port" -d "Port to serve UI on, 0 for any free port; specifying this option opens UI in a browser tab"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -l "update-source-method" -d "Chooses the way source is updated" -xa "overwrite 3way patch"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -s "x" -d "Stop after the first failure"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from show-report" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from show-report" -l "host" -d "Host to serve report on (default: \"localhost\")"
complete -c "playwright" -n "__fish_seen_subcommand_from show-report" -l "port" -d "Port to serve report on (default: \"9323\")"
complete -c "playwright" -n "__fish_seen_subcommand_from merge-reports" -s "c" -l "config" -d "Configuration file. Can be used to specify additional configuration for the output report."
complete -c "playwright" -n "__fish_seen_subcommand_from merge-reports" -l "reporter" -d "Reporter to use, comma-separated" -xa "list line dot json junit null github html blob"
complete -c "playwright" -n "__fish_seen_subcommand_from merge-reports" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from clear-cache" -s "c" -l "config" -d "Configuration file, or a test directory with optional \"playwright.config.{m,c}?{js,ts}\""
complete -c "playwright" -n "__fish_seen_subcommand_from clear-cache" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from help" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from help" -s "h" -l "help" -d "display help for command"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "open" -d "open page in browser specified via -b, --browser"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "codegen" -d "open page and generate code for user actions"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "install" -d "ensure browsers necessary for this version of Playwright are installed"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "uninstall" -d "Removes browsers used by this installation of Playwright from the system (chromium, firefox, webkit, ffmpeg). This does not include branded channels."
complete -f -c "playwright" -n "__fish_use_subcommand" -a "install-deps" -d "install dependencies necessary to run browsers (will ask for sudo permissions)"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "cr" -d "open page in Chromium"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "ff" -d "open page in Firefox"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "wk" -d "open page in WebKit"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "screenshot" -d "capture a page screenshot"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "pdf" -d "save page as pdf"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "run-server"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "show-trace" -d "show trace viewer"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "test" -d "run tests with Playwright Test"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "show-report" -d "show HTML report"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "merge-reports" -d "merge multiple blob reports (for sharded tests) into a single report"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "clear-cache" -d "clears build and test caches"
complete -f -c "playwright" -n "__fish_use_subcommand" -a "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from open" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from codegen" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from install" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from install" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from uninstall" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from uninstall" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from install-deps" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from install-deps" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from cr" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from ff" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from wk" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from screenshot" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from pdf" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from run-server" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from run-server" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from show-trace" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from show-trace" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from test" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from show-report" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from show-report" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from merge-reports" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from merge-reports" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from clear-cache" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from clear-cache" -s "h" -l "help" -d "display help for command"
complete -c "playwright" -n "__fish_seen_subcommand_from help" -s "V" -l "version" -d "output the version number"
complete -c "playwright" -n "__fish_seen_subcommand_from help" -s "h" -l "help" -d "display help for command"