{
    "sourceFile": "colors.lua",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 82,
            "patches": [
                {
                    "date": 1720016729630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720016752267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,21 +102,21 @@\n local grey = argb('#55585e')\n local transparent = 0x00000000\n \n local rtn = {\n-  black,\n-  white,\n-  red,\n-  green,\n-  blue,\n-  yellow,\n-  orange,\n-  magenta,\n-  grey,\n-  transparent,\n+  black = black,\n+  white = white,\n+  red = red,\n+  green = green,\n+  blue = blue,\n+  yellow = yellow,\n+  orange = orange,\n+  magenta = magenta,\n+  grey = grey,\n+  transparent = transparent,\n \n   bar = {\n-    bg = argb('#262626'),  --0xf02c2e34,\n+    bg = argb('#262626'), --0xf02c2e34,\n     border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = 0xc02c2e34,\n"
                },
                {
                    "date": 1720016792281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n -- blue\t:\t#76cce0\n \n local black = 0xff181819\n local white = 0xffe2e2e3\n-local red = 0xfffc5d7c\n+local red = argb('#fc5d7c')\n local green = 0xff9ed072\n local blue = 0xff76cce0\n local yellow = 0xffe7c664\n local orange = 0xfff39660\n"
                },
                {
                    "date": 1720016882650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,13 +90,13 @@\n -- magenta\t:\t#b39df3\n -- green\t:\t#9ed072\n -- blue\t:\t#76cce0\n \n-local black = 0xff181819\n-local white = 0xffe2e2e3\n+local black = argb('#181819')\n+local white = argb('#e2e2e3')\n local red = argb('#fc5d7c')\n-local green = 0xff9ed072\n-local blue = 0xff76cce0\n+local green = argb('#9ed072')\n+local blue = argb('#76cce0')\n local yellow = 0xffe7c664\n local orange = 0xfff39660\n local magenta = 0xffb39df3\n local grey = argb('#55585e')\n"
                },
                {
                    "date": 1720016983393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,16 +90,17 @@\n -- magenta\t:\t#b39df3\n -- green\t:\t#9ed072\n -- blue\t:\t#76cce0\n \n+\n local black = argb('#181819')\n local white = argb('#e2e2e3')\n local red = argb('#fc5d7c')\n local green = argb('#9ed072')\n local blue = argb('#76cce0')\n-local yellow = 0xffe7c664\n-local orange = 0xfff39660\n-local magenta = 0xffb39df3\n+local yellow =\targb(#e7c664)\n+local orange =\targb(#b39df3)\n+local magenta =\targb(#9ed072)\n local grey = argb('#55585e')\n local transparent = 0x00000000\n \n local rtn = {\n"
                },
                {
                    "date": 1720016992795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,11 +96,11 @@\n local white = argb('#e2e2e3')\n local red = argb('#fc5d7c')\n local green = argb('#9ed072')\n local blue = argb('#76cce0')\n-local yellow =\targb(#e7c664)\n-local orange =\targb(#b39df3)\n-local magenta =\targb(#9ed072)\n+local yellow =\targb(\"#e7c664\")\n+local orange =\targb(\"#b39df3\")\n+local magenta =\targb(\"#9ed072\")\n local grey = argb('#55585e')\n local transparent = 0x00000000\n \n local rtn = {\n"
                },
                {
                    "date": 1720017083405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n -- local bit = bit32\n \n -- Function to convert RGB and Hex to ARGB\n-function rgb_hex_to_argb(r, g, b, alpha)\n+local function rgb_hex_to_argb(r, g, b, alpha)\n   -- Default alpha to 255 (opaque) if not provided\n   alpha = alpha or 255\n \n   -- Construct ARGB value\n@@ -17,15 +17,15 @@\n   return argb\n end\n \n -- Function to parse hex to RGB\n-function argb(hex)\n+local function argb(hex)\n   hex = hex:gsub(\"#\", \"\")\n   local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n   return rgb_hex_to_argb(r, g, b)\n end\n \n-function argb_explode(argb)\n+local function argb_explode(argb)\n   -- Extract the alpha, red, green, and blue components\n   local alpha = bit.rshift(argb, 24)\n   local red = bit.band(bit.rshift(argb, 16), 0xFF)\n   local green = bit.band(bit.rshift(argb, 8), 0xFF)\n@@ -39,9 +39,9 @@\n \n   return red, green, blue, alpha;\n end\n \n-function argb_to_hex(argb)\n+local function argb_to_hex(argb)\n   -- Extract the alpha, red, green, and blue components\n   local red, green, blue, alpha = argb_explode(argb)\n   -- Format RGB string\n   return string.format(\"#%02x%02x%02x\", red, green, blue)\n"
                },
                {
                    "date": 1720017160224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,10 @@\n   return argb\n end\n \n -- Function to parse hex to RGB\n-local function argb(hex)\n+local function argb(hex, alpha)\n+  alpha = alpha or 100\n   hex = hex:gsub(\"#\", \"\")\n   local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n   return rgb_hex_to_argb(r, g, b)\n end\n"
                },
                {
                    "date": 1720017306800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,12 +18,13 @@\n end\n \n -- Function to parse hex to RGB\n local function argb(hex, alpha)\n-  alpha = alpha or 100\n+  alpha = alpha or 1\n+  -- local alphahex = (alpha / 1) *\n   hex = hex:gsub(\"#\", \"\")\n   local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n-  return rgb_hex_to_argb(r, g, b)\n+  return rgb_hex_to_argb(r, g, b, alpha * 255)\n end\n \n local function argb_explode(argb)\n   -- Extract the alpha, red, green, and blue components\n@@ -97,11 +98,11 @@\n local white = argb('#e2e2e3')\n local red = argb('#fc5d7c')\n local green = argb('#9ed072')\n local blue = argb('#76cce0')\n-local yellow =\targb(\"#e7c664\")\n-local orange =\targb(\"#b39df3\")\n-local magenta =\targb(\"#9ed072\")\n+local yellow = argb(\"#e7c664\")\n+local orange = argb(\"#b39df3\")\n+local magenta = argb(\"#9ed072\")\n local grey = argb('#55585e')\n local transparent = 0x00000000\n \n local rtn = {\n"
                },
                {
                    "date": 1720017324045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n -- green\t:\t#9ed072\n -- blue\t:\t#76cce0\n \n \n-local black = argb('#181819')\n+local black = argb('#181819', .5)\n local white = argb('#e2e2e3')\n local red = argb('#fc5d7c')\n local green = argb('#9ed072')\n local blue = argb('#76cce0')\n"
                },
                {
                    "date": 1720017398778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n -- green\t:\t#9ed072\n -- blue\t:\t#76cce0\n \n \n-local black = argb('#181819', .5)\n+local black = argb('#181819')\n local white = argb('#e2e2e3')\n local red = argb('#fc5d7c')\n local green = argb('#9ed072')\n local blue = argb('#76cce0')\n@@ -132,8 +132,9 @@\n     if alpha > 1.0 or alpha < 0.0 then return color end\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n   end,\n }\n+log(rtn)\n \n \n -- for key, value in pairs(rtn) do\n --   if type(value) == 'table' then\n"
                },
                {
                    "date": 1720017411283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n     if alpha > 1.0 or alpha < 0.0 then return color end\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n   end,\n }\n-log(rtn)\n+debugTable(rtn)\n \n \n -- for key, value in pairs(rtn) do\n --   if type(value) == 'table' then\n"
                },
                {
                    "date": 1720017419586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+print('hello')\n+\n+\n+local bit = require(\"bit\")\n+local color = require(\"convertcolor\")\n+\n+-- local bit = bit32\n+\n+-- Function to convert RGB and Hex to ARGB\n+local function rgb_hex_to_argb(r, g, b, alpha)\n+  -- Default alpha to 255 (opaque) if not provided\n+  alpha = alpha or 255\n+\n+  -- Construct ARGB value\n+  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n+\n+  return argb\n+end\n+\n+-- Function to parse hex to RGB\n+local function argb(hex, alpha)\n+  alpha = alpha or 1\n+  -- local alphahex = (alpha / 1) *\n+  hex = hex:gsub(\"#\", \"\")\n+  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n+  return rgb_hex_to_argb(r, g, b, alpha * 255)\n+end\n+\n+local function argb_explode(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local alpha = bit.rshift(argb, 24)\n+  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n+  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n+  local blue = bit.band(argb, 0xFF)\n+\n+  -- Format RGB string\n+  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n+\n+  -- -- Format Hex string\n+  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n+\n+  return red, green, blue, alpha;\n+end\n+\n+local function argb_to_hex(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local red, green, blue, alpha = argb_explode(argb)\n+  -- Format RGB string\n+  return string.format(\"#%02x%02x%02x\", red, green, blue)\n+end\n+\n+-- function hex_to_argb(hex)\n+-- return  hex_to_rgb(hex)\n+\n+-- end\n+\n+function test()\n+  -- print('hello')\n+  print('dd', 0xf02c2e34, 'fff', color.hex('#181819'))\n+  --   -- Example usage with RGB\n+  --   local r, g, b = 24, 24, 25\n+  --   local alpha = 255 -- opaque\n+  --   local argb = rgb_hex_to_argb(r, g, b, alpha)\n+  --   print(string.format(\"ARGB: 0x%08x\", argb))\n+\n+  --   -- Example usage with Hex\n+  --   local hex = \"#181819\"\n+  --   local r, g, b = hex_to_rgb(hex)\n+  --   argb = rgb_hex_to_argb(r, g, b, alpha)\n+  --   print(string.format(\"ARGB from hex: 0x%08x\", argb))\n+end\n+\n+-- test();\n+\n+\n+\n+\n+\n+-- black\t:\t#181819\n+-- bar\tbg\t:\t#2c2e34\n+-- bar\tborder\t:\t#2c2e34\n+-- red\t:\t#fc5d7c\n+-- transparent\t:\t#000000\n+-- white\t:\t#e2e2e3\n+-- bg1\t:\t#363944\n+-- popup\tbg\t:\t#2c2e34\n+-- popup\tborder\t:\t#7f8490\n+-- orange\t:\t#f39660\n+-- bg2\t:\t#414550\n+-- grey\t:\t#7f8490\n+-- yellow\t:\t#e7c664\n+-- magenta\t:\t#b39df3\n+-- green\t:\t#9ed072\n+-- blue\t:\t#76cce0\n+\n+\n+local black = argb('#181819')\n+local white = argb('#e2e2e3')\n+local red = argb('#fc5d7c')\n+local green = argb('#9ed072')\n+local blue = argb('#76cce0')\n+local yellow = argb(\"#e7c664\")\n+local orange = argb(\"#b39df3\")\n+local magenta = argb(\"#9ed072\")\n+local grey = argb('#55585e')\n+local transparent = 0x00000000\n+\n+local rtn = {\n+  black = black,\n+  white = white,\n+  red = red,\n+  green = green,\n+  blue = blue,\n+  yellow = yellow,\n+  orange = orange,\n+  magenta = magenta,\n+  grey = grey,\n+  transparent = transparent,\n+\n+  bar = {\n+    bg = argb('#262626'), --0xf02c2e34,\n+    border = argb('#2c2e34'),\n+  },\n+  popup = {\n+    bg = 0xc02c2e34,\n+    border = 0xff7f8490\n+  },\n+  bg1 = argb('#2f3031'),\n+  bg2 = argb('#2c2f36'),\n+\n+  with_alpha = function(color, alpha)\n+    if alpha > 1.0 or alpha < 0.0 then return color end\n+    return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+  end,\n+}\n+\n+debug(rtn)\n+\n+\n+-- for key, value in pairs(rtn) do\n+--   if type(value) == 'table' then\n+--     for k, v in pairs(value) do\n+--       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n+--     end\n+--   elseif (type(value) == 'number') then\n+--     print(key, \":\", argb_to_hex(value))\n+--   end\n+-- end\n+\n+return rtn\n"
                },
                {
                    "date": 1720017558815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n print('hello')\n \n-\n+local serpent = require(\"serpent\")\n local bit = require(\"bit\")\n local color = require(\"convertcolor\")\n \n -- local bit = bit32\n@@ -132,12 +132,11 @@\n     if alpha > 1.0 or alpha < 0.0 then return color end\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n   end,\n }\n+-- lua dump table to console\n \n-debug(rtn)\n \n-\n -- for key, value in pairs(rtn) do\n --   if type(value) == 'table' then\n --     for k, v in pairs(value) do\n --       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n@@ -147,153 +146,4 @@\n --   end\n -- end\n \n return rtn\n-print('hello')\n-\n-\n-local bit = require(\"bit\")\n-local color = require(\"convertcolor\")\n-\n--- local bit = bit32\n-\n--- Function to convert RGB and Hex to ARGB\n-local function rgb_hex_to_argb(r, g, b, alpha)\n-  -- Default alpha to 255 (opaque) if not provided\n-  alpha = alpha or 255\n-\n-  -- Construct ARGB value\n-  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n-\n-  return argb\n-end\n-\n--- Function to parse hex to RGB\n-local function argb(hex, alpha)\n-  alpha = alpha or 1\n-  -- local alphahex = (alpha / 1) *\n-  hex = hex:gsub(\"#\", \"\")\n-  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n-  return rgb_hex_to_argb(r, g, b, alpha * 255)\n-end\n-\n-local function argb_explode(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local alpha = bit.rshift(argb, 24)\n-  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n-  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n-  local blue = bit.band(argb, 0xFF)\n-\n-  -- Format RGB string\n-  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n-\n-  -- -- Format Hex string\n-  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n-\n-  return red, green, blue, alpha;\n-end\n-\n-local function argb_to_hex(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local red, green, blue, alpha = argb_explode(argb)\n-  -- Format RGB string\n-  return string.format(\"#%02x%02x%02x\", red, green, blue)\n-end\n-\n--- function hex_to_argb(hex)\n--- return  hex_to_rgb(hex)\n-\n--- end\n-\n-function test()\n-  -- print('hello')\n-  print('dd', 0xf02c2e34, 'fff', color.hex('#181819'))\n-  --   -- Example usage with RGB\n-  --   local r, g, b = 24, 24, 25\n-  --   local alpha = 255 -- opaque\n-  --   local argb = rgb_hex_to_argb(r, g, b, alpha)\n-  --   print(string.format(\"ARGB: 0x%08x\", argb))\n-\n-  --   -- Example usage with Hex\n-  --   local hex = \"#181819\"\n-  --   local r, g, b = hex_to_rgb(hex)\n-  --   argb = rgb_hex_to_argb(r, g, b, alpha)\n-  --   print(string.format(\"ARGB from hex: 0x%08x\", argb))\n-end\n-\n--- test();\n-\n-\n-\n-\n-\n--- black\t:\t#181819\n--- bar\tbg\t:\t#2c2e34\n--- bar\tborder\t:\t#2c2e34\n--- red\t:\t#fc5d7c\n--- transparent\t:\t#000000\n--- white\t:\t#e2e2e3\n--- bg1\t:\t#363944\n--- popup\tbg\t:\t#2c2e34\n--- popup\tborder\t:\t#7f8490\n--- orange\t:\t#f39660\n--- bg2\t:\t#414550\n--- grey\t:\t#7f8490\n--- yellow\t:\t#e7c664\n--- magenta\t:\t#b39df3\n--- green\t:\t#9ed072\n--- blue\t:\t#76cce0\n-\n-\n-local black = argb('#181819')\n-local white = argb('#e2e2e3')\n-local red = argb('#fc5d7c')\n-local green = argb('#9ed072')\n-local blue = argb('#76cce0')\n-local yellow = argb(\"#e7c664\")\n-local orange = argb(\"#b39df3\")\n-local magenta = argb(\"#9ed072\")\n-local grey = argb('#55585e')\n-local transparent = 0x00000000\n-\n-local rtn = {\n-  black = black,\n-  white = white,\n-  red = red,\n-  green = green,\n-  blue = blue,\n-  yellow = yellow,\n-  orange = orange,\n-  magenta = magenta,\n-  grey = grey,\n-  transparent = transparent,\n-\n-  bar = {\n-    bg = argb('#262626'), --0xf02c2e34,\n-    border = argb('#2c2e34'),\n-  },\n-  popup = {\n-    bg = 0xc02c2e34,\n-    border = 0xff7f8490\n-  },\n-  bg1 = argb('#2f3031'),\n-  bg2 = argb('#2c2f36'),\n-\n-  with_alpha = function(color, alpha)\n-    if alpha > 1.0 or alpha < 0.0 then return color end\n-    return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-  end,\n-}\n-debugTable(rtn)\n-\n-\n--- for key, value in pairs(rtn) do\n---   if type(value) == 'table' then\n---     for k, v in pairs(value) do\n---       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n---     end\n---   elseif (type(value) == 'number') then\n---     print(key, \":\", argb_to_hex(value))\n---   end\n--- end\n-\n-return rtn\n"
                },
                {
                    "date": 1720017566705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n local serpent = require(\"serpent\")\n local bit = require(\"bit\")\n local color = require(\"convertcolor\")\n \n+print(serpent)\n -- local bit = bit32\n \n -- Function to convert RGB and Hex to ARGB\n local function rgb_hex_to_argb(r, g, b, alpha)\n"
                },
                {
                    "date": 1720017574454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n local serpent = require(\"serpent\")\n local bit = require(\"bit\")\n local color = require(\"convertcolor\")\n \n-print(serpent)\n+print(\"==>\", serpent)\n -- local bit = bit32\n \n -- Function to convert RGB and Hex to ARGB\n local function rgb_hex_to_argb(r, g, b, alpha)\n"
                },
                {
                    "date": 1720017594716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n local serpent = require(\"serpent\")\n local bit = require(\"bit\")\n local color = require(\"convertcolor\")\n \n-print(\"==>\", serpent)\n+-- print(\"==dd>\", )\n -- local bit = bit32\n \n -- Function to convert RGB and Hex to ARGB\n local function rgb_hex_to_argb(r, g, b, alpha)\n@@ -134,10 +134,10 @@\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n   end,\n }\n -- lua dump table to console\n+serpent.dump(rtn)\n \n-\n -- for key, value in pairs(rtn) do\n --   if type(value) == 'table' then\n --     for k, v in pairs(value) do\n --       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n"
                },
                {
                    "date": 1720017606853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,10 +134,13 @@\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n   end,\n }\n -- lua dump table to console\n+print('================')\n serpent.dump(rtn)\n+print('================')\n \n+\n -- for key, value in pairs(rtn) do\n --   if type(value) == 'table' then\n --     for k, v in pairs(value) do\n --       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n"
                },
                {
                    "date": 1720017612304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   end,\n }\n -- lua dump table to console\n print('================')\n-serpent.dump(rtn)\n+print(serpent.dump(rtn))\n print('================')\n \n \n -- for key, value in pairs(rtn) do\n"
                },
                {
                    "date": 1720017652863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   end,\n }\n -- lua dump table to console\n print('================')\n-print(serpent.dump(rtn))\n+print(serpent.block(rtn))\n print('================')\n \n \n -- for key, value in pairs(rtn) do\n"
                },
                {
                    "date": 1720017689021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   end,\n }\n -- lua dump table to console\n print('================')\n-print(serpent.block(rtn))\n+print(serpent.obj(rtn))\n print('================')\n \n \n -- for key, value in pairs(rtn) do\n"
                },
                {
                    "date": 1720017698190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   end,\n }\n -- lua dump table to console\n print('================')\n-print(serpent.obj(rtn))\n+print(serpent.block(rtn))\n print('================')\n \n \n -- for key, value in pairs(rtn) do\n"
                },
                {
                    "date": 1720017760255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   end,\n }\n -- lua dump table to console\n print('================')\n-print(serpent.block(rtn))\n+print(serpent.block(rtn, {sparse=true}))\n print('================')\n \n \n -- for key, value in pairs(rtn) do\n"
                },
                {
                    "date": 1720017876057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,11 +133,12 @@\n     if alpha > 1.0 or alpha < 0.0 then return color end\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n   end,\n }\n+print(\"==\", argb_to_hex(0xc02c2e34))\n -- lua dump table to console\n print('================')\n-print(serpent.block(rtn, {sparse=true}))\n+print(serpent.block(rtn, { sparse }))\n print('================')\n \n \n -- for key, value in pairs(rtn) do\n"
                },
                {
                    "date": 1720017885198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,8 +134,9 @@\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n   end,\n }\n print(\"==\", argb_to_hex(0xc02c2e34))\n+print(\"==\", argb_to_hex(0xff7f8490))\n -- lua dump table to console\n print('================')\n print(serpent.block(rtn, { sparse }))\n print('================')\n"
                },
                {
                    "date": 1720017916243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,10 +122,10 @@\n     bg = argb('#262626'), --0xf02c2e34,\n     border = argb('#2c2e34'),\n   },\n   popup = {\n-    bg = 0xc02c2e34,\n-    border = 0xff7f8490\n+    bg = argb(\"#2c2e34\"),\n+    border = argb(\"#7f8490\"),\n   },\n   bg1 = argb('#2f3031'),\n   bg2 = argb('#2c2f36'),\n \n"
                },
                {
                    "date": 1720017952578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n local grey = argb('#55585e')\n local transparent = 0x00000000\n \n local rtn = {\n-  black = black,\n+  black,\n   white = white,\n   red = red,\n   green = green,\n   blue = blue,\n"
                },
                {
                    "date": 1720017959574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,17 +107,17 @@\n local transparent = 0x00000000\n \n local rtn = {\n   black,\n-  white = white,\n-  red = red,\n-  green = green,\n-  blue = blue,\n-  yellow = yellow,\n-  orange = orange,\n-  magenta = magenta,\n-  grey = grey,\n-  transparent = transparent,\n+  white,\n+  red,\n+  green,\n+  blue,\n+  yellow,\n+  orange,\n+  magenta,\n+  grey,\n+  transparent,\n \n   bar = {\n     bg = argb('#262626'), --0xf02c2e34,\n     border = argb('#2c2e34'),\n"
                },
                {
                    "date": 1720017985893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,18 +106,18 @@\n local grey = argb('#55585e')\n local transparent = 0x00000000\n \n local rtn = {\n-  black,\n-  white,\n-  red,\n-  green,\n-  blue,\n-  yellow,\n-  orange,\n-  magenta,\n-  grey,\n-  transparent,\n+  black = black,\n+  white = white,\n+  red = red,\n+  green = green,\n+  blue = blue,\n+  yellow = yellow,\n+  orange = orange,\n+  magenta = magenta,\n+  grey = grey,\n+  transparent = transparent,\n \n   bar = {\n     bg = argb('#262626'), --0xf02c2e34,\n     border = argb('#2c2e34'),\n"
                },
                {
                    "date": 1720018096780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,9 @@\n local orange = argb(\"#b39df3\")\n local magenta = argb(\"#9ed072\")\n local grey = argb('#55585e')\n local transparent = 0x00000000\n+DARK = '#2c2e34'\n \n local rtn = {\n   black = black,\n   white = white,\n@@ -122,9 +123,9 @@\n     bg = argb('#262626'), --0xf02c2e34,\n     border = argb('#2c2e34'),\n   },\n   popup = {\n-    bg = argb(\"#2c2e34\"),\n+    bg = argb(DARK),\n     border = argb(\"#7f8490\"),\n   },\n   bg1 = argb('#2f3031'),\n   bg2 = argb('#2c2f36'),\n"
                },
                {
                    "date": 1720018149333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,10 +134,10 @@\n     if alpha > 1.0 or alpha < 0.0 then return color end\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n   end,\n }\n-print(\"==\", argb_to_hex(0xc02c2e34))\n-print(\"==\", argb_to_hex(0xff7f8490))\n+print(\"==\", argb_to_hex(0x00ffffff))\n+-- print(\"==\", argb_to_hex(0xff7f8490))\n -- lua dump table to console\n print('================')\n print(serpent.block(rtn, { sparse }))\n print('================')\n"
                },
                {
                    "date": 1720018183390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,156 @@\n+print('hello')\n+\n+local serpent = require(\"serpent\")\n+local bit = require(\"bit\")\n+local color = require(\"convertcolor\")\n+\n+-- print(\"==dd>\", )\n+-- local bit = bit32\n+\n+-- Function to convert RGB and Hex to ARGB\n+local function rgb_hex_to_argb(r, g, b, alpha)\n+  -- Default alpha to 255 (opaque) if not provided\n+  alpha = alpha or 255\n+\n+  -- Construct ARGB value\n+  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n+\n+  return argb\n+end\n+\n+-- Function to parse hex to RGB\n+local function argb(hex, alpha)\n+  alpha = alpha or 1\n+  -- local alphahex = (alpha / 1) *\n+  hex = hex:gsub(\"#\", \"\")\n+  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n+  return rgb_hex_to_argb(r, g, b, alpha * 255)\n+end\n+\n+local function argb_explode(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local alpha = bit.rshift(argb, 24)\n+  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n+  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n+  local blue = bit.band(argb, 0xFF)\n+\n+  -- Format RGB string\n+  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n+\n+  -- -- Format Hex string\n+  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n+\n+  return red, green, blue, alpha;\n+end\n+\n+local function argb_to_hex(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local red, green, blue, alpha = argb_explode(argb)\n+  -- Format RGB string\n+  return string.format(\"#%02x%02x%02x\", red, green, blue)\n+end\n+\n+-- function hex_to_argb(hex)\n+-- return  hex_to_rgb(hex)\n+\n+-- end\n+\n+function test()\n+  -- print('hello')\n+  print('dd', 0xf02c2e34, 'fff', color.hex('#181819'))\n+  --   -- Example usage with RGB\n+  --   local r, g, b = 24, 24, 25\n+  --   local alpha = 255 -- opaque\n+  --   local argb = rgb_hex_to_argb(r, g, b, alpha)\n+  --   print(string.format(\"ARGB: 0x%08x\", argb))\n+\n+  --   -- Example usage with Hex\n+  --   local hex = \"#181819\"\n+  --   local r, g, b = hex_to_rgb(hex)\n+  --   argb = rgb_hex_to_argb(r, g, b, alpha)\n+  --   print(string.format(\"ARGB from hex: 0x%08x\", argb))\n+end\n+\n+-- test();\n+\n+\n+\n+\n+\n+-- black\t:\t#181819\n+-- bar\tbg\t:\t#2c2e34\n+-- bar\tborder\t:\t#2c2e34\n+-- red\t:\t#fc5d7c\n+-- transparent\t:\t#000000\n+-- white\t:\t#e2e2e3\n+-- bg1\t:\t#363944\n+-- popup\tbg\t:\t#2c2e34\n+-- popup\tborder\t:\t#7f8490\n+-- orange\t:\t#f39660\n+-- bg2\t:\t#414550\n+-- grey\t:\t#7f8490\n+-- yellow\t:\t#e7c664\n+-- magenta\t:\t#b39df3\n+-- green\t:\t#9ed072\n+-- blue\t:\t#76cce0\n+\n+\n+local black = argb('#181819')\n+local white = argb('#e2e2e3')\n+local red = argb('#fc5d7c')\n+local green = argb('#9ed072')\n+local blue = argb('#76cce0')\n+local yellow = argb(\"#e7c664\")\n+local orange = argb(\"#b39df3\")\n+local magenta = argb(\"#9ed072\")\n+local grey = argb('#55585e')\n+local transparent = 0x00000000\n+DARK = '#2c2e34'\n+\n+local rtn = {\n+  black = black,\n+  white = white,\n+  red = red,\n+  green = green,\n+  blue = blue,\n+  yellow = yellow,\n+  orange = orange,\n+  magenta = magenta,\n+  grey = grey,\n+  transparent = transparent,\n+\n+  bar = {\n+    bg = argb('#262626'), --0xf02c2e34,\n+    border = argb('#2c2e34'),\n+  },\n+  popup = {\n+    bg = argb(DARK),\n+    border = argb(\"#7f8490\"),\n+  },\n+  bg1 = argb('#2f3031'),\n+  bg2 = argb('#2c2f36'),\n+\n+  with_alpha = function(color, alpha)\n+    if alpha > 1.0 or alpha < 0.0 then return color end\n+    return (color & white) | (math.floor(alpha * 255.0) << 24)\n+  end,\n+}\n+print(\"==\", argb_to_hex(0x00ffffff))\n+-- print(\"==\", argb_to_hex(0xff7f8490))\n+-- lua dump table to console\n+print('================')\n+print(serpent.block(rtn, { sparse }))\n+print('================')\n+\n+\n+-- for key, value in pairs(rtn) do\n+--   if type(value) == 'table' then\n+--     for k, v in pairs(value) do\n+--       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n+--     end\n+--   elseif (type(value) == 'number') then\n+--     print(key, \":\", argb_to_hex(value))\n+--   end\n+-- end\n+\n+return rtn\n"
                },
                {
                    "date": 1720018461213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,10 +126,10 @@\n   popup = {\n     bg = argb(DARK),\n     border = argb(\"#7f8490\"),\n   },\n-  bg1 = argb('#2f3031'),\n-  bg2 = argb('#2c2f36'),\n+  bg1 = argb('#23262E'),\n+  bg2 = argb('#23262E'),\n \n   with_alpha = function(color, alpha)\n     if alpha > 1.0 or alpha < 0.0 then return color end\n     return (color & white) | (math.floor(alpha * 255.0) << 24)\n@@ -153,160 +153,4 @@\n --   end\n -- end\n \n return rtn\n-print('hello')\n-\n-local serpent = require(\"serpent\")\n-local bit = require(\"bit\")\n-local color = require(\"convertcolor\")\n-\n--- print(\"==dd>\", )\n--- local bit = bit32\n-\n--- Function to convert RGB and Hex to ARGB\n-local function rgb_hex_to_argb(r, g, b, alpha)\n-  -- Default alpha to 255 (opaque) if not provided\n-  alpha = alpha or 255\n-\n-  -- Construct ARGB value\n-  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n-\n-  return argb\n-end\n-\n--- Function to parse hex to RGB\n-local function argb(hex, alpha)\n-  alpha = alpha or 1\n-  -- local alphahex = (alpha / 1) *\n-  hex = hex:gsub(\"#\", \"\")\n-  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n-  return rgb_hex_to_argb(r, g, b, alpha * 255)\n-end\n-\n-local function argb_explode(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local alpha = bit.rshift(argb, 24)\n-  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n-  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n-  local blue = bit.band(argb, 0xFF)\n-\n-  -- Format RGB string\n-  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n-\n-  -- -- Format Hex string\n-  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n-\n-  return red, green, blue, alpha;\n-end\n-\n-local function argb_to_hex(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local red, green, blue, alpha = argb_explode(argb)\n-  -- Format RGB string\n-  return string.format(\"#%02x%02x%02x\", red, green, blue)\n-end\n-\n--- function hex_to_argb(hex)\n--- return  hex_to_rgb(hex)\n-\n--- end\n-\n-function test()\n-  -- print('hello')\n-  print('dd', 0xf02c2e34, 'fff', color.hex('#181819'))\n-  --   -- Example usage with RGB\n-  --   local r, g, b = 24, 24, 25\n-  --   local alpha = 255 -- opaque\n-  --   local argb = rgb_hex_to_argb(r, g, b, alpha)\n-  --   print(string.format(\"ARGB: 0x%08x\", argb))\n-\n-  --   -- Example usage with Hex\n-  --   local hex = \"#181819\"\n-  --   local r, g, b = hex_to_rgb(hex)\n-  --   argb = rgb_hex_to_argb(r, g, b, alpha)\n-  --   print(string.format(\"ARGB from hex: 0x%08x\", argb))\n-end\n-\n--- test();\n-\n-\n-\n-\n-\n--- black\t:\t#181819\n--- bar\tbg\t:\t#2c2e34\n--- bar\tborder\t:\t#2c2e34\n--- red\t:\t#fc5d7c\n--- transparent\t:\t#000000\n--- white\t:\t#e2e2e3\n--- bg1\t:\t#363944\n--- popup\tbg\t:\t#2c2e34\n--- popup\tborder\t:\t#7f8490\n--- orange\t:\t#f39660\n--- bg2\t:\t#414550\n--- grey\t:\t#7f8490\n--- yellow\t:\t#e7c664\n--- magenta\t:\t#b39df3\n--- green\t:\t#9ed072\n--- blue\t:\t#76cce0\n-\n-\n-local black = argb('#181819')\n-local white = argb('#e2e2e3')\n-local red = argb('#fc5d7c')\n-local green = argb('#9ed072')\n-local blue = argb('#76cce0')\n-local yellow = argb(\"#e7c664\")\n-local orange = argb(\"#b39df3\")\n-local magenta = argb(\"#9ed072\")\n-local grey = argb('#55585e')\n-local transparent = 0x00000000\n-DARK = '#2c2e34'\n-\n-local rtn = {\n-  black = black,\n-  white = white,\n-  red = red,\n-  green = green,\n-  blue = blue,\n-  yellow = yellow,\n-  orange = orange,\n-  magenta = magenta,\n-  grey = grey,\n-  transparent = transparent,\n-\n-  bar = {\n-    bg = argb('#262626'), --0xf02c2e34,\n-    border = argb('#2c2e34'),\n-  },\n-  popup = {\n-    bg = argb(DARK),\n-    border = argb(\"#7f8490\"),\n-  },\n-  bg1 = argb('#2f3031'),\n-  bg2 = argb('#2c2f36'),\n-\n-  with_alpha = function(color, alpha)\n-    if alpha > 1.0 or alpha < 0.0 then return color end\n-    return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-  end,\n-}\n-print(\"==\", argb_to_hex(0x00ffffff))\n--- print(\"==\", argb_to_hex(0xff7f8490))\n--- lua dump table to console\n-print('================')\n-print(serpent.block(rtn, { sparse }))\n-print('================')\n-\n-\n--- for key, value in pairs(rtn) do\n---   if type(value) == 'table' then\n---     for k, v in pairs(value) do\n---       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n---     end\n---   elseif (type(value) == 'number') then\n---     print(key, \":\", argb_to_hex(value))\n---   end\n--- end\n-\n-return rtn\n"
                },
                {
                    "date": 1720018560884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,35 +49,16 @@\n   -- Format RGB string\n   return string.format(\"#%02x%02x%02x\", red, green, blue)\n end\n \n--- function hex_to_argb(hex)\n--- return  hex_to_rgb(hex)\n-\n--- end\n-\n-function test()\n-  -- print('hello')\n-  print('dd', 0xf02c2e34, 'fff', color.hex('#181819'))\n-  --   -- Example usage with RGB\n-  --   local r, g, b = 24, 24, 25\n-  --   local alpha = 255 -- opaque\n-  --   local argb = rgb_hex_to_argb(r, g, b, alpha)\n-  --   print(string.format(\"ARGB: 0x%08x\", argb))\n-\n-  --   -- Example usage with Hex\n-  --   local hex = \"#181819\"\n-  --   local r, g, b = hex_to_rgb(hex)\n-  --   argb = rgb_hex_to_argb(r, g, b, alpha)\n-  --   print(string.format(\"ARGB from hex: 0x%08x\", argb))\n+local with_alpha = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n end\n \n--- test();\n \n \n \n-\n-\n -- black\t:\t#181819\n -- bar\tbg\t:\t#2c2e34\n -- bar\tborder\t:\t#2c2e34\n -- red\t:\t#fc5d7c\n@@ -95,9 +76,8 @@\n -- blue\t:\t#76cce0\n \n \n local black = argb('#181819')\n-local white = argb('#e2e2e3')\n local red = argb('#fc5d7c')\n local green = argb('#9ed072')\n local blue = argb('#76cce0')\n local yellow = argb(\"#e7c664\")\n@@ -129,12 +109,9 @@\n   },\n   bg1 = argb('#23262E'),\n   bg2 = argb('#23262E'),\n \n-  with_alpha = function(color, alpha)\n-    if alpha > 1.0 or alpha < 0.0 then return color end\n-    return (color & white) | (math.floor(alpha * 255.0) << 24)\n-  end,\n+  with_alpha = with_alpha\n }\n print(\"==\", argb_to_hex(0x00ffffff))\n -- print(\"==\", argb_to_hex(0xff7f8490))\n -- lua dump table to console\n"
                },
                {
                    "date": 1720018584346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,11 @@\n   -- Format RGB string\n   return string.format(\"#%02x%02x%02x\", red, green, blue)\n end\n \n-local with_alpha = function(color, alpha)\n-  if alpha > 1.0 or alpha < 0.0 then return color end\n-  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+local with_alpha = function(col, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return col end\n+  return (col & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n end\n \n \n \n"
                },
                {
                    "date": 1720018627951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n   -- Format RGB string\n   return string.format(\"#%02x%02x%02x\", red, green, blue)\n end\n \n-local with_alpha = function(col, alpha)\n+with_alpha = function(col, alpha)\n   if alpha > 1.0 or alpha < 0.0 then return col end\n   return (col & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n end\n \n"
                },
                {
                    "date": 1720018638573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,12 @@\n   },\n   bg1 = argb('#23262E'),\n   bg2 = argb('#23262E'),\n \n-  with_alpha = with_alpha\n+  with_alpha = function(col, alpha)\n+    if alpha > 1.0 or alpha < 0.0 then return col end\n+    return (col & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+  end\n }\n print(\"==\", argb_to_hex(0x00ffffff))\n -- print(\"==\", argb_to_hex(0xff7f8490))\n -- lua dump table to console\n"
                },
                {
                    "date": 1720018698467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,16 +49,35 @@\n   -- Format RGB string\n   return string.format(\"#%02x%02x%02x\", red, green, blue)\n end\n \n-with_alpha = function(col, alpha)\n-  if alpha > 1.0 or alpha < 0.0 then return col end\n-  return (col & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+-- function hex_to_argb(hex)\n+-- return  hex_to_rgb(hex)\n+\n+-- end\n+\n+function test()\n+  -- print('hello')\n+  print('dd', 0xf02c2e34, 'fff', color.hex('#181819'))\n+  --   -- Example usage with RGB\n+  --   local r, g, b = 24, 24, 25\n+  --   local alpha = 255 -- opaque\n+  --   local argb = rgb_hex_to_argb(r, g, b, alpha)\n+  --   print(string.format(\"ARGB: 0x%08x\", argb))\n+\n+  --   -- Example usage with Hex\n+  --   local hex = \"#181819\"\n+  --   local r, g, b = hex_to_rgb(hex)\n+  --   argb = rgb_hex_to_argb(r, g, b, alpha)\n+  --   print(string.format(\"ARGB from hex: 0x%08x\", argb))\n end\n \n+-- test();\n \n \n \n+\n+\n -- black\t:\t#181819\n -- bar\tbg\t:\t#2c2e34\n -- bar\tborder\t:\t#2c2e34\n -- red\t:\t#fc5d7c\n@@ -76,8 +95,9 @@\n -- blue\t:\t#76cce0\n \n \n local black = argb('#181819')\n+local white = argb('#e2e2e3')\n local red = argb('#fc5d7c')\n local green = argb('#9ed072')\n local blue = argb('#76cce0')\n local yellow = argb(\"#e7c664\")\n@@ -109,12 +129,12 @@\n   },\n   bg1 = argb('#23262E'),\n   bg2 = argb('#23262E'),\n \n-  with_alpha = function(col, alpha)\n-    if alpha > 1.0 or alpha < 0.0 then return col end\n-    return (col & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-  end\n+  with_alpha = function(color, alpha)\n+    if alpha > 1.0 or alpha < 0.0 then return color end\n+    return (color & white) | (math.floor(alpha * 255.0) << 24)\n+  end,\n }\n print(\"==\", argb_to_hex(0x00ffffff))\n -- print(\"==\", argb_to_hex(0xff7f8490))\n -- lua dump table to console\n"
                },
                {
                    "date": 1720018750002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,13 @@\n   --   argb = rgb_hex_to_argb(r, g, b, alpha)\n   --   print(string.format(\"ARGB from hex: 0x%08x\", argb))\n end\n \n+local opacify = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+end,\n+\n -- test();\n \n \n \n"
                },
                {
                    "date": 1720018755389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,14 +70,14 @@\n   --   argb = rgb_hex_to_argb(r, g, b, alpha)\n   --   print(string.format(\"ARGB from hex: 0x%08x\", argb))\n end\n \n-local opacify = function(color, alpha)\n-  if alpha > 1.0 or alpha < 0.0 then return color end\n-  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-end,\n+-- local opacify = function(color, alpha)\n+--   if alpha > 1.0 or alpha < 0.0 then return color end\n+--   return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+-- end,\n \n--- test();\n+-- -- test();\n \n \n \n \n"
                },
                {
                    "date": 1720018774035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n   yellow = yellow,\n   orange = orange,\n   magenta = magenta,\n   grey = grey,\n-  transparent = transparent,\n+  transparent = rtn.magenta,\n \n   bar = {\n     bg = argb('#262626'), --0xf02c2e34,\n     border = argb('#2c2e34'),\n"
                },
                {
                    "date": 1720018793320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,14 +70,14 @@\n   --   argb = rgb_hex_to_argb(r, g, b, alpha)\n   --   print(string.format(\"ARGB from hex: 0x%08x\", argb))\n end\n \n--- local opacify = function(color, alpha)\n---   if alpha > 1.0 or alpha < 0.0 then return color end\n---   return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n--- end,\n+local opacify = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+end\n \n--- -- test();\n+-- test();\n \n \n \n \n@@ -121,9 +121,9 @@\n   yellow = yellow,\n   orange = orange,\n   magenta = magenta,\n   grey = grey,\n-  transparent = rtn.magenta,\n+  transparent = argb(DARK),\n \n   bar = {\n     bg = argb('#262626'), --0xf02c2e34,\n     border = argb('#2c2e34'),\n"
                },
                {
                    "date": 1720018815968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n   yellow = yellow,\n   orange = orange,\n   magenta = magenta,\n   grey = grey,\n-  transparent = argb(DARK),\n+  transparent = transparent,\n \n   bar = {\n     bg = argb('#262626'), --0xf02c2e34,\n     border = argb('#2c2e34'),\n"
                },
                {
                    "date": 1720018821218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n     bg = argb('#262626'), --0xf02c2e34,\n     border = argb('#2c2e34'),\n   },\n   popup = {\n-    bg = argb(DARK),\n+    bg = argb(\"#04060F\"),\n     border = argb(\"#7f8490\"),\n   },\n   bg1 = argb('#23262E'),\n   bg2 = argb('#23262E'),\n"
                },
                {
                    "date": 1720018889462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n     bg = argb('#262626'), --0xf02c2e34,\n     border = argb('#2c2e34'),\n   },\n   popup = {\n-    bg = argb(\"#04060F\"),\n+    bg = argb(\"#7f8490\"),\n     border = argb(\"#7f8490\"),\n   },\n   bg1 = argb('#23262E'),\n   bg2 = argb('#23262E'),\n"
                },
                {
                    "date": 1720018927449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    bg = argb('#262626'), --0xf02c2e34,\n+    bg = argb(DARK), --0xf02c2e34,\n     border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720018936298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n local orange = argb(\"#b39df3\")\n local magenta = argb(\"#9ed072\")\n local grey = argb('#55585e')\n local transparent = 0x00000000\n-DARK = '#2c2e34'\n+DARK = '#04060F'\n \n local rtn = {\n   black = black,\n   white = white,\n"
                },
                {
                    "date": 1720018945426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n local orange = argb(\"#b39df3\")\n local magenta = argb(\"#9ed072\")\n local grey = argb('#55585e')\n local transparent = 0x00000000\n-DARK = '#04060F'\n+DARK = '#2c2e34'\n \n local rtn = {\n   black = black,\n   white = white,\n"
                },
                {
                    "date": 1720019063504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n   transparent = transparent,\n \n   bar = {\n     bg = argb(DARK), --0xf02c2e34,\n-    border = argb('#2c2e34'),\n+    border = argb('#2c2e34', .4),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n     border = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019075646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n   transparent = transparent,\n \n   bar = {\n     bg = argb(DARK), --0xf02c2e34,\n-    border = argb('#2c2e34', .4),\n+    border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n     border = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019173449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    bg = argb(DARK), --0xf02c2e34,\n+    bg = with_alpha(argb(DARK), 0.5)\n     border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019205092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n print('hello')\n \n local serpent = require(\"serpent\")\n local bit = require(\"bit\")\n-local color = require(\"convertcolor\")\n+-- local color = require(\"convertcolor\")\n \n -- print(\"==dd>\", )\n -- local bit = bit32\n \n@@ -49,29 +49,9 @@\n   -- Format RGB string\n   return string.format(\"#%02x%02x%02x\", red, green, blue)\n end\n \n--- function hex_to_argb(hex)\n--- return  hex_to_rgb(hex)\n \n--- end\n-\n-function test()\n-  -- print('hello')\n-  print('dd', 0xf02c2e34, 'fff', color.hex('#181819'))\n-  --   -- Example usage with RGB\n-  --   local r, g, b = 24, 24, 25\n-  --   local alpha = 255 -- opaque\n-  --   local argb = rgb_hex_to_argb(r, g, b, alpha)\n-  --   print(string.format(\"ARGB: 0x%08x\", argb))\n-\n-  --   -- Example usage with Hex\n-  --   local hex = \"#181819\"\n-  --   local r, g, b = hex_to_rgb(hex)\n-  --   argb = rgb_hex_to_argb(r, g, b, alpha)\n-  --   print(string.format(\"ARGB from hex: 0x%08x\", argb))\n-end\n-\n local opacify = function(color, alpha)\n   if alpha > 1.0 or alpha < 0.0 then return color end\n   return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n end\n@@ -124,9 +104,9 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    bg = with_alpha(argb(DARK), 0.5)\n+    bg = with_alpha(argb(DARK), 0.5),\n     border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019253965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,13 @@\n local grey = argb('#55585e')\n local transparent = 0x00000000\n DARK = '#2c2e34'\n \n+local walpha = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+end\n+\n local rtn = {\n   black = black,\n   white = white,\n   red = red,\n"
                },
                {
                    "date": 1720019265103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    bg = with_alpha(argb(DARK), 0.5),\n+    bg = walpha(argb(DARK), 0.5),\n     border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019283461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,10 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    bg = walpha(argb(DARK), 0.5),\n+    -- bg = walpha(argb(DARK), 0.5),\n+    bg = argb(DARK, 0.5), \n     border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019291057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,10 +109,9 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    -- bg = walpha(argb(DARK), 0.5),\n-    bg = argb(DARK, 0.5), \n+    bg = walpha(argb(DARK), 0.5),\n     border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019309899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,10 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    bg = walpha(argb(DARK), 0.5),\n+    -- bg = walpha(argb(DARK), 0.5),\n+    bg = argb(DARK, .1), \n     border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019316684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n   transparent = transparent,\n \n   bar = {\n     -- bg = walpha(argb(DARK), 0.5),\n-    bg = argb(DARK, .1), \n+    bg = argb(DARK, .3), \n     border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019321958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n   transparent = transparent,\n \n   bar = {\n     -- bg = walpha(argb(DARK), 0.5),\n-    bg = argb(DARK, .3), \n+    bg = argb(DARK, 1), \n     border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019330363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n   transparent = transparent,\n \n   bar = {\n     -- bg = walpha(argb(DARK), 0.5),\n-    bg = argb(DARK, 1), \n+    bg = argb(DARK, 0.8), \n     border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019335970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n   transparent = transparent,\n \n   bar = {\n     -- bg = walpha(argb(DARK), 0.5),\n-    bg = argb(DARK, 0.8), \n+    bg = argb(DARK, 0.9), \n     border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019393060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,10 +109,10 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    -- bg = walpha(argb(DARK), 0.5),\n-    bg = argb(DARK, 0.9), \n+    bg = walpha(argb(DARK), 0.5),\n+    -- bg = argb(DARK, 0.94), \n     border = argb('#2c2e34'),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019406589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    bg = walpha(argb(DARK), 0.5),\n+    bg = walpha(argb(DARK), 0.8),\n     -- bg = argb(DARK, 0.94), \n     border = argb('#2c2e34'),\n   },\n   popup = {\n"
                },
                {
                    "date": 1720019433082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n local orange = argb(\"#b39df3\")\n local magenta = argb(\"#9ed072\")\n local grey = argb('#55585e')\n local transparent = 0x00000000\n-DARK = '#2c2e34'\n+DARK = '#000000'\n \n local walpha = function(color, alpha)\n   if alpha > 1.0 or alpha < 0.0 then return color end\n   return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n"
                },
                {
                    "date": 1720019448905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    bg = walpha(argb(DARK), 0.8),\n+    bg = walpha(argb(DARK), 0.5),\n     -- bg = argb(DARK, 0.94), \n     border = argb('#2c2e34'),\n   },\n   popup = {\n"
                },
                {
                    "date": 1720019476771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    bg = walpha(argb(DARK), 0.5),\n+    bg = walpha(argb(DARK), 0.05),\n     -- bg = argb(DARK, 0.94), \n     border = argb('#2c2e34'),\n   },\n   popup = {\n"
                },
                {
                    "date": 1720019488321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    bg = walpha(argb(DARK), 0.05),\n+    bg = walpha(argb(DARK), 0.01),\n     -- bg = argb(DARK, 0.94), \n     border = argb('#2c2e34'),\n   },\n   popup = {\n"
                },
                {
                    "date": 1720019538345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n local orange = argb(\"#b39df3\")\n local magenta = argb(\"#9ed072\")\n local grey = argb('#55585e')\n local transparent = 0x00000000\n-DARK = '#000000'\n+DARK = '#090B17'\n \n local walpha = function(color, alpha)\n   if alpha > 1.0 or alpha < 0.0 then return color end\n   return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n"
                },
                {
                    "date": 1720019555101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+print('hello')\n+\n+local serpent = require(\"serpent\")\n+local bit = require(\"bit\")\n+-- local color = require(\"convertcolor\")\n+\n+-- print(\"==dd>\", )\n+-- local bit = bit32\n+\n+-- Function to convert RGB and Hex to ARGB\n+local function rgb_hex_to_argb(r, g, b, alpha)\n+  -- Default alpha to 255 (opaque) if not provided\n+  alpha = alpha or 255\n+\n+  -- Construct ARGB value\n+  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n+\n+  return argb\n+end\n+\n+-- Function to parse hex to RGB\n+local function argb(hex, alpha)\n+  alpha = alpha or 1\n+  -- local alphahex = (alpha / 1) *\n+  hex = hex:gsub(\"#\", \"\")\n+  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n+  return rgb_hex_to_argb(r, g, b, alpha * 255)\n+end\n+\n+local function argb_explode(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local alpha = bit.rshift(argb, 24)\n+  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n+  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n+  local blue = bit.band(argb, 0xFF)\n+\n+  -- Format RGB string\n+  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n+\n+  -- -- Format Hex string\n+  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n+\n+  return red, green, blue, alpha;\n+end\n+\n+local function argb_to_hex(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local red, green, blue, alpha = argb_explode(argb)\n+  -- Format RGB string\n+  return string.format(\"#%02x%02x%02x\", red, green, blue)\n+end\n+\n+\n+local opacify = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+end\n+\n+-- test();\n+\n+\n+\n+\n+\n+-- black\t:\t#181819\n+-- bar\tbg\t:\t#2c2e34\n+-- bar\tborder\t:\t#2c2e34\n+-- red\t:\t#fc5d7c\n+-- transparent\t:\t#000000\n+-- white\t:\t#e2e2e3\n+-- bg1\t:\t#363944\n+-- popup\tbg\t:\t#2c2e34\n+-- popup\tborder\t:\t#7f8490\n+-- orange\t:\t#f39660\n+-- bg2\t:\t#414550\n+-- grey\t:\t#7f8490\n+-- yellow\t:\t#e7c664\n+-- magenta\t:\t#b39df3\n+-- green\t:\t#9ed072\n+-- blue\t:\t#76cce0\n+\n+\n+local black = argb('#181819')\n+local white = argb('#e2e2e3')\n+local red = argb('#fc5d7c')\n+local green = argb('#9ed072')\n+local blue = argb('#76cce0')\n+local yellow = argb(\"#e7c664\")\n+local orange = argb(\"#b39df3\")\n+local magenta = argb(\"#9ed072\")\n+local grey = argb('#55585e')\n+local transparent = 0x00000000\n+DARK = '#090B17'\n+\n+local walpha = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+end\n+\n+local rtn = {\n+  black = black,\n+  white = white,\n+  red = red,\n+  green = green,\n+  blue = blue,\n+  yellow = yellow,\n+  orange = orange,\n+  magenta = magenta,\n+  grey = grey,\n+  transparent = transparent,\n+\n+  bar = {\n+    bg = argb(DARK, 0.01), \n+    -- bg = argb(DARK, 0.94), \n+    border = argb('#2c2e34'),\n+  },\n+  popup = {\n+    bg = argb(\"#7f8490\"),\n+    border = argb(\"#7f8490\"),\n+  },\n+  bg1 = argb('#23262E'),\n+  bg2 = argb('#23262E'),\n+\n+  with_alpha = function(color, alpha)\n+    if alpha > 1.0 or alpha < 0.0 then return color end\n+    return (color & white) | (math.floor(alpha * 255.0) << 24)\n+  end,\n+}\n+print(\"==\", argb_to_hex(0x00ffffff))\n+-- print(\"==\", argb_to_hex(0xff7f8490))\n+-- lua dump table to console\n+print('================')\n+print(serpent.block(rtn, { sparse }))\n+print('================')\n+\n+\n+-- for key, value in pairs(rtn) do\n+--   if type(value) == 'table' then\n+--     for k, v in pairs(value) do\n+--       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n+--     end\n+--   elseif (type(value) == 'number') then\n+--     print(key, \":\", argb_to_hex(value))\n+--   end\n+-- end\n+\n+return rtn\n"
                },
                {
                    "date": 1720019564182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,155 +109,8 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    bg = argb(DARK, 0.01), \n-    -- bg = argb(DARK, 0.94), \n-    border = argb('#2c2e34'),\n-  },\n-  popup = {\n-    bg = argb(\"#7f8490\"),\n-    border = argb(\"#7f8490\"),\n-  },\n-  bg1 = argb('#23262E'),\n-  bg2 = argb('#23262E'),\n-\n-  with_alpha = function(color, alpha)\n-    if alpha > 1.0 or alpha < 0.0 then return color end\n-    return (color & white) | (math.floor(alpha * 255.0) << 24)\n-  end,\n-}\n-print(\"==\", argb_to_hex(0x00ffffff))\n--- print(\"==\", argb_to_hex(0xff7f8490))\n--- lua dump table to console\n-print('================')\n-print(serpent.block(rtn, { sparse }))\n-print('================')\n-\n-\n--- for key, value in pairs(rtn) do\n---   if type(value) == 'table' then\n---     for k, v in pairs(value) do\n---       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n---     end\n---   elseif (type(value) == 'number') then\n---     print(key, \":\", argb_to_hex(value))\n---   end\n--- end\n-\n-return rtn\n-print('hello')\n-\n-local serpent = require(\"serpent\")\n-local bit = require(\"bit\")\n--- local color = require(\"convertcolor\")\n-\n--- print(\"==dd>\", )\n--- local bit = bit32\n-\n--- Function to convert RGB and Hex to ARGB\n-local function rgb_hex_to_argb(r, g, b, alpha)\n-  -- Default alpha to 255 (opaque) if not provided\n-  alpha = alpha or 255\n-\n-  -- Construct ARGB value\n-  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n-\n-  return argb\n-end\n-\n--- Function to parse hex to RGB\n-local function argb(hex, alpha)\n-  alpha = alpha or 1\n-  -- local alphahex = (alpha / 1) *\n-  hex = hex:gsub(\"#\", \"\")\n-  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n-  return rgb_hex_to_argb(r, g, b, alpha * 255)\n-end\n-\n-local function argb_explode(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local alpha = bit.rshift(argb, 24)\n-  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n-  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n-  local blue = bit.band(argb, 0xFF)\n-\n-  -- Format RGB string\n-  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n-\n-  -- -- Format Hex string\n-  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n-\n-  return red, green, blue, alpha;\n-end\n-\n-local function argb_to_hex(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local red, green, blue, alpha = argb_explode(argb)\n-  -- Format RGB string\n-  return string.format(\"#%02x%02x%02x\", red, green, blue)\n-end\n-\n-\n-local opacify = function(color, alpha)\n-  if alpha > 1.0 or alpha < 0.0 then return color end\n-  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-end\n-\n--- test();\n-\n-\n-\n-\n-\n--- black\t:\t#181819\n--- bar\tbg\t:\t#2c2e34\n--- bar\tborder\t:\t#2c2e34\n--- red\t:\t#fc5d7c\n--- transparent\t:\t#000000\n--- white\t:\t#e2e2e3\n--- bg1\t:\t#363944\n--- popup\tbg\t:\t#2c2e34\n--- popup\tborder\t:\t#7f8490\n--- orange\t:\t#f39660\n--- bg2\t:\t#414550\n--- grey\t:\t#7f8490\n--- yellow\t:\t#e7c664\n--- magenta\t:\t#b39df3\n--- green\t:\t#9ed072\n--- blue\t:\t#76cce0\n-\n-\n-local black = argb('#181819')\n-local white = argb('#e2e2e3')\n-local red = argb('#fc5d7c')\n-local green = argb('#9ed072')\n-local blue = argb('#76cce0')\n-local yellow = argb(\"#e7c664\")\n-local orange = argb(\"#b39df3\")\n-local magenta = argb(\"#9ed072\")\n-local grey = argb('#55585e')\n-local transparent = 0x00000000\n-DARK = '#090B17'\n-\n-local walpha = function(color, alpha)\n-  if alpha > 1.0 or alpha < 0.0 then return color end\n-  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-end\n-\n-local rtn = {\n-  black = black,\n-  white = white,\n-  red = red,\n-  green = green,\n-  blue = blue,\n-  yellow = yellow,\n-  orange = orange,\n-  magenta = magenta,\n-  grey = grey,\n-  transparent = transparent,\n-\n-  bar = {\n     bg = walpha(argb(DARK), 0.01),\n     -- bg = argb(DARK, 0.94), \n     border = argb('#2c2e34'),\n   },\n"
                },
                {
                    "date": 1720019573695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+print('hello')\n+\n+local serpent = require(\"serpent\")\n+local bit = require(\"bit\")\n+-- local color = require(\"convertcolor\")\n+\n+-- print(\"==dd>\", )\n+-- local bit = bit32\n+\n+-- Function to convert RGB and Hex to ARGB\n+local function rgb_hex_to_argb(r, g, b, alpha)\n+  -- Default alpha to 255 (opaque) if not provided\n+  alpha = alpha or 255\n+\n+  -- Construct ARGB value\n+  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n+\n+  return argb\n+end\n+\n+-- Function to parse hex to RGB\n+local function argb(hex, alpha)\n+  alpha = alpha or 1\n+  -- local alphahex = (alpha / 1) *\n+  hex = hex:gsub(\"#\", \"\")\n+  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n+  return rgb_hex_to_argb(r, g, b, alpha * 255)\n+end\n+\n+local function argb_explode(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local alpha = bit.rshift(argb, 24)\n+  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n+  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n+  local blue = bit.band(argb, 0xFF)\n+\n+  -- Format RGB string\n+  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n+\n+  -- -- Format Hex string\n+  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n+\n+  return red, green, blue, alpha;\n+end\n+\n+local function argb_to_hex(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local red, green, blue, alpha = argb_explode(argb)\n+  -- Format RGB string\n+  return string.format(\"#%02x%02x%02x\", red, green, blue)\n+end\n+\n+\n+local opacify = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+end\n+\n+-- test();\n+\n+\n+\n+\n+\n+-- black\t:\t#181819\n+-- bar\tbg\t:\t#2c2e34\n+-- bar\tborder\t:\t#2c2e34\n+-- red\t:\t#fc5d7c\n+-- transparent\t:\t#000000\n+-- white\t:\t#e2e2e3\n+-- bg1\t:\t#363944\n+-- popup\tbg\t:\t#2c2e34\n+-- popup\tborder\t:\t#7f8490\n+-- orange\t:\t#f39660\n+-- bg2\t:\t#414550\n+-- grey\t:\t#7f8490\n+-- yellow\t:\t#e7c664\n+-- magenta\t:\t#b39df3\n+-- green\t:\t#9ed072\n+-- blue\t:\t#76cce0\n+\n+\n+local black = argb('#181819')\n+local white = argb('#e2e2e3')\n+local red = argb('#fc5d7c')\n+local green = argb('#9ed072')\n+local blue = argb('#76cce0')\n+local yellow = argb(\"#e7c664\")\n+local orange = argb(\"#b39df3\")\n+local magenta = argb(\"#9ed072\")\n+local grey = argb('#55585e')\n+local transparent = 0x00000000\n+DARK = '#090B17'\n+\n+local walpha = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+end\n+\n+local rtn = {\n+  black = black,\n+  white = white,\n+  red = red,\n+  green = green,\n+  blue = blue,\n+  yellow = yellow,\n+  orange = orange,\n+  magenta = magenta,\n+  grey = grey,\n+  transparent = transparent,\n+\n+  bar = {\n+    bg = argb(DARK, 0.01), \n+    -- bg = argb(DARK, 0.94), \n+    border = argb('#2c2e34'),\n+  },\n+  popup = {\n+    bg = argb(\"#7f8490\"),\n+    border = argb(\"#7f8490\"),\n+  },\n+  bg1 = argb('#23262E'),\n+  bg2 = argb('#23262E'),\n+\n+  with_alpha = function(color, alpha)\n+    if alpha > 1.0 or alpha < 0.0 then return color end\n+    return (color & white) | (math.floor(alpha * 255.0) << 24)\n+  end,\n+}\n+print(\"==\", argb_to_hex(0x00ffffff))\n+-- print(\"==\", argb_to_hex(0xff7f8490))\n+-- lua dump table to console\n+print('================')\n+print(serpent.block(rtn, { sparse }))\n+print('================')\n+\n+\n+-- for key, value in pairs(rtn) do\n+--   if type(value) == 'table' then\n+--     for k, v in pairs(value) do\n+--       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n+--     end\n+--   elseif (type(value) == 'number') then\n+--     print(key, \":\", argb_to_hex(value))\n+--   end\n+-- end\n+\n+return rtn\n"
                },
                {
                    "date": 1720019604309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+print('hello')\n+\n+local serpent = require(\"serpent\")\n+local bit = require(\"bit\")\n+-- local color = require(\"convertcolor\")\n+\n+-- print(\"==dd>\", )\n+-- local bit = bit32\n+\n+-- Function to convert RGB and Hex to ARGB\n+local function rgb_hex_to_argb(r, g, b, alpha)\n+  -- Default alpha to 255 (opaque) if not provided\n+  alpha = alpha or 255\n+\n+  -- Construct ARGB value\n+  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n+\n+  return argb\n+end\n+\n+-- Function to parse hex to RGB\n+local function argb(hex, alpha)\n+  alpha = alpha or 1\n+  -- local alphahex = (alpha / 1) *\n+  hex = hex:gsub(\"#\", \"\")\n+  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n+  return rgb_hex_to_argb(r, g, b, alpha * 255)\n+end\n+\n+local function argb_explode(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local alpha = bit.rshift(argb, 24)\n+  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n+  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n+  local blue = bit.band(argb, 0xFF)\n+\n+  -- Format RGB string\n+  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n+\n+  -- -- Format Hex string\n+  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n+\n+  return red, green, blue, alpha;\n+end\n+\n+local function argb_to_hex(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local red, green, blue, alpha = argb_explode(argb)\n+  -- Format RGB string\n+  return string.format(\"#%02x%02x%02x\", red, green, blue)\n+end\n+\n+\n+local opacify = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+end\n+\n+-- test();\n+\n+\n+\n+\n+\n+-- black\t:\t#181819\n+-- bar\tbg\t:\t#2c2e34\n+-- bar\tborder\t:\t#2c2e34\n+-- red\t:\t#fc5d7c\n+-- transparent\t:\t#000000\n+-- white\t:\t#e2e2e3\n+-- bg1\t:\t#363944\n+-- popup\tbg\t:\t#2c2e34\n+-- popup\tborder\t:\t#7f8490\n+-- orange\t:\t#f39660\n+-- bg2\t:\t#414550\n+-- grey\t:\t#7f8490\n+-- yellow\t:\t#e7c664\n+-- magenta\t:\t#b39df3\n+-- green\t:\t#9ed072\n+-- blue\t:\t#76cce0\n+\n+\n+local black = argb('#181819')\n+local white = argb('#e2e2e3')\n+local red = argb('#fc5d7c')\n+local green = argb('#9ed072')\n+local blue = argb('#76cce0')\n+local yellow = argb(\"#e7c664\")\n+local orange = argb(\"#b39df3\")\n+local magenta = argb(\"#9ed072\")\n+local grey = argb('#55585e')\n+local transparent = 0x00000000\n+DARK = '#090B17'\n+\n+local walpha = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+end\n+\n+local rtn = {\n+  black = black,\n+  white = white,\n+  red = red,\n+  green = green,\n+  blue = blue,\n+  yellow = yellow,\n+  orange = orange,\n+  magenta = magenta,\n+  grey = grey,\n+  transparent = transparent,\n+\n+  bar = {\n+    bg = argb(DARK, 0.01), \n+    -- bg = argb(DARK, 0.94), \n+    border = argb(DARK, 0.05),\n+  },\n+  popup = {\n+    bg = argb(\"#7f8490\"),\n+    border = argb(\"#7f8490\"),\n+  },\n+  bg1 = argb('#23262E'),\n+  bg2 = argb('#23262E'),\n+\n+  with_alpha = function(color, alpha)\n+    if alpha > 1.0 or alpha < 0.0 then return color end\n+    return (color & white) | (math.floor(alpha * 255.0) << 24)\n+  end,\n+}\n+print(\"==\", argb_to_hex(0x00ffffff))\n+-- print(\"==\", argb_to_hex(0xff7f8490))\n+-- lua dump table to console\n+print('================')\n+print(serpent.block(rtn, { sparse }))\n+print('================')\n+\n+\n+-- for key, value in pairs(rtn) do\n+--   if type(value) == 'table' then\n+--     for k, v in pairs(value) do\n+--       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n+--     end\n+--   elseif (type(value) == 'number') then\n+--     print(key, \":\", argb_to_hex(value))\n+--   end\n+-- end\n+\n+return rtn\n"
                },
                {
                    "date": 1720019623203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n   bg2 = argb('#23262E'),\n \n   with_alpha = function(color, alpha)\n     if alpha > 1.0 or alpha < 0.0 then return color end\n-    return (color & white) | (math.floor(alpha * 255.0) << 24)\n+    return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n   end,\n }\n print(\"==\", argb_to_hex(0x00ffffff))\n -- print(\"==\", argb_to_hex(0xff7f8490))\n@@ -144,298 +144,4 @@\n --   end\n -- end\n \n return rtn\n-print('hello')\n-\n-local serpent = require(\"serpent\")\n-local bit = require(\"bit\")\n--- local color = require(\"convertcolor\")\n-\n--- print(\"==dd>\", )\n--- local bit = bit32\n-\n--- Function to convert RGB and Hex to ARGB\n-local function rgb_hex_to_argb(r, g, b, alpha)\n-  -- Default alpha to 255 (opaque) if not provided\n-  alpha = alpha or 255\n-\n-  -- Construct ARGB value\n-  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n-\n-  return argb\n-end\n-\n--- Function to parse hex to RGB\n-local function argb(hex, alpha)\n-  alpha = alpha or 1\n-  -- local alphahex = (alpha / 1) *\n-  hex = hex:gsub(\"#\", \"\")\n-  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n-  return rgb_hex_to_argb(r, g, b, alpha * 255)\n-end\n-\n-local function argb_explode(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local alpha = bit.rshift(argb, 24)\n-  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n-  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n-  local blue = bit.band(argb, 0xFF)\n-\n-  -- Format RGB string\n-  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n-\n-  -- -- Format Hex string\n-  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n-\n-  return red, green, blue, alpha;\n-end\n-\n-local function argb_to_hex(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local red, green, blue, alpha = argb_explode(argb)\n-  -- Format RGB string\n-  return string.format(\"#%02x%02x%02x\", red, green, blue)\n-end\n-\n-\n-local opacify = function(color, alpha)\n-  if alpha > 1.0 or alpha < 0.0 then return color end\n-  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-end\n-\n--- test();\n-\n-\n-\n-\n-\n--- black\t:\t#181819\n--- bar\tbg\t:\t#2c2e34\n--- bar\tborder\t:\t#2c2e34\n--- red\t:\t#fc5d7c\n--- transparent\t:\t#000000\n--- white\t:\t#e2e2e3\n--- bg1\t:\t#363944\n--- popup\tbg\t:\t#2c2e34\n--- popup\tborder\t:\t#7f8490\n--- orange\t:\t#f39660\n--- bg2\t:\t#414550\n--- grey\t:\t#7f8490\n--- yellow\t:\t#e7c664\n--- magenta\t:\t#b39df3\n--- green\t:\t#9ed072\n--- blue\t:\t#76cce0\n-\n-\n-local black = argb('#181819')\n-local white = argb('#e2e2e3')\n-local red = argb('#fc5d7c')\n-local green = argb('#9ed072')\n-local blue = argb('#76cce0')\n-local yellow = argb(\"#e7c664\")\n-local orange = argb(\"#b39df3\")\n-local magenta = argb(\"#9ed072\")\n-local grey = argb('#55585e')\n-local transparent = 0x00000000\n-DARK = '#090B17'\n-\n-local walpha = function(color, alpha)\n-  if alpha > 1.0 or alpha < 0.0 then return color end\n-  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-end\n-\n-local rtn = {\n-  black = black,\n-  white = white,\n-  red = red,\n-  green = green,\n-  blue = blue,\n-  yellow = yellow,\n-  orange = orange,\n-  magenta = magenta,\n-  grey = grey,\n-  transparent = transparent,\n-\n-  bar = {\n-    bg = argb(DARK, 0.01), \n-    -- bg = argb(DARK, 0.94), \n-    border = argb('#2c2e34'),\n-  },\n-  popup = {\n-    bg = argb(\"#7f8490\"),\n-    border = argb(\"#7f8490\"),\n-  },\n-  bg1 = argb('#23262E'),\n-  bg2 = argb('#23262E'),\n-\n-  with_alpha = function(color, alpha)\n-    if alpha > 1.0 or alpha < 0.0 then return color end\n-    return (color & white) | (math.floor(alpha * 255.0) << 24)\n-  end,\n-}\n-print(\"==\", argb_to_hex(0x00ffffff))\n--- print(\"==\", argb_to_hex(0xff7f8490))\n--- lua dump table to console\n-print('================')\n-print(serpent.block(rtn, { sparse }))\n-print('================')\n-\n-\n--- for key, value in pairs(rtn) do\n---   if type(value) == 'table' then\n---     for k, v in pairs(value) do\n---       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n---     end\n---   elseif (type(value) == 'number') then\n---     print(key, \":\", argb_to_hex(value))\n---   end\n--- end\n-\n-return rtn\n-print('hello')\n-\n-local serpent = require(\"serpent\")\n-local bit = require(\"bit\")\n--- local color = require(\"convertcolor\")\n-\n--- print(\"==dd>\", )\n--- local bit = bit32\n-\n--- Function to convert RGB and Hex to ARGB\n-local function rgb_hex_to_argb(r, g, b, alpha)\n-  -- Default alpha to 255 (opaque) if not provided\n-  alpha = alpha or 255\n-\n-  -- Construct ARGB value\n-  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n-\n-  return argb\n-end\n-\n--- Function to parse hex to RGB\n-local function argb(hex, alpha)\n-  alpha = alpha or 1\n-  -- local alphahex = (alpha / 1) *\n-  hex = hex:gsub(\"#\", \"\")\n-  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n-  return rgb_hex_to_argb(r, g, b, alpha * 255)\n-end\n-\n-local function argb_explode(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local alpha = bit.rshift(argb, 24)\n-  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n-  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n-  local blue = bit.band(argb, 0xFF)\n-\n-  -- Format RGB string\n-  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n-\n-  -- -- Format Hex string\n-  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n-\n-  return red, green, blue, alpha;\n-end\n-\n-local function argb_to_hex(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local red, green, blue, alpha = argb_explode(argb)\n-  -- Format RGB string\n-  return string.format(\"#%02x%02x%02x\", red, green, blue)\n-end\n-\n-\n-local opacify = function(color, alpha)\n-  if alpha > 1.0 or alpha < 0.0 then return color end\n-  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-end\n-\n--- test();\n-\n-\n-\n-\n-\n--- black\t:\t#181819\n--- bar\tbg\t:\t#2c2e34\n--- bar\tborder\t:\t#2c2e34\n--- red\t:\t#fc5d7c\n--- transparent\t:\t#000000\n--- white\t:\t#e2e2e3\n--- bg1\t:\t#363944\n--- popup\tbg\t:\t#2c2e34\n--- popup\tborder\t:\t#7f8490\n--- orange\t:\t#f39660\n--- bg2\t:\t#414550\n--- grey\t:\t#7f8490\n--- yellow\t:\t#e7c664\n--- magenta\t:\t#b39df3\n--- green\t:\t#9ed072\n--- blue\t:\t#76cce0\n-\n-\n-local black = argb('#181819')\n-local white = argb('#e2e2e3')\n-local red = argb('#fc5d7c')\n-local green = argb('#9ed072')\n-local blue = argb('#76cce0')\n-local yellow = argb(\"#e7c664\")\n-local orange = argb(\"#b39df3\")\n-local magenta = argb(\"#9ed072\")\n-local grey = argb('#55585e')\n-local transparent = 0x00000000\n-DARK = '#090B17'\n-\n-local walpha = function(color, alpha)\n-  if alpha > 1.0 or alpha < 0.0 then return color end\n-  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-end\n-\n-local rtn = {\n-  black = black,\n-  white = white,\n-  red = red,\n-  green = green,\n-  blue = blue,\n-  yellow = yellow,\n-  orange = orange,\n-  magenta = magenta,\n-  grey = grey,\n-  transparent = transparent,\n-\n-  bar = {\n-    bg = walpha(argb(DARK), 0.01),\n-    -- bg = argb(DARK, 0.94), \n-    border = argb('#2c2e34'),\n-  },\n-  popup = {\n-    bg = argb(\"#7f8490\"),\n-    border = argb(\"#7f8490\"),\n-  },\n-  bg1 = argb('#23262E'),\n-  bg2 = argb('#23262E'),\n-\n-  with_alpha = function(color, alpha)\n-    if alpha > 1.0 or alpha < 0.0 then return color end\n-    return (color & white) | (math.floor(alpha * 255.0) << 24)\n-  end,\n-}\n-print(\"==\", argb_to_hex(0x00ffffff))\n--- print(\"==\", argb_to_hex(0xff7f8490))\n--- lua dump table to console\n-print('================')\n-print(serpent.block(rtn, { sparse }))\n-print('================')\n-\n-\n--- for key, value in pairs(rtn) do\n---   if type(value) == 'table' then\n---     for k, v in pairs(value) do\n---       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n---     end\n---   elseif (type(value) == 'number') then\n---     print(key, \":\", argb_to_hex(value))\n---   end\n--- end\n-\n-return rtn\n"
                },
                {
                    "date": 1720019633588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,14 +125,8 @@\n     if alpha > 1.0 or alpha < 0.0 then return color end\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n   end,\n }\n-print(\"==\", argb_to_hex(0x00ffffff))\n--- print(\"==\", argb_to_hex(0xff7f8490))\n--- lua dump table to console\n-print('================')\n-print(serpent.block(rtn, { sparse }))\n-print('================')\n \n \n -- for key, value in pairs(rtn) do\n --   if type(value) == 'table' then\n"
                },
                {
                    "date": 1720019647288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,141 @@\n+print('hello')\n+\n+local serpent = require(\"serpent\")\n+local bit = require(\"bit\")\n+-- local color = require(\"convertcolor\")\n+\n+-- print(\"==dd>\", )\n+-- local bit = bit32\n+\n+-- Function to convert RGB and Hex to ARGB\n+local function rgb_hex_to_argb(r, g, b, alpha)\n+  -- Default alpha to 255 (opaque) if not provided\n+  alpha = alpha or 255\n+\n+  -- Construct ARGB value\n+  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n+\n+  return argb\n+end\n+\n+-- Function to parse hex to RGB\n+local function argb(hex, alpha)\n+  alpha = alpha or 1\n+  -- local alphahex = (alpha / 1) *\n+  hex = hex:gsub(\"#\", \"\")\n+  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n+  return rgb_hex_to_argb(r, g, b, alpha * 255)\n+end\n+\n+local function argb_explode(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local alpha = bit.rshift(argb, 24)\n+  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n+  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n+  local blue = bit.band(argb, 0xFF)\n+\n+  -- Format RGB string\n+  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n+\n+  -- -- Format Hex string\n+  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n+\n+  return red, green, blue, alpha;\n+end\n+\n+local function argb_to_hex(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local red, green, blue, alpha = argb_explode(argb)\n+  -- Format RGB string\n+  return string.format(\"#%02x%02x%02x\", red, green, blue)\n+end\n+\n+\n+local opacify = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+end\n+\n+-- test();\n+\n+\n+\n+\n+\n+-- black\t:\t#181819\n+-- bar\tbg\t:\t#2c2e34\n+-- bar\tborder\t:\t#2c2e34\n+-- red\t:\t#fc5d7c\n+-- transparent\t:\t#000000\n+-- white\t:\t#e2e2e3\n+-- bg1\t:\t#363944\n+-- popup\tbg\t:\t#2c2e34\n+-- popup\tborder\t:\t#7f8490\n+-- orange\t:\t#f39660\n+-- bg2\t:\t#414550\n+-- grey\t:\t#7f8490\n+-- yellow\t:\t#e7c664\n+-- magenta\t:\t#b39df3\n+-- green\t:\t#9ed072\n+-- blue\t:\t#76cce0\n+\n+\n+local black = argb('#181819')\n+local white = argb('#e2e2e3')\n+local red = argb('#fc5d7c')\n+local green = argb('#9ed072')\n+local blue = argb('#76cce0')\n+local yellow = argb(\"#e7c664\")\n+local orange = argb(\"#b39df3\")\n+local magenta = argb(\"#9ed072\")\n+local grey = argb('#55585e')\n+local transparent = 0x00000000\n+DARK = '#090B17'\n+\n+local walpha = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+end\n+\n+local rtn = {\n+  black = black,\n+  white = white,\n+  red = red,\n+  green = green,\n+  blue = blue,\n+  yellow = yellow,\n+  orange = orange,\n+  magenta = magenta,\n+  grey = grey,\n+  transparent = transparent,\n+\n+  bar = {\n+    bg = argb(DARK, 0.01), \n+    -- bg = argb(DARK, 0.94), \n+    border = argb(DARK, 0.05),\n+  },\n+  popup = {\n+    bg = argb(\"#7f8490\"),\n+    border = argb(\"#7f8490\"),\n+  },\n+  bg1 = argb(DARK, 0.01),\n+  bg2 = argb(DARK, 0.01),\n+\n+  with_alpha = function(color, alpha)\n+    if alpha > 1.0 or alpha < 0.0 then return color end\n+    return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+  end,\n+}\n+\n+\n+-- for key, value in pairs(rtn) do\n+--   if type(value) == 'table' then\n+--     for k, v in pairs(value) do\n+--       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n+--     end\n+--   elseif (type(value) == 'number') then\n+--     print(key, \":\", argb_to_hex(value))\n+--   end\n+-- end\n+\n+return rtn\n"
                },
                {
                    "date": 1720019660137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,10 +117,10 @@\n   popup = {\n     bg = argb(\"#7f8490\"),\n     border = argb(\"#7f8490\"),\n   },\n-  bg1 = argb(DARK, 0.01),\n-  bg2 = argb(DARK, 0.01),\n+  bg1 = argb(DARK, 0.1),\n+  bg2 = argb(DARK, 0.1),\n \n   with_alpha = function(color, alpha)\n     if alpha > 1.0 or alpha < 0.0 then return color end\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n@@ -138,145 +138,4 @@\n --   end\n -- end\n \n return rtn\n-print('hello')\n-\n-local serpent = require(\"serpent\")\n-local bit = require(\"bit\")\n--- local color = require(\"convertcolor\")\n-\n--- print(\"==dd>\", )\n--- local bit = bit32\n-\n--- Function to convert RGB and Hex to ARGB\n-local function rgb_hex_to_argb(r, g, b, alpha)\n-  -- Default alpha to 255 (opaque) if not provided\n-  alpha = alpha or 255\n-\n-  -- Construct ARGB value\n-  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n-\n-  return argb\n-end\n-\n--- Function to parse hex to RGB\n-local function argb(hex, alpha)\n-  alpha = alpha or 1\n-  -- local alphahex = (alpha / 1) *\n-  hex = hex:gsub(\"#\", \"\")\n-  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n-  return rgb_hex_to_argb(r, g, b, alpha * 255)\n-end\n-\n-local function argb_explode(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local alpha = bit.rshift(argb, 24)\n-  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n-  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n-  local blue = bit.band(argb, 0xFF)\n-\n-  -- Format RGB string\n-  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n-\n-  -- -- Format Hex string\n-  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n-\n-  return red, green, blue, alpha;\n-end\n-\n-local function argb_to_hex(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local red, green, blue, alpha = argb_explode(argb)\n-  -- Format RGB string\n-  return string.format(\"#%02x%02x%02x\", red, green, blue)\n-end\n-\n-\n-local opacify = function(color, alpha)\n-  if alpha > 1.0 or alpha < 0.0 then return color end\n-  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-end\n-\n--- test();\n-\n-\n-\n-\n-\n--- black\t:\t#181819\n--- bar\tbg\t:\t#2c2e34\n--- bar\tborder\t:\t#2c2e34\n--- red\t:\t#fc5d7c\n--- transparent\t:\t#000000\n--- white\t:\t#e2e2e3\n--- bg1\t:\t#363944\n--- popup\tbg\t:\t#2c2e34\n--- popup\tborder\t:\t#7f8490\n--- orange\t:\t#f39660\n--- bg2\t:\t#414550\n--- grey\t:\t#7f8490\n--- yellow\t:\t#e7c664\n--- magenta\t:\t#b39df3\n--- green\t:\t#9ed072\n--- blue\t:\t#76cce0\n-\n-\n-local black = argb('#181819')\n-local white = argb('#e2e2e3')\n-local red = argb('#fc5d7c')\n-local green = argb('#9ed072')\n-local blue = argb('#76cce0')\n-local yellow = argb(\"#e7c664\")\n-local orange = argb(\"#b39df3\")\n-local magenta = argb(\"#9ed072\")\n-local grey = argb('#55585e')\n-local transparent = 0x00000000\n-DARK = '#090B17'\n-\n-local walpha = function(color, alpha)\n-  if alpha > 1.0 or alpha < 0.0 then return color end\n-  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-end\n-\n-local rtn = {\n-  black = black,\n-  white = white,\n-  red = red,\n-  green = green,\n-  blue = blue,\n-  yellow = yellow,\n-  orange = orange,\n-  magenta = magenta,\n-  grey = grey,\n-  transparent = transparent,\n-\n-  bar = {\n-    bg = argb(DARK, 0.01), \n-    -- bg = argb(DARK, 0.94), \n-    border = argb(DARK, 0.05),\n-  },\n-  popup = {\n-    bg = argb(\"#7f8490\"),\n-    border = argb(\"#7f8490\"),\n-  },\n-  bg1 = argb('#23262E'),\n-  bg2 = argb('#23262E'),\n-\n-  with_alpha = function(color, alpha)\n-    if alpha > 1.0 or alpha < 0.0 then return color end\n-    return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-  end,\n-}\n-\n-\n--- for key, value in pairs(rtn) do\n---   if type(value) == 'table' then\n---     for k, v in pairs(value) do\n---       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n---     end\n---   elseif (type(value) == 'number') then\n---     print(key, \":\", argb_to_hex(value))\n---   end\n--- end\n-\n-return rtn\n"
                },
                {
                    "date": 1720019673555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,10 +117,10 @@\n   popup = {\n     bg = argb(\"#7f8490\"),\n     border = argb(\"#7f8490\"),\n   },\n-  bg1 = argb(DARK, 0.1),\n-  bg2 = argb(DARK, 0.1),\n+  bg1 = walpha(argb(DARK), 0.1),\n+  bg2 = walpha(argb(DARK), 0.1),\n \n   with_alpha = function(color, alpha)\n     if alpha > 1.0 or alpha < 0.0 then return color end\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n"
                },
                {
                    "date": 1720019742684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n \n   bar = {\n     bg = argb(DARK, 0.01), \n     -- bg = argb(DARK, 0.94), \n-    border = argb(DARK, 0.05),\n+    border = argb(red, 0.05),\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n     border = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019747764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n \n   bar = {\n     bg = argb(DARK, 0.01), \n     -- bg = argb(DARK, 0.94), \n-    border = argb(red, 0.05),\n+    border = red,\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n     border = argb(\"#7f8490\"),\n"
                },
                {
                    "date": 1720019758604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,141 @@\n+print('hello')\n+\n+local serpent = require(\"serpent\")\n+local bit = require(\"bit\")\n+-- local color = require(\"convertcolor\")\n+\n+-- print(\"==dd>\", )\n+-- local bit = bit32\n+\n+-- Function to convert RGB and Hex to ARGB\n+local function rgb_hex_to_argb(r, g, b, alpha)\n+  -- Default alpha to 255 (opaque) if not provided\n+  alpha = alpha or 255\n+\n+  -- Construct ARGB value\n+  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n+\n+  return argb\n+end\n+\n+-- Function to parse hex to RGB\n+local function argb(hex, alpha)\n+  alpha = alpha or 1\n+  -- local alphahex = (alpha / 1) *\n+  hex = hex:gsub(\"#\", \"\")\n+  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n+  return rgb_hex_to_argb(r, g, b, alpha * 255)\n+end\n+\n+local function argb_explode(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local alpha = bit.rshift(argb, 24)\n+  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n+  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n+  local blue = bit.band(argb, 0xFF)\n+\n+  -- Format RGB string\n+  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n+\n+  -- -- Format Hex string\n+  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n+\n+  return red, green, blue, alpha;\n+end\n+\n+local function argb_to_hex(argb)\n+  -- Extract the alpha, red, green, and blue components\n+  local red, green, blue, alpha = argb_explode(argb)\n+  -- Format RGB string\n+  return string.format(\"#%02x%02x%02x\", red, green, blue)\n+end\n+\n+\n+local opacify = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+end\n+\n+-- test();\n+\n+\n+\n+\n+\n+-- black\t:\t#181819\n+-- bar\tbg\t:\t#2c2e34\n+-- bar\tborder\t:\t#2c2e34\n+-- red\t:\t#fc5d7c\n+-- transparent\t:\t#000000\n+-- white\t:\t#e2e2e3\n+-- bg1\t:\t#363944\n+-- popup\tbg\t:\t#2c2e34\n+-- popup\tborder\t:\t#7f8490\n+-- orange\t:\t#f39660\n+-- bg2\t:\t#414550\n+-- grey\t:\t#7f8490\n+-- yellow\t:\t#e7c664\n+-- magenta\t:\t#b39df3\n+-- green\t:\t#9ed072\n+-- blue\t:\t#76cce0\n+\n+\n+local black = argb('#181819')\n+local white = argb('#e2e2e3')\n+local red = argb('#fc5d7c')\n+local green = argb('#9ed072')\n+local blue = argb('#76cce0')\n+local yellow = argb(\"#e7c664\")\n+local orange = argb(\"#b39df3\")\n+local magenta = argb(\"#9ed072\")\n+local grey = argb('#55585e')\n+local transparent = 0x00000000\n+DARK = '#090B17'\n+\n+local walpha = function(color, alpha)\n+  if alpha > 1.0 or alpha < 0.0 then return color end\n+  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+end\n+\n+local rtn = {\n+  black = black,\n+  white = white,\n+  red = red,\n+  green = green,\n+  blue = blue,\n+  yellow = yellow,\n+  orange = orange,\n+  magenta = magenta,\n+  grey = grey,\n+  transparent = transparent,\n+\n+  bar = {\n+    bg = argb(DARK, 0.01), \n+    -- bg = argb(DARK, 0.94), \n+    border = green,\n+  },\n+  popup = {\n+    bg = argb(\"#7f8490\"),\n+    border = argb(\"#7f8490\"),\n+  },\n+  bg1 = walpha(argb(DARK), 0.1),\n+  bg2 = walpha(argb(DARK), 0.1),\n+\n+  with_alpha = function(color, alpha)\n+    if alpha > 1.0 or alpha < 0.0 then return color end\n+    return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n+  end,\n+}\n+\n+\n+-- for key, value in pairs(rtn) do\n+--   if type(value) == 'table' then\n+--     for k, v in pairs(value) do\n+--       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n+--     end\n+--   elseif (type(value) == 'number') then\n+--     print(key, \":\", argb_to_hex(value))\n+--   end\n+-- end\n+\n+return rtn\n"
                },
                {
                    "date": 1720019773371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,10 +117,10 @@\n   popup = {\n     bg = argb(\"#7f8490\"),\n     border = argb(\"#7f8490\"),\n   },\n-  bg1 = walpha(argb(DARK), 0.1),\n-  bg2 = walpha(argb(DARK), 0.1),\n+  bg1 = walpha(argb(DARK), 0.01),\n+  bg2 = walpha(argb(DARK), 0.01),\n \n   with_alpha = function(color, alpha)\n     if alpha > 1.0 or alpha < 0.0 then return color end\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n@@ -138,145 +138,4 @@\n --   end\n -- end\n \n return rtn\n-print('hello')\n-\n-local serpent = require(\"serpent\")\n-local bit = require(\"bit\")\n--- local color = require(\"convertcolor\")\n-\n--- print(\"==dd>\", )\n--- local bit = bit32\n-\n--- Function to convert RGB and Hex to ARGB\n-local function rgb_hex_to_argb(r, g, b, alpha)\n-  -- Default alpha to 255 (opaque) if not provided\n-  alpha = alpha or 255\n-\n-  -- Construct ARGB value\n-  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n-\n-  return argb\n-end\n-\n--- Function to parse hex to RGB\n-local function argb(hex, alpha)\n-  alpha = alpha or 1\n-  -- local alphahex = (alpha / 1) *\n-  hex = hex:gsub(\"#\", \"\")\n-  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n-  return rgb_hex_to_argb(r, g, b, alpha * 255)\n-end\n-\n-local function argb_explode(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local alpha = bit.rshift(argb, 24)\n-  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n-  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n-  local blue = bit.band(argb, 0xFF)\n-\n-  -- Format RGB string\n-  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n-\n-  -- -- Format Hex string\n-  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n-\n-  return red, green, blue, alpha;\n-end\n-\n-local function argb_to_hex(argb)\n-  -- Extract the alpha, red, green, and blue components\n-  local red, green, blue, alpha = argb_explode(argb)\n-  -- Format RGB string\n-  return string.format(\"#%02x%02x%02x\", red, green, blue)\n-end\n-\n-\n-local opacify = function(color, alpha)\n-  if alpha > 1.0 or alpha < 0.0 then return color end\n-  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-end\n-\n--- test();\n-\n-\n-\n-\n-\n--- black\t:\t#181819\n--- bar\tbg\t:\t#2c2e34\n--- bar\tborder\t:\t#2c2e34\n--- red\t:\t#fc5d7c\n--- transparent\t:\t#000000\n--- white\t:\t#e2e2e3\n--- bg1\t:\t#363944\n--- popup\tbg\t:\t#2c2e34\n--- popup\tborder\t:\t#7f8490\n--- orange\t:\t#f39660\n--- bg2\t:\t#414550\n--- grey\t:\t#7f8490\n--- yellow\t:\t#e7c664\n--- magenta\t:\t#b39df3\n--- green\t:\t#9ed072\n--- blue\t:\t#76cce0\n-\n-\n-local black = argb('#181819')\n-local white = argb('#e2e2e3')\n-local red = argb('#fc5d7c')\n-local green = argb('#9ed072')\n-local blue = argb('#76cce0')\n-local yellow = argb(\"#e7c664\")\n-local orange = argb(\"#b39df3\")\n-local magenta = argb(\"#9ed072\")\n-local grey = argb('#55585e')\n-local transparent = 0x00000000\n-DARK = '#090B17'\n-\n-local walpha = function(color, alpha)\n-  if alpha > 1.0 or alpha < 0.0 then return color end\n-  return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-end\n-\n-local rtn = {\n-  black = black,\n-  white = white,\n-  red = red,\n-  green = green,\n-  blue = blue,\n-  yellow = yellow,\n-  orange = orange,\n-  magenta = magenta,\n-  grey = grey,\n-  transparent = transparent,\n-\n-  bar = {\n-    bg = argb(DARK, 0.01), \n-    -- bg = argb(DARK, 0.94), \n-    border = red,\n-  },\n-  popup = {\n-    bg = argb(\"#7f8490\"),\n-    border = argb(\"#7f8490\"),\n-  },\n-  bg1 = walpha(argb(DARK), 0.1),\n-  bg2 = walpha(argb(DARK), 0.1),\n-\n-  with_alpha = function(color, alpha)\n-    if alpha > 1.0 or alpha < 0.0 then return color end\n-    return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n-  end,\n-}\n-\n-\n--- for key, value in pairs(rtn) do\n---   if type(value) == 'table' then\n---     for k, v in pairs(value) do\n---       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n---     end\n---   elseif (type(value) == 'number') then\n---     print(key, \":\", argb_to_hex(value))\n---   end\n--- end\n-\n-return rtn\n"
                },
                {
                    "date": 1720019782049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,10 +117,10 @@\n   popup = {\n     bg = argb(\"#7f8490\"),\n     border = argb(\"#7f8490\"),\n   },\n-  bg1 = walpha(argb(DARK), 0.01),\n-  bg2 = walpha(argb(DARK), 0.01),\n+  bg1 = transparent,\n+  bg2 = transparent,\n \n   with_alpha = function(color, alpha)\n     if alpha > 1.0 or alpha < 0.0 then return color end\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n"
                },
                {
                    "date": 1720950590834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,11 +109,13 @@\n   grey = grey,\n   transparent = transparent,\n \n   bar = {\n-    bg = argb(DARK, 0.01), \n+    bg = 0xf02c2e34,\n+    border = 0xff2c2e34,\n+    -- bg = argb(DARK, 0.01), \n     -- bg = argb(DARK, 0.94), \n-    border = green,\n+    -- border = green,\n   },\n   popup = {\n     bg = argb(\"#7f8490\"),\n     border = argb(\"#7f8490\"),\n@@ -126,9 +128,27 @@\n     return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n   end,\n }\n \n+-- bar = {\n+--   -    bg = 0xf02c2e34,\n+--   -    border = 0xff2c2e34,\n+--   +    bg = argb(DARK, 0.01),\n+--   +    -- bg = argb(DARK, 0.94),\n+--   +    border = green,\n+--      },\n+--      popup = {\n+--   -    bg = 0xc02c2e34,\n+--   -    border = 0xff7f8490\n+--   +    bg = argb(\"#7f8490\"),\n+--   +    border = argb(\"#7f8490\"),\n+--      },\n+--   -  bg1 = 0xff363944,\n+--   -  bg2 = 0xff414550,\n+--   +  bg1 = transparent,\n+--   +  bg2 = transparent,\n \n+\n -- for key, value in pairs(rtn) do\n --   if type(value) == 'table' then\n --     for k, v in pairs(value) do\n --       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n"
                }
            ],
            "date": 1720016729630,
            "name": "Commit-0",
            "content": "print('hello')\n\n\nlocal bit = require(\"bit\")\nlocal color = require(\"convertcolor\")\n\n-- local bit = bit32\n\n-- Function to convert RGB and Hex to ARGB\nfunction rgb_hex_to_argb(r, g, b, alpha)\n  -- Default alpha to 255 (opaque) if not provided\n  alpha = alpha or 255\n\n  -- Construct ARGB value\n  local argb = bit.lshift(alpha, 24) + bit.lshift(r, 16) + bit.lshift(g, 8) + b\n\n  return argb\nend\n\n-- Function to parse hex to RGB\nfunction argb(hex)\n  hex = hex:gsub(\"#\", \"\")\n  local r, g, b = tonumber(hex:sub(1, 2), 16), tonumber(hex:sub(3, 4), 16), tonumber(hex:sub(5, 6), 16)\n  return rgb_hex_to_argb(r, g, b)\nend\n\nfunction argb_explode(argb)\n  -- Extract the alpha, red, green, and blue components\n  local alpha = bit.rshift(argb, 24)\n  local red = bit.band(bit.rshift(argb, 16), 0xFF)\n  local green = bit.band(bit.rshift(argb, 8), 0xFF)\n  local blue = bit.band(argb, 0xFF)\n\n  -- Format RGB string\n  -- local rgb = string.format(\"rgb(%d, %d, %d)\", red, green, blue)\n\n  -- -- Format Hex string\n  -- local hex = string.format(\"#%02x%02x%02x\", red, green, blue)\n\n  return red, green, blue, alpha;\nend\n\nfunction argb_to_hex(argb)\n  -- Extract the alpha, red, green, and blue components\n  local red, green, blue, alpha = argb_explode(argb)\n  -- Format RGB string\n  return string.format(\"#%02x%02x%02x\", red, green, blue)\nend\n\n-- function hex_to_argb(hex)\n-- return  hex_to_rgb(hex)\n\n-- end\n\nfunction test()\n  -- print('hello')\n  print('dd', 0xf02c2e34, 'fff', color.hex('#181819'))\n  --   -- Example usage with RGB\n  --   local r, g, b = 24, 24, 25\n  --   local alpha = 255 -- opaque\n  --   local argb = rgb_hex_to_argb(r, g, b, alpha)\n  --   print(string.format(\"ARGB: 0x%08x\", argb))\n\n  --   -- Example usage with Hex\n  --   local hex = \"#181819\"\n  --   local r, g, b = hex_to_rgb(hex)\n  --   argb = rgb_hex_to_argb(r, g, b, alpha)\n  --   print(string.format(\"ARGB from hex: 0x%08x\", argb))\nend\n\n-- test();\n\n\n\n\n\n-- black\t:\t#181819\n-- bar\tbg\t:\t#2c2e34\n-- bar\tborder\t:\t#2c2e34\n-- red\t:\t#fc5d7c\n-- transparent\t:\t#000000\n-- white\t:\t#e2e2e3\n-- bg1\t:\t#363944\n-- popup\tbg\t:\t#2c2e34\n-- popup\tborder\t:\t#7f8490\n-- orange\t:\t#f39660\n-- bg2\t:\t#414550\n-- grey\t:\t#7f8490\n-- yellow\t:\t#e7c664\n-- magenta\t:\t#b39df3\n-- green\t:\t#9ed072\n-- blue\t:\t#76cce0\n\nlocal black = 0xff181819\nlocal white = 0xffe2e2e3\nlocal red = 0xfffc5d7c\nlocal green = 0xff9ed072\nlocal blue = 0xff76cce0\nlocal yellow = 0xffe7c664\nlocal orange = 0xfff39660\nlocal magenta = 0xffb39df3\nlocal grey = argb('#55585e')\nlocal transparent = 0x00000000\n\nlocal rtn = {\n  black,\n  white,\n  red,\n  green,\n  blue,\n  yellow,\n  orange,\n  magenta,\n  grey,\n  transparent,\n\n  bar = {\n    bg = argb('#262626'),  --0xf02c2e34,\n    border = argb('#2c2e34'),\n  },\n  popup = {\n    bg = 0xc02c2e34,\n    border = 0xff7f8490\n  },\n  bg1 = argb('#2f3031'),\n  bg2 = argb('#2c2f36'),\n\n  with_alpha = function(color, alpha)\n    if alpha > 1.0 or alpha < 0.0 then return color end\n    return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n  end,\n}\n\n\n-- for key, value in pairs(rtn) do\n--   if type(value) == 'table' then\n--     for k, v in pairs(value) do\n--       print(key, k, \":\", 'rgb_hex_to_argb('n argb_explode(v))\n--     end\n--   elseif (type(value) == 'number') then\n--     print(key, \":\", argb_to_hex(value))\n--   end\n-- end\n\nreturn rtn\n"
        }
    ]
}