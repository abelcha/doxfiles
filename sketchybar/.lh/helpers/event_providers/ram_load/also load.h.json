{
    "sourceFile": "helpers/event_providers/ram_load/also load.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1716802385585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1716802385585,
            "name": "Commit-0",
            "content": "#include <math.h>\n#include <stdio.h>\n#include <string.h>\n#include <net/if.h>\n#include <net/if_mib.h>\n#include <sys/select.h>\n#include <sys/sysctl.h>\n\nstatic char unit_str[3][6] = { { \" Bps\" }, { \"KBps\" }, { \"MBps\" }, };\n\nenum unit {\n  UNIT_BPS,\n  UNIT_KBPS,\n  UNIT_MBPS\n};\nstruct network {\n  uint32_t row;\n  struct ifmibdata data;\n  struct timeval tv_nm1, tv_n, tv_delta;\n\n  int up;\n  int down;\n  enum unit up_unit, down_unit;\n};\n\nstatic inline void ifdata(uint32_t net_row, struct ifmibdata* data) {\n\tstatic size_t size = sizeof(struct ifmibdata);\n  static int32_t data_option[] = { CTL_NET, PF_LINK, NETLINK_GENERIC, IFMIB_IFDATA, 0, IFDATA_GENERAL };\n  data_option[4] = net_row;\n  sysctl(data_option, 6, data, &size, NULL, 0);\n}\n\nstatic inline void network_init(struct network* net, char* ifname) {\n  memset(net, 0, sizeof(struct network));\n\n  static int count_option[] = { CTL_NET, PF_LINK, NETLINK_GENERIC, IFMIB_SYSTEM, IFMIB_IFCOUNT };\n  uint32_t interface_count = 0;\n  size_t size = sizeof(uint32_t);\n  sysctl(count_option, 5, &interface_count, &size, NULL, 0);\n\n  for (int i = 0; i < interface_count; i++) {\n    ifdata(i, &net->data);\n    if (strcmp(net->data.ifmd_name, ifname) == 0) {\n      net->row = i;\n      break;\n    }\n  }\n}\n\n// static inline void network_update(struct network* net) {\n//   gettimeofday(&net->tv_n, NULL);\n//   timersub(&net->tv_n, &net->tv_nm1, &net->tv_delta);\n//   net->tv_nm1 = net->tv_n;\n\n//   uint64_t ibytes_nm1 = net->data.ifmd_data.ifi_ibytes;\n//   uint64_t obytes_nm1 = net->data.ifmd_data.ifi_obytes;\n//   ifdata(net->row, &net->data);\n\n//   double time_scale = (net->tv_delta.tv_sec + 1e-6*net->tv_delta.tv_usec);\n//   if (time_scale < 1e-6 || time_scale > 1e2) return;\n//   double delta_ibytes = (double)(net->data.ifmd_data.ifi_ibytes - ibytes_nm1)\n//                         / time_scale;\n//   double delta_obytes = (double)(net->data.ifmd_data.ifi_obytes - obytes_nm1)\n//                         / time_scale;\n\n//   double exponent_ibytes = log10(delta_ibytes);\n//   double exponent_obytes = log10(delta_obytes);\n\n//   if (exponent_ibytes < 3) {\n//     net->down_unit = UNIT_BPS;\n//     net->down = delta_ibytes;\n//   } else if (exponent_ibytes < 6) {\n//     net->down_unit = UNIT_KBPS;\n//     net->down = delta_ibytes / 1000.0;\n//   } else if (exponent_ibytes < 9) {\n//     net->down_unit = UNIT_MBPS;\n//     net->down = delta_ibytes / 1000000.0;\n//   }\n\n//   if (exponent_obytes < 3) {\n//     net->up_unit = UNIT_BPS;\n//     net->up = delta_obytes;\n//   } else if (exponent_obytes < 6) {\n//     net->up_unit = UNIT_KBPS;\n//     net->up = delta_obytes / 1000.0;\n//   } else if (exponent_obytes < 9) {\n//     net->up_unit = UNIT_MBPS;\n//     net->up = delta_obytes / 1000000.0;\n//   }\n// }\n"
        }
    ]
}