{
    "sourceFile": "items/spaces.lua",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 230,
            "patches": [
                {
                    "date": 1716803101415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716803107025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n local app_icons = require(\"helpers.app_icons\")\n \n local spaces = {}\n \n-for i = 1, 5, 1 do\n+for i = 1, 10, 1 do\n   local space = sbar.add(\"space\", \"space.\" .. i, {\n     space = i,\n     icon = {\n       font = { family = settings.font.numbers },\n"
                },
                {
                    "date": 1716803206181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,18 +4,18 @@\n local app_icons = require(\"helpers.app_icons\")\n \n local spaces = {}\n \n-for i = 1, 10, 1 do\n+for i = 1, 5, 1 do\n   local space = sbar.add(\"space\", \"space.\" .. i, {\n     space = i,\n     icon = {\n       font = { family = settings.font.numbers },\n       string = i,\n       padding_left = 15,\n       padding_right = 8,\n       color = colors.white,\n-      highlight_color = colors.red,\n+      highlight_color = colors.cyan,\n     },\n     label = {\n       padding_right = 20,\n       color = colors.grey,\n"
                },
                {
                    "date": 1716803215222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n       string = i,\n       padding_left = 15,\n       padding_right = 8,\n       color = colors.white,\n-      highlight_color = colors.cyan,\n+      highlight_color = colors.with_alpha(colors.grey, 0.5),\n     },\n     label = {\n       padding_right = 20,\n       color = colors.grey,\n"
                },
                {
                    "date": 1716803226557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n       string = i,\n       padding_left = 15,\n       padding_right = 8,\n       color = colors.white,\n-      highlight_color = colors.with_alpha(colors.grey, 0.5),\n+      highlight_color = colors.with_alpha(colors.white, 0.5),\n     },\n     label = {\n       padding_right = 20,\n       color = colors.grey,\n"
                },
                {
                    "date": 1716803234224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n       string = i,\n       padding_left = 15,\n       padding_right = 8,\n       color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.5),\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n     },\n     label = {\n       padding_right = 20,\n       color = colors.grey,\n"
                },
                {
                    "date": 1716803240870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n       string = i,\n       padding_left = 15,\n       padding_right = 8,\n       color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n+      -- highlight_color = colors.with_alpha(colors.white, 0.8),\n     },\n     label = {\n       padding_right = 20,\n       color = colors.grey,\n"
                },
                {
                    "date": 1716803246673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n       string = i,\n       padding_left = 15,\n       padding_right = 8,\n       color = colors.white,\n-      -- highlight_color = colors.with_alpha(colors.white, 0.8),\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n     },\n     label = {\n       padding_right = 20,\n       color = colors.grey,\n"
                },
                {
                    "date": 1716803252918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n       font = { family = settings.font.numbers },\n       string = i,\n       padding_left = 15,\n       padding_right = 8,\n-      color = colors.white,\n+      color = colors.,\n       highlight_color = colors.with_alpha(colors.white, 0.8),\n     },\n     label = {\n       padding_right = 20,\n"
                },
                {
                    "date": 1716803362843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n       font = { family = settings.font.numbers },\n       string = i,\n       padding_left = 15,\n       padding_right = 8,\n-      color = colors.,\n+      color = colors.white,\n       highlight_color = colors.with_alpha(colors.white, 0.8),\n     },\n     label = {\n       padding_right = 20,\n@@ -123,8 +123,9 @@\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   local icon_line = \"\"\n   local no_app = true\n+  print('===whatever', env.INFO.apps)\n   for app, count in pairs(env.INFO.apps) do\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n"
                },
                {
                    "date": 1716803391515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   local icon_line = \"\"\n   local no_app = true\n-  print('===whatever', env.INFO.apps)\n+  print('===whatever', dump(env.INFO.apps))\n   for app, count in pairs(env.INFO.apps) do\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n"
                },
                {
                    "date": 1716803441979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,16 @@\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   local icon_line = \"\"\n   local no_app = true\n-  print('===whatever', dump(env.INFO.apps))\n+  print('===whatever', env.INFO.apps)\n+  -- print table content in str:\n+  for k,v in pairs(env.INFO.apps) do print(k,v) end\n+  \n+\n+\n+\n+\n   for app, count in pairs(env.INFO.apps) do\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n"
                },
                {
                    "date": 1716803558993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,14 +126,17 @@\n   local no_app = true\n   print('===whatever', env.INFO.apps)\n   -- print table content in str:\n   for k,v in pairs(env.INFO.apps) do print(k,v) end\n-  \n+  -- if  \n \n \n \n \n   for app, count in pairs(env.INFO.apps) do\n+    \n+    print('Looping...', env.INFO.apps[app])\n+    print('=====>')\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     icon_line = icon_line .. \" \" .. icon\n"
                },
                {
                    "date": 1716803596842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n \n \n   for app, count in pairs(env.INFO.apps) do\n     \n-    print('Looping...', env.INFO.apps[app])\n+    print('Looping...' + env.INFO.apps[app].toString())\n     print('=====>')\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n"
                },
                {
                    "date": 1716803625590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n \n \n   for app, count in pairs(env.INFO.apps) do\n     \n-    print('Looping...' + env.INFO.apps[app].toString())\n+    print('Looping...' . string(env.INFO.apps[app]))\n     print('=====>')\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n"
                },
                {
                    "date": 1716804886518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,16 @@\n \n \n   for app, count in pairs(env.INFO.apps) do\n     \n-    print('Looping...' . string(env.INFO.apps[app]))\n+    tableToString = function(t)\n+      local result = {}\n+      for k, v in pairs(t) do\n+        table.insert(result, k .. \": \" .. v)\n+      end\n+      return table.concat(result, \", \")\n+    end\n+    print('Looping...' . tableToString(env.INFO.apps[app]) )\n     print('=====>')\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n"
                },
                {
                    "date": 1716804913260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+\n+local spaces = {}\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left= 5,\n+    padding_right= 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+    local selected = env.SELECTED == \"true\"\n+    local color = selected and colors.grey or colors.bg2\n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  local icon_line = \"\"\n+  local no_app = true\n+  print('===whatever', env.INFO.apps)\n+  -- print table content in str:\n+  for k,v in pairs(env.INFO.apps) do print(k,v) end\n+  -- if  \n+\n+\n+\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    \n+    tableToString = function(t)\n+      local result = {}\n+      for k, v in pairs(t) do\n+        table.insert(result, k .. \": \" .. v)\n+      end\n+      return table.concat(result, \", \")'é(\"é)'\n+    end\n+    print(\"Looping...\" .. tableToString(env.INFO.apps[app]) )\n+    print('=====>')\n+    no_app = false\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    icon_line = icon_line .. \" \" .. icon\n+  end\n+\n+  if (no_app) then\n+    icon_line = \" —\"\n+  end\n+  sbar.animate(\"tanh\", 10, function()\n+    spaces[env.INFO.space]:set({ label = icon_line })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  spaces_indicator:set({\n+    icon = currently_on and icons.switch.off or icons.switch.on\n+  })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n"
                },
                {
                    "date": 1716805064773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,26 +133,19 @@\n \n \n   for app, count in pairs(env.INFO.apps) do\n     \n-    tableToString = function(t)\n-      local result = {}\n-      for k, v in pairs(t) do\n-        table.insert(result, k .. \": \" .. v)\n-      end\n-      return table.concat(result, \", \")'é(\"é)'\n-    end\n-    print(\"Looping...\" .. tableToString(env.INFO.apps[app]) )\n+    -- print(\"Looping...\" .. tableToString(env.INFO.apps[app]) )\n     print('=====>')\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     icon_line = icon_line .. \" \" .. icon\n   end\n \n-  if (no_app) then\n-    icon_line = \" —\"\n-  end\n+  -- if (no_app) then\n+  --   icon_line = \" —\"\n+  -- end\n   sbar.animate(\"tanh\", 10, function()\n     spaces[env.INFO.space]:set({ label = icon_line })\n   end)\n end)\n@@ -192,199 +185,4 @@\n \n spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n-\n-local spaces = {}\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left= 5,\n-    padding_right= 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-    local selected = env.SELECTED == \"true\"\n-    local color = selected and colors.grey or colors.bg2\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  local icon_line = \"\"\n-  local no_app = true\n-  print('===whatever', env.INFO.apps)\n-  -- print table content in str:\n-  for k,v in pairs(env.INFO.apps) do print(k,v) end\n-  -- if  \n-\n-\n-\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    \n-    tableToString = function(t)\n-      local result = {}\n-      for k, v in pairs(t) do\n-        table.insert(result, k .. \": \" .. v)\n-      end\n-      return table.concat(result, \", \")\n-    end\n-    print('Looping...' . tableToString(env.INFO.apps[app]) )\n-    print('=====>')\n-    no_app = false\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    icon_line = icon_line .. \" \" .. icon\n-  end\n-\n-  if (no_app) then\n-    icon_line = \" —\"\n-  end\n-  sbar.animate(\"tanh\", 10, function()\n-    spaces[env.INFO.space]:set({ label = icon_line })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  spaces_indicator:set({\n-    icon = currently_on and icons.switch.off or icons.switch.on\n-  })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n"
                },
                {
                    "date": 1716805172995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,34 +121,34 @@\n   }\n })\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  local icon_line = \"\"\n-  local no_app = true\n-  print('===whatever', env.INFO.apps)\n-  -- print table content in str:\n-  for k,v in pairs(env.INFO.apps) do print(k,v) end\n-  -- if  \n+  -- local icon_line = \"\"\n+  -- local no_app = true\n+  -- print('===whatever', env.INFO.apps)\n+  -- -- print table content in str:\n+  -- for k,v in pairs(env.INFO.apps) do print(k,v) end\n+  -- -- if  \n \n \n \n \n-  for app, count in pairs(env.INFO.apps) do\n+  -- for app, count in pairs(env.INFO.apps) do\n     \n-    -- print(\"Looping...\" .. tableToString(env.INFO.apps[app]) )\n-    print('=====>')\n-    no_app = false\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    icon_line = icon_line .. \" \" .. icon\n-  end\n+  --   -- print(\"Looping...\" .. tableToString(env.INFO.apps[app]) )\n+  --   print('=====>')\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   icon_line = icon_line .. \" \" .. icon\n+  -- end\n \n   -- if (no_app) then\n   --   icon_line = \" —\"\n   -- end\n-  sbar.animate(\"tanh\", 10, function()\n-    spaces[env.INFO.space]:set({ label = icon_line })\n-  end)\n+  -- sbar.animate(\"tanh\", 10, function()\n+  --   spaces[env.INFO.space]:set({ label = icon_line })\n+  -- end)\n end)\n \n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n   local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n"
                },
                {
                    "date": 1716805215488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n   -- local no_app = true\n   -- print('===whatever', env.INFO.apps)\n   -- -- print table content in str:\n   -- for k,v in pairs(env.INFO.apps) do print(k,v) end\n-  -- -- if  \n+  -- -- if  \"\"\n \n \n \n \n"
                },
                {
                    "date": 1716805279410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,10 +54,10 @@\n   })\n \n   local space_popup = sbar.add(\"item\", {\n     position = \"popup.\" .. space.name,\n-    padding_left= 5,\n-    padding_right= 0,\n+    padding_left = 5,\n+    padding_right = 0,\n     background = {\n       drawing = true,\n       image = {\n         corner_radius = 9,\n@@ -120,9 +120,14 @@\n     border_color = colors.with_alpha(colors.bg1, 0.0),\n   }\n })\n \n+\n+local utils = require(\"helpers.utils\")\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  print('print table')\n+  utils.print_table(env.INFO)\n+  -- utils.print_table(env.INFO)\n   -- local icon_line = \"\"\n   -- local no_app = true\n   -- print('===whatever', env.INFO.apps)\n   -- -- print table content in str:\n@@ -132,9 +137,9 @@\n \n \n \n   -- for app, count in pairs(env.INFO.apps) do\n-    \n+\n   --   -- print(\"Looping...\" .. tableToString(env.INFO.apps[app]) )\n   --   print('=====>')\n   --   no_app = false\n   --   local lookup = app_icons[app]\n"
                },
                {
                    "date": 1716805348572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,193 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+\n+local spaces = {}\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+    local selected = env.SELECTED == \"true\"\n+    local color = selected and colors.grey or colors.bg2\n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+local logger = require(\"../.hammerspoon/logger\")\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  print('print table')\n+  logger.log(env.INFO)\n+  -- utils.print_table(env.INFO)\n+  -- local icon_line = \"\"\n+  -- local no_app = true\n+  -- print('===whatever', env.INFO.apps)\n+  -- -- print table content in str:\n+  -- for k,v in pairs(env.INFO.apps) do print(k,v) end\n+  -- -- if  \"\"\n+\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+\n+  --   -- print(\"Looping...\" .. tableToString(env.INFO.apps[app]) )\n+  --   print('=====>')\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   icon_line = icon_line .. \" \" .. icon\n+  -- end\n+\n+  -- if (no_app) then\n+  --   icon_line = \" —\"\n+  -- end\n+  -- sbar.animate(\"tanh\", 10, function()\n+  --   spaces[env.INFO.space]:set({ label = icon_line })\n+  -- end)\n+end)\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  spaces_indicator:set({\n+    icon = currently_on and icons.switch.off or icons.switch.on\n+  })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n"
                },
                {
                    "date": 1716805487162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,10 +120,10 @@\n     border_color = colors.with_alpha(colors.bg1, 0.0),\n   }\n })\n \n-\n-local logger = require(\"../.hammerspoon/logger\")\n+local focus = require(\"../.hammerspoon/focus-history.lua\")\n+local console = require(\"../.hammerspoon/console\")\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   print('print table')\n   logger.log(env.INFO)\n   -- utils.print_table(env.INFO)\n@@ -190,197 +190,4 @@\n \n spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n-\n-local spaces = {}\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-    local selected = env.SELECTED == \"true\"\n-    local color = selected and colors.grey or colors.bg2\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-local utils = require(\"helpers.utils\")\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  print('print table')\n-  utils.print_table(env.INFO)\n-  -- utils.print_table(env.INFO)\n-  -- local icon_line = \"\"\n-  -- local no_app = true\n-  -- print('===whatever', env.INFO.apps)\n-  -- -- print table content in str:\n-  -- for k,v in pairs(env.INFO.apps) do print(k,v) end\n-  -- -- if  \"\"\n-\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-\n-  --   -- print(\"Looping...\" .. tableToString(env.INFO.apps[app]) )\n-  --   print('=====>')\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   icon_line = icon_line .. \" \" .. icon\n-  -- end\n-\n-  -- if (no_app) then\n-  --   icon_line = \" —\"\n-  -- end\n-  -- sbar.animate(\"tanh\", 10, function()\n-  --   spaces[env.INFO.space]:set({ label = icon_line })\n-  -- end)\n-end)\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  spaces_indicator:set({\n-    icon = currently_on and icons.switch.off or icons.switch.on\n-  })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n"
                },
                {
                    "date": 1716805557293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,13 +120,13 @@\n     border_color = colors.with_alpha(colors.bg1, 0.0),\n   }\n })\n \n-local focus = require(\"../.hammerspoon/focus-history.lua\")\n+local focus = require(\"../..hammerspoon/focus-history.lua\")\n local console = require(\"../.hammerspoon/console\")\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   print('print table')\n-  logger.log(env.INFO)\n+  console.log(env.INFO)\n   -- utils.print_table(env.INFO)\n   -- local icon_line = \"\"\n   -- local no_app = true\n   -- print('===whatever', env.INFO.apps)\n"
                },
                {
                    "date": 1716805676855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,8 +121,9 @@\n   }\n })\n \n local focus = require(\"../..hammerspoon/focus-history.lua\")\n+\n local console = require(\"../.hammerspoon/console\")\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   print('print table')\n   console.log(env.INFO)\n"
                },
                {
                    "date": 1716805783995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n local colors = require(\"colors\")\n local icons = require(\"icons\")\n local settings = require(\"settings\")\n local app_icons = require(\"helpers.app_icons\")\n-\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+local console = require(\"../.hammerspoon/console\")\n local spaces = {}\n \n for i = 1, 5, 1 do\n   local space = sbar.add(\"space\", \"space.\" .. i, {\n@@ -120,11 +121,9 @@\n     border_color = colors.with_alpha(colors.bg1, 0.0),\n   }\n })\n \n-local focus = require(\"../..hammerspoon/focus-history.lua\")\n \n-local console = require(\"../.hammerspoon/console\")\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   print('print table')\n   console.log(env.INFO)\n   -- utils.print_table(env.INFO)\n"
                },
                {
                    "date": 1716805792735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n })\n \n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  print('print table')\n+  print('ddprint table')\n   console.log(env.INFO)\n   -- utils.print_table(env.INFO)\n   -- local icon_line = \"\"\n   -- local no_app = true\n"
                },
                {
                    "date": 1716805803836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n local icons = require(\"icons\")\n local settings = require(\"settings\")\n local app_icons = require(\"helpers.app_icons\")\n -- local focus  require(\"../..hammerspoon/focus-history\")\n-local console = require(\"../.hammerspoon/console\")\n+local console = require(\"../../.hammerspoon/console\")\n local spaces = {}\n \n for i = 1, 5, 1 do\n   local space = sbar.add(\"space\", \"space.\" .. i, {\n"
                },
                {
                    "date": 1716818763195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n local icons = require(\"icons\")\n local settings = require(\"settings\")\n local app_icons = require(\"helpers.app_icons\")\n -- local focus  require(\"../..hammerspoon/focus-history\")\n-local console = require(\"../../.hammerspoon/console\")\n+-- local console = require(\"../../.hammerspoon/console\")\n local spaces = {}\n \n for i = 1, 5, 1 do\n   local space = sbar.add(\"space\", \"space.\" .. i, {\n"
                },
                {
                    "date": 1716819058761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,50 @@\n -- local focus  require(\"../..hammerspoon/focus-history\")\n -- local console = require(\"../../.hammerspoon/console\")\n local spaces = {}\n \n+\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n for i = 1, 5, 1 do\n   local space = sbar.add(\"space\", \"space.\" .. i, {\n     space = i,\n     icon = {\n@@ -124,9 +166,10 @@\n \n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   print('ddprint table')\n-  console.log(env.INFO)\n+  print\n+  -- console.log(env.INFO)\n   -- utils.print_table(env.INFO)\n   -- local icon_line = \"\"\n   -- local no_app = true\n   -- print('===whatever', env.INFO.apps)\n"
                },
                {
                    "date": 1716819081490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,9 @@\n \n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   print('ddprint table')\n-  print\n+    dumpTableToString(env)\n   -- console.log(env.INFO)\n   -- utils.print_table(env.INFO)\n   -- local icon_line = \"\"\n   -- local no_app = true\n"
                },
                {
                    "date": 1716819091319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,9 @@\n \n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   print('ddprint table')\n-    dumpTableToString(env)\n+    dumpTableToString(env, 3)\n   -- console.log(env.INFO)\n   -- utils.print_table(env.INFO)\n   -- local icon_line = \"\"\n   -- local no_app = true\n"
                },
                {
                    "date": 1716819106596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,236 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+    local selected = env.SELECTED == \"true\"\n+    local color = selected and colors.grey or colors.bg2\n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  print('ddprint table')\n+    debugTable(env, 3)\n+  -- console.log(env.INFO)\n+  -- utils.print_table(env.INFO)\n+  -- local icon_line = \"\"\n+  -- local no_app = true\n+  -- print('===whatever', env.INFO.apps)\n+  -- -- print table content in str:\n+  -- for k,v in pairs(env.INFO.apps) do print(k,v) end\n+  -- -- if  \"\"\n+\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+\n+  --   -- print(\"Looping...\" .. tableToString(env.INFO.apps[app]) )\n+  --   print('=====>')\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   icon_line = icon_line .. \" \" .. icon\n+  -- end\n+\n+  -- if (no_app) then\n+  --   icon_line = \" —\"\n+  -- end\n+  -- sbar.animate(\"tanh\", 10, function()\n+  --   spaces[env.INFO.space]:set({ label = icon_line })\n+  -- end)\n+end)\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  spaces_indicator:set({\n+    icon = currently_on and icons.switch.off or icons.switch.on\n+  })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n"
                },
                {
                    "date": 1716819173131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,274 +165,38 @@\n })\n \n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  print('ddprint table')\n-    debugTable(env, 3)\n+  -- print('ddprint table')\n+    -- debugTable(env)\n   -- console.log(env.INFO)\n   -- utils.print_table(env.INFO)\n-  -- local icon_line = \"\"\n-  -- local no_app = true\n-  -- print('===whatever', env.INFO.apps)\n-  -- -- print table content in str:\n-  -- for k,v in pairs(env.INFO.apps) do print(k,v) end\n-  -- -- if  \"\"\n+  local icon_line = \"\"\n+  local no_app = true\n+  print('===whatever', env.INFO.apps)\n+  -- print table content in str:\n+  for k,v in pairs(env.INFO.apps) do print(k,v) end\n+  -- if  \"\"\n \n \n \n \n-  -- for app, count in pairs(env.INFO.apps) do\n+  for app, count in pairs(env.INFO.apps) do\n \n-  --   -- print(\"Looping...\" .. tableToString(env.INFO.apps[app]) )\n-  --   print('=====>')\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   icon_line = icon_line .. \" \" .. icon\n-  -- end\n-\n-  -- if (no_app) then\n-  --   icon_line = \" —\"\n-  -- end\n-  -- sbar.animate(\"tanh\", 10, function()\n-  --   spaces[env.INFO.space]:set({ label = icon_line })\n-  -- end)\n-end)\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  spaces_indicator:set({\n-    icon = currently_on and icons.switch.off or icons.switch.on\n-  })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n+    -- print(\"Looping...\" .. tableToString(env.INFO.apps[app]) )\n+    print('=====>')\n+    no_app = false\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    icon_line = icon_line .. \" \" .. icon\n   end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n \n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n+  if (no_app) then\n+    icon_line = \" —\"\n   end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-    local selected = env.SELECTED == \"true\"\n-    local color = selected and colors.grey or colors.bg2\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n+  sbar.animate(\"tanh\", 10, function()\n+    spaces[env.INFO.space]:set({ label = icon_line })\n   end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  print('ddprint table')\n-    dumpTableToString(env, 3)\n-  -- console.log(env.INFO)\n-  -- utils.print_table(env.INFO)\n-  -- local icon_line = \"\"\n-  -- local no_app = true\n-  -- print('===whatever', env.INFO.apps)\n-  -- -- print table content in str:\n-  -- for k,v in pairs(env.INFO.apps) do print(k,v) end\n-  -- -- if  \"\"\n-\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-\n-  --   -- print(\"Looping...\" .. tableToString(env.INFO.apps[app]) )\n-  --   print('=====>')\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   icon_line = icon_line .. \" \" .. icon\n-  -- end\n-\n-  -- if (no_app) then\n-  --   icon_line = \" —\"\n-  -- end\n-  -- sbar.animate(\"tanh\", 10, function()\n-  --   spaces[env.INFO.space]:set({ label = icon_line })\n-  -- end)\n end)\n \n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n   local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n"
                },
                {
                    "date": 1716819623738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,8 +163,19 @@\n     border_color = colors.with_alpha(colors.bg1, 0.0),\n   }\n })\n \n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   -- print('ddprint table')\n     -- debugTable(env)\n@@ -175,22 +186,33 @@\n   print('===whatever', env.INFO.apps)\n   -- print table content in str:\n   for k,v in pairs(env.INFO.apps) do print(k,v) end\n   -- if  \"\"\n+  local browserStr = \"\"\n+  local editorStr = \"\"\n+  local termStr = \"\"\n \n-\n-\n-\n   for app, count in pairs(env.INFO.apps) do\n-\n-    -- print(\"Looping...\" .. tableToString(env.INFO.apps[app]) )\n-    print('=====>')\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+    if string.match(env.INFO.apps[app].name, \"^(Chrome|Safari|Duck|Edge|Sigma|Arc)$\") then\n+      browserStr = browserStr .. \" \" .. icon\n+    end\n+    local isBrowser = strMatch\n     icon_line = icon_line .. \" \" .. icon\n   end\n \n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   icon_line = icon_line .. \" \" .. icon\n+  -- end\n+\n   if (no_app) then\n     icon_line = \" —\"\n   end\n   sbar.animate(\"tanh\", 10, function()\n"
                },
                {
                    "date": 1716819634460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,12 +194,13 @@\n   for app, count in pairs(env.INFO.apps) do\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    print('========', string.match(env.INFO.apps[app].name)\n     -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-    if string.match(env.INFO.apps[app].name, \"^(Chrome|Safari|Duck|Edge|Sigma|Arc)$\") then\n-      browserStr = browserStr .. \" \" .. icon\n-    end\n+    -- if string.match(env.INFO.apps[app].name, \"^(Chrome|Safari|Duck|Edge|Sigma|Arc)$\") then\n+    --   browserStr = browserStr .. \" \" .. icon\n+    -- end\n     local isBrowser = strMatch\n     icon_line = icon_line .. \" \" .. icon\n   end\n \n"
                },
                {
                    "date": 1716819641098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n   for app, count in pairs(env.INFO.apps) do\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    print('========', string.match(env.INFO.apps[app].name)\n+    print('====dddddd====', env.INFO.apps[app].name)\n     -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n     -- if string.match(env.INFO.apps[app].name, \"^(Chrome|Safari|Duck|Edge|Sigma|Arc)$\") then\n     --   browserStr = browserStr .. \" \" .. icon\n     -- end\n"
                },
                {
                    "date": 1716819656164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n   for app, count in pairs(env.INFO.apps) do\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    print('====dddddd====', env.INFO.apps[app].name)\n+    print('-------------====dddddd====', env.INFO.apps[app].name)\n     -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n     -- if string.match(env.INFO.apps[app].name, \"^(Chrome|Safari|Duck|Edge|Sigma|Arc)$\") then\n     --   browserStr = browserStr .. \" \" .. icon\n     -- end\n"
                },
                {
                    "date": 1716819789000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,14 +194,14 @@\n   for app, count in pairs(env.INFO.apps) do\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    print('-------------====dddddd====', env.INFO.apps[app].name)\n+    print('-------------====dddddd====', env.INFO)\n     -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n     -- if string.match(env.INFO.apps[app].name, \"^(Chrome|Safari|Duck|Edge|Sigma|Arc)$\") then\n     --   browserStr = browserStr .. \" \" .. icon\n     -- end\n-    local isBrowser = strMatch\n+    -- local isBrowser = strMatch\n     icon_line = icon_line .. \" \" .. icon\n   end\n \n \n"
                },
                {
                    "date": 1716819821808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n   for app, count in pairs(env.INFO.apps) do\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    print('-------------====dddddd====', env.INFO)\n+    print('-------------====dddddd====', dumpTableToString(env.INFO))\n     -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n     -- if string.match(env.INFO.apps[app].name, \"^(Chrome|Safari|Duck|Edge|Sigma|Arc)$\") then\n     --   browserStr = browserStr .. \" \" .. icon\n     -- end\n"
                },
                {
                    "date": 1716819838769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n   for app, count in pairs(env.INFO.apps) do\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    print('-------------====dddddd====', dumpTableToString(env.INFO))\n+    print('-------------====dddddd====', app)\n     -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n     -- if string.match(env.INFO.apps[app].name, \"^(Chrome|Safari|Duck|Edge|Sigma|Arc)$\") then\n     --   browserStr = browserStr .. \" \" .. icon\n     -- end\n"
                },
                {
                    "date": 1716819852657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n   for app, count in pairs(env.INFO.apps) do\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    print('-------------====dddddd====', app)\n+    print('-------------====dddddd====', app.id)\n     -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n     -- if string.match(env.INFO.apps[app].name, \"^(Chrome|Safari|Duck|Edge|Sigma|Arc)$\") then\n     --   browserStr = browserStr .. \" \" .. icon\n     -- end\n"
                },
                {
                    "date": 1716819920967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,26 +194,16 @@\n   for app, count in pairs(env.INFO.apps) do\n     no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    print('-------------====dddddd====', app.id)\n+    -- print('-------------====dddddd====', app)\n     -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-    -- if string.match(env.INFO.apps[app].name, \"^(Chrome|Safari|Duck|Edge|Sigma|Arc)$\") then\n-    --   browserStr = browserStr .. \" \" .. icon\n+    if string.match(app, \"^(Chrome|Safari|Duck|Edge|Sigma|Arc)$\") then\n+      browserStr = browserStr .. \" \" .. icon\n     -- end\n     -- local isBrowser = strMatch\n-    icon_line = icon_line .. \" \" .. icon\n+    -- icon_line = icon_line .. \" \" .. icon\n   end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   icon_line = icon_line .. \" \" .. icon\n-  -- end\n-\n   if (no_app) then\n     icon_line = \" —\"\n   end\n   sbar.animate(\"tanh\", 10, function()\n"
                },
                {
                    "date": 1716819946191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,16 +177,16 @@\n }\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   -- print('ddprint table')\n-    -- debugTable(env)\n+  -- debugTable(env)\n   -- console.log(env.INFO)\n   -- utils.print_table(env.INFO)\n   local icon_line = \"\"\n   local no_app = true\n   print('===whatever', env.INFO.apps)\n   -- print table content in str:\n-  for k,v in pairs(env.INFO.apps) do print(k,v) end\n+  for k, v in pairs(env.INFO.apps) do print(k, v) end\n   -- if  \"\"\n   local browserStr = \"\"\n   local editorStr = \"\"\n   local termStr = \"\"\n@@ -198,11 +198,12 @@\n     -- print('-------------====dddddd====', app)\n     -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n     if string.match(app, \"^(Chrome|Safari|Duck|Edge|Sigma|Arc)$\") then\n       browserStr = browserStr .. \" \" .. icon\n-    -- end\n-    -- local isBrowser = strMatch\n-    -- icon_line = icon_line .. \" \" .. icon\n+      -- end\n+      -- local isBrowser = strMatch\n+      -- icon_line = icon_line .. \" \" .. icon\n+    end\n   end\n   if (no_app) then\n     icon_line = \" —\"\n   end\n"
                },
                {
                    "date": 1716820428580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,37 +175,67 @@\n   \"Chrome\",\n   \"Browser\",\n }\n \n+local browserStr = \"\"\n+local editorStr = \"\"\n+local termStr = \"\"\n+\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- print('ddprint table')\n-  -- debugTable(env)\n-  -- console.log(env.INFO)\n-  -- utils.print_table(env.INFO)\n+  --  = tonumber(env.INFO.space)\n+  if (env.INFO.space == 0) then\n+    browserStr = \"\"\n+  end\n+  if (env.INFO.space == 1) then\n+    editorStr = \"\"\n+  end\n+  if (env.INFO.space == 2) then\n+    termStr = \"\"\n+  end\n+  \n   local icon_line = \"\"\n   local no_app = true\n-  print('===whatever', env.INFO.apps)\n-  -- print table content in str:\n-  for k, v in pairs(env.INFO.apps) do print(k, v) end\n-  -- if  \"\"\n-  local browserStr = \"\"\n-  local editorStr = \"\"\n-  local termStr = \"\"\n \n   for app, count in pairs(env.INFO.apps) do\n-    no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    -- print('-------------====dddddd====', app)\n-    -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-    if string.match(app, \"^(Chrome|Safari|Duck|Edge|Sigma|Arc)$\") then\n+    if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n       browserStr = browserStr .. \" \" .. icon\n-      -- end\n-      -- local isBrowser = strMatch\n-      -- icon_line = icon_line .. \" \" .. icon\n     end\n+    if string.match(app, \"Code|Sublime|Zed\") then\n+      editorStr = editorStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"Terminal|iTerm\") then\n+      termStr = termStr .. \" \" .. icon\n+    end\n   end\n-  if (no_app) then\n+  if (env.INFO.space == 0) then\n+    icon_line = browserStr\n+  end\n+  if (env.INFO.space == 1) then\n+    icon_line = editorStr\n+  end\n+  if (env.INFO.space == 2) then\n+    icon_line = termStr\n+  end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+\n+  if (icon_line == \"\") then\n     icon_line = \" —\"\n   end\n   sbar.animate(\"tanh\", 10, function()\n     spaces[env.INFO.space]:set({ label = icon_line })\n"
                },
                {
                    "date": 1716820509850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,8 +180,9 @@\n local editorStr = \"\"\n local termStr = \"\"\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n   --  = tonumber(env.INFO.space)\n   if (env.INFO.space == 0) then\n     browserStr = \"\"\n   end\n"
                },
                {
                    "date": 1716820571726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,8 +208,13 @@\n     if string.match(app, \"Terminal|iTerm\") then\n       termStr = termStr .. \" \" .. icon\n     end\n   end\n+  print(\n+    \"BROWSER: \", browserStr,\n+    \"EDITOR: \", editorStr,\n+    \"TERM: \", termStr\n+  )\n   if (env.INFO.space == 0) then\n     icon_line = browserStr\n   end\n   if (env.INFO.space == 1) then\n"
                },
                {
                    "date": 1716820585647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,8 +213,9 @@\n     \"BROWSER: \", browserStr,\n     \"EDITOR: \", editorStr,\n     \"TERM: \", termStr\n   )\n+  print('##################')\n   if (env.INFO.space == 0) then\n     icon_line = browserStr\n   end\n   if (env.INFO.space == 1) then\n"
                },
                {
                    "date": 1716820620778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,8 +201,9 @@\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n       browserStr = browserStr .. \" \" .. icon\n     end\n+    print('MATCH', app,  \"Code|Sublime|Zed\" ,string.match(app, \"Code|Sublime|Zed\"))\n     if string.match(app, \"Code|Sublime|Zed\") then\n       editorStr = editorStr .. \" \" .. icon\n     end\n     if string.match(app, \"Terminal|iTerm\") then\n"
                },
                {
                    "date": 1716820713636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n     if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n       browserStr = browserStr .. \" \" .. icon\n     end\n     print('MATCH', app,  \"Code|Sublime|Zed\" ,string.match(app, \"Code|Sublime|Zed\"))\n-    if string.match(app, \"Code|Sublime|Zed\") then\n+    if app.match(\"Code|Sublime|Zed\") then\n       editorStr = editorStr .. \" \" .. icon\n     end\n     if string.match(app, \"Terminal|iTerm\") then\n       termStr = termStr .. \" \" .. icon\n"
                },
                {
                    "date": 1716820934625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,10 +201,10 @@\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n       browserStr = browserStr .. \" \" .. icon\n     end\n-    print('MATCH', app,  \"Code|Sublime|Zed\" ,string.match(app, \"Code|Sublime|Zed\"))\n-    if app.match(\"Code|Sublime|Zed\") then\n+    print('MATCH', app,  \"Code|Sublime|Zed\" ,string.match(app, \"Code\"))\n+    if string.match(app, \"Code|Sublime|Zed\") then\n       editorStr = editorStr .. \" \" .. icon\n     end\n     if string.match(app, \"Terminal|iTerm\") then\n       termStr = termStr .. \" \" .. icon\n"
                },
                {
                    "date": 1716820949889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,9 +201,9 @@\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n       browserStr = browserStr .. \" \" .. icon\n     end\n-    print('MATCH', app,  \"Code|Sublime|Zed\" ,string.match(app, \"Code\"))\n+    print('MATCH', app,  \"Code|Sublime|Zed\" ,string.match(app, \"Code|Sublime\"))\n     if string.match(app, \"Code|Sublime|Zed\") then\n       editorStr = editorStr .. \" \" .. icon\n     end\n     if string.match(app, \"Terminal|iTerm\") then\n"
                },
                {
                    "date": 1716820970087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,9 +201,9 @@\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n       browserStr = browserStr .. \" \" .. icon\n     end\n-    print('MATCH', app,  \"Code|Sublime|Zed\" ,string.match(app, \"Code|Sublime\"))\n+    print('MATCH', app,  \"Code|Sublime|Zed\" ,string.match(app, \"Code\"))\n     if string.match(app, \"Code|Sublime|Zed\") then\n       editorStr = editorStr .. \" \" .. icon\n     end\n     if string.match(app, \"Terminal|iTerm\") then\n"
                },
                {
                    "date": 1716820980535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,9 +201,9 @@\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n       browserStr = browserStr .. \" \" .. icon\n     end\n-    print('MATCH', app,  \"Code|Sublime|Zed\" ,string.match(app, \"Code\"))\n+    print('MATCH', app,  \"Code|Sublime|Zed\" ,string.match(app, \"Code|Sublime\"))\n     if string.match(app, \"Code|Sublime|Zed\") then\n       editorStr = editorStr .. \" \" .. icon\n     end\n     if string.match(app, \"Terminal|iTerm\") then\n"
                },
                {
                    "date": 1716821020351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,16 +198,16 @@\n \n   for app, count in pairs(env.INFO.apps) do\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n       browserStr = browserStr .. \" \" .. icon\n     end\n-    print('MATCH', app,  \"Code|Sublime|Zed\" ,string.match(app, \"Code|Sublime\"))\n-    if string.match(app, \"Code|Sublime|Zed\") then\n+    -- print('MATCH', app,  \"Code|Sublime|Zed\" ,strzing.match(app, \"Code\"))\n+    if string.match(app, \"Code\") then\n       editorStr = editorStr .. \" \" .. icon\n     end\n-    if string.match(app, \"Terminal|iTerm\") then\n+    if string.match(app, \"iTerm\") then\n       termStr = termStr .. \" \" .. icon\n     end\n   end\n   print(\n"
                },
                {
                    "date": 1716821126511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,22 +201,21 @@\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n       browserStr = browserStr .. \" \" .. icon\n     end\n-    -- print('MATCH', app,  \"Code|Sublime|Zed\" ,strzing.match(app, \"Code\"))\n     if string.match(app, \"Code\") then\n       editorStr = editorStr .. \" \" .. icon\n     end\n     if string.match(app, \"iTerm\") then\n       termStr = termStr .. \" \" .. icon\n     end\n   end\n-  print(\n-    \"BROWSER: \", browserStr,\n-    \"EDITOR: \", editorStr,\n-    \"TERM: \", termStr\n-  )\n-  print('##################')\n+  -- print(\n+  --   \"BROWSER: \", browserStr,\n+  --   \"EDITOR: \", editorStr,\n+  --   \"TERM: \", termStr\n+  -- )\n+  -- print('##################')\n   if (env.INFO.space == 0) then\n     icon_line = browserStr\n   end\n   if (env.INFO.space == 1) then\n"
                },
                {
                    "date": 1716821547787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,14 +240,14 @@\n   --     -- icon_line = icon_line .. \" \" .. icon\n   --   end\n   -- end\n \n-  if (icon_line == \"\") then\n-    icon_line = \" —\"\n-  end\n-  sbar.animate(\"tanh\", 10, function()\n-    spaces[env.INFO.space]:set({ label = icon_line })\n-  end)\n+  -- if (icon_line == \"\") then\n+  --   icon_line = \" —\"\n+  -- end\n+  -- sbar.animate(\"tanh\", 10, function()\n+  --   spaces[env.INFO.space]:set({ label = icon_line })\n+  -- end)\n end)\n \n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n   local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n"
                },
                {
                    "date": 1716821557861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,17 +214,17 @@\n   --   \"EDITOR: \", editorStr,\n   --   \"TERM: \", termStr\n   -- )\n   -- print('##################')\n-  if (env.INFO.space == 0) then\n-    icon_line = browserStr\n-  end\n-  if (env.INFO.space == 1) then\n-    icon_line = editorStr\n-  end\n-  if (env.INFO.space == 2) then\n-    icon_line = termStr\n-  end\n+  -- if (env.INFO.space == 0) then\n+  --   icon_line = browserStr\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   icon_line = editorStr\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   icon_line = termStr\n+  -- end\n \n \n \n   -- for app, count in pairs(env.INFO.apps) do\n"
                },
                {
                    "date": 1716821617014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,293 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+    local selected = env.SELECTED == \"true\"\n+    local color = selected and colors.grey or colors.bg2\n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local browserStr = \"\"\n+local editorStr = \"\"\n+local termStr = \"\"\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  -- exit function\n+  if env.INFO == nil then\n+    return\n+  else\n+    return\n+  end\n+  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+  --  = tonumber(env.INFO.space)\n+  if (env.INFO.space == 0) then\n+    browserStr = \"\"\n+  end\n+  if (env.INFO.space == 1) then\n+    editorStr = \"\"\n+  end\n+  if (env.INFO.space == 2) then\n+    termStr = \"\"\n+  end\n+\n+  local icon_line = \"\"\n+  local no_app = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n+      browserStr = browserStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"Code\") then\n+      editorStr = editorStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"iTerm\") then\n+      termStr = termStr .. \" \" .. icon\n+    end\n+  end\n+  print(\n+    \"BROWSER: \", browserStr,\n+    \"EDITOR: \", editorStr,\n+    \"TERM: \", termStr\n+  )\n+  print('##################')\n+  if (env.INFO.space == 0) then\n+    icon_line = browserStr\n+  end\n+  if (env.INFO.space == 1) then\n+    icon_line = editorStr\n+  end\n+  if (env.INFO.space == 2) then\n+    icon_line = termStr\n+  end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+\n+  if (icon_line == \"\") then\n+    icon_line = \" —\"\n+  end\n+  sbar.animate(\"tanh\", 10, function()\n+    spaces[env.INFO.space]:set({ label = icon_line })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  spaces_indicator:set({\n+    icon = currently_on and icons.switch.off or icons.switch.on\n+  })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n"
                },
                {
                    "date": 1716821623525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -290,291 +290,4 @@\n \n spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-    local selected = env.SELECTED == \"true\"\n-    local color = selected and colors.grey or colors.bg2\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local browserStr = \"\"\n-local editorStr = \"\"\n-local termStr = \"\"\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-  --  = tonumber(env.INFO.space)\n-  if (env.INFO.space == 0) then\n-    browserStr = \"\"\n-  end\n-  if (env.INFO.space == 1) then\n-    editorStr = \"\"\n-  end\n-  if (env.INFO.space == 2) then\n-    termStr = \"\"\n-  end\n-  \n-  local icon_line = \"\"\n-  local no_app = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n-      browserStr = browserStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"Code\") then\n-      editorStr = editorStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"iTerm\") then\n-      termStr = termStr .. \" \" .. icon\n-    end\n-  end\n-  -- print(\n-  --   \"BROWSER: \", browserStr,\n-  --   \"EDITOR: \", editorStr,\n-  --   \"TERM: \", termStr\n-  -- )\n-  -- print('##################')\n-  -- if (env.INFO.space == 0) then\n-  --   icon_line = browserStr\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   icon_line = editorStr\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   icon_line = termStr\n-  -- end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-\n-  -- if (icon_line == \"\") then\n-  --   icon_line = \" —\"\n-  -- end\n-  -- sbar.animate(\"tanh\", 10, function()\n-  --   spaces[env.INFO.space]:set({ label = icon_line })\n-  -- end)\n-end)\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  spaces_indicator:set({\n-    icon = currently_on and icons.switch.off or icons.switch.on\n-  })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n"
                },
                {
                    "date": 1716821802633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,13 +254,19 @@\n     spaces[env.INFO.space]:set({ label = icon_line })\n   end)\n end)\n \n+function onSpaceChanged(spaceNum)\n+  local space = tonumber(space)\n+  sbar.exec(\"yabai -m space \" .. space)\n+end\n+\n+\n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  spaces_indicator:set({\n-    icon = currently_on and icons.switch.off or icons.switch.on\n-  })\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n end)\n \n spaces_indicator:subscribe(\"mouse.entered\", function(env)\n   sbar.animate(\"tanh\", 30, function()\n"
                },
                {
                    "date": 1716821826401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,10 +255,10 @@\n   end)\n end)\n \n function onSpaceChanged(spaceNum)\n-  local space = tonumber(space)\n-  sbar.exec(\"yabai -m space \" .. space)\n+  -- local space = tonumber(space)\n+  -- sbar.exec(\"yabai -m space \" .. space)\n end\n \n \n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n"
                },
                {
                    "date": 1716821946237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,13 +254,16 @@\n     spaces[env.INFO.space]:set({ label = icon_line })\n   end)\n end)\n \n-function onSpaceChanged(spaceNum)\n+function onAppFocused(space)\n   -- local space = tonumber(space)\n   -- sbar.exec(\"yabai -m space \" .. space)\n end\n \n+export {\n+  onAppFocused = onAppFocused\n+}\n \n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n   -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n   -- spaces_indicator:set({\n"
                },
                {
                    "date": 1716821984580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,8 +255,9 @@\n   end)\n end)\n \n function onAppFocused(space)\n+  print('APP FOCUSSEEEED')\n   -- local space = tonumber(space)\n   -- sbar.exec(\"yabai -m space \" .. space)\n end\n \n"
                },
                {
                    "date": 1716821992798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,12 +260,8 @@\n   -- local space = tonumber(space)\n   -- sbar.exec(\"yabai -m space \" .. space)\n end\n \n-export {\n-  onAppFocused = onAppFocused\n-}\n-\n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n   -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n   -- spaces_indicator:set({\n   --   icon = currently_on and icons.switch.off or icons.switch.on\n"
                },
                {
                    "date": 1716822042666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,4 +296,9 @@\n \n spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n+\n+return {\n+  spaces = spaces,\n+  onAppFocused = onAppFocused\n+}\n"
                },
                {
                    "date": 1716822079866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,10 +254,10 @@\n     spaces[env.INFO.space]:set({ label = icon_line })\n   end)\n end)\n \n-function onAppFocused(space)\n-  print('APP FOCUSSEEEED')\n+function onAppFocused(space, app)\n+  print('APP FOCUSSEEEED', space, app)\n   -- local space = tonumber(space)\n   -- sbar.exec(\"yabai -m space \" .. space)\n end\n \n"
                },
                {
                    "date": 1716822436550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,7 +298,6 @@\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n \n return {\n-  spaces = spaces,\n   onAppFocused = onAppFocused\n }\n"
                },
                {
                    "date": 1716823005045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,304 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+\n+\n+\n+\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+    local selected = env.SELECTED == \"true\"\n+    local color = selected and colors.grey or colors.bg2\n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local browserStr = \"\"\n+local editorStr = \"\"\n+local termStr = \"\"\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  -- exit function\n+  if env.INFO == nil then\n+    return\n+  else\n+    return\n+  end\n+  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+  --  = tonumber(env.INFO.space)\n+  if (env.INFO.space == 0) then\n+    browserStr = \"\"\n+  end\n+  if (env.INFO.space == 1) then\n+    editorStr = \"\"\n+  end\n+  if (env.INFO.space == 2) then\n+    termStr = \"\"\n+  end\n+\n+  local icon_line = \"\"\n+  local no_app = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n+      browserStr = browserStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"Code\") then\n+      editorStr = editorStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"iTerm\") then\n+      termStr = termStr .. \" \" .. icon\n+    end\n+  end\n+  print(\n+    \"BROWSER: \", browserStr,\n+    \"EDITOR: \", editorStr,\n+    \"TERM: \", termStr\n+  )\n+  print('##################')\n+  if (env.INFO.space == 0) then\n+    icon_line = browserStr\n+  end\n+  if (env.INFO.space == 1) then\n+    icon_line = editorStr\n+  end\n+  if (env.INFO.space == 2) then\n+    icon_line = termStr\n+  end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+\n+  if (icon_line == \"\") then\n+    icon_line = \" —\"\n+  end\n+  sbar.animate(\"tanh\", 10, function()\n+    spaces[env.INFO.space]:set({ label = icon_line })\n+  end)\n+end)\n+\n+function onAppFocused(space, app)\n+  print('APP FOCUSSEEEED', space, app)\n+  -- local space = tonumber(space)\n+  -- sbar.exec(\"yabai -m space \" .. space)\n+end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n"
                },
                {
                    "date": 1716823085648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,323 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+    local selected = env.SELECTED == \"true\"\n+    local color = selected and colors.grey or colors.bg2\n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+\n+\n+\n+\n+\n+  space:subscribe(\"space_windows_change\", function(env)\n+    print('WIN STPACE CHANGES', dumpTableToString(env))\n+    -- local selected = env.SELECTED == \"true\"\n+    -- local color = selected and colors.grey or colors.bg2\n+    -- space:set({\n+    --   icon = { highlight = selected, },\n+    --   label = { highlight = selected },\n+    --   background = { border_color = selected and colors.black or colors.bg2 }\n+    -- })\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local browserStr = \"\"\n+local editorStr = \"\"\n+local termStr = \"\"\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  -- exit function\n+  if env.INFO == nil then\n+    return\n+  else\n+    return\n+  end\n+  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+  --  = tonumber(env.INFO.space)\n+  if (env.INFO.space == 0) then\n+    browserStr = \"\"\n+  end\n+  if (env.INFO.space == 1) then\n+    editorStr = \"\"\n+  end\n+  if (env.INFO.space == 2) then\n+    termStr = \"\"\n+  end\n+\n+  local icon_line = \"\"\n+  local no_app = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n+      browserStr = browserStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"Code\") then\n+      editorStr = editorStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"iTerm\") then\n+      termStr = termStr .. \" \" .. icon\n+    end\n+  end\n+  print(\n+    \"BROWSER: \", browserStr,\n+    \"EDITOR: \", editorStr,\n+    \"TERM: \", termStr\n+  )\n+  print('##################')\n+  if (env.INFO.space == 0) then\n+    icon_line = browserStr\n+  end\n+  if (env.INFO.space == 1) then\n+    icon_line = editorStr\n+  end\n+  if (env.INFO.space == 2) then\n+    icon_line = termStr\n+  end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+\n+  if (icon_line == \"\") then\n+    icon_line = \" —\"\n+  end\n+  sbar.animate(\"tanh\", 10, function()\n+    spaces[env.INFO.space]:set({ label = icon_line })\n+  end)\n+end)\n+\n+function onAppFocused(space, app)\n+  print('APP FOCUSSEEEED', space, app)\n+  -- local space = tonumber(space)\n+  -- sbar.exec(\"yabai -m space \" .. space)\n+end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n"
                },
                {
                    "date": 1716823198228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,16 @@\n \n \n \n   space:subscribe(\"space_windows_change\", function(env)\n-    print('WIN STPACE CHANGES', dumpTableToString(env))\n+    -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+    -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+    \n+    print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n     -- local selected = env.SELECTED == \"true\"\n     -- local color = selected and colors.grey or colors.bg2\n     -- space:set({\n     --   icon = { highlight = selected, },\n@@ -320,611 +327,4 @@\n \n spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-\n-\n-\n-\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-    local selected = env.SELECTED == \"true\"\n-    local color = selected and colors.grey or colors.bg2\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local browserStr = \"\"\n-local editorStr = \"\"\n-local termStr = \"\"\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- exit function\n-  if env.INFO == nil then\n-    return\n-  else\n-    return\n-  end\n-  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-  --  = tonumber(env.INFO.space)\n-  if (env.INFO.space == 0) then\n-    browserStr = \"\"\n-  end\n-  if (env.INFO.space == 1) then\n-    editorStr = \"\"\n-  end\n-  if (env.INFO.space == 2) then\n-    termStr = \"\"\n-  end\n-\n-  local icon_line = \"\"\n-  local no_app = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n-      browserStr = browserStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"Code\") then\n-      editorStr = editorStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"iTerm\") then\n-      termStr = termStr .. \" \" .. icon\n-    end\n-  end\n-  print(\n-    \"BROWSER: \", browserStr,\n-    \"EDITOR: \", editorStr,\n-    \"TERM: \", termStr\n-  )\n-  print('##################')\n-  if (env.INFO.space == 0) then\n-    icon_line = browserStr\n-  end\n-  if (env.INFO.space == 1) then\n-    icon_line = editorStr\n-  end\n-  if (env.INFO.space == 2) then\n-    icon_line = termStr\n-  end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-\n-  if (icon_line == \"\") then\n-    icon_line = \" —\"\n-  end\n-  sbar.animate(\"tanh\", 10, function()\n-    spaces[env.INFO.space]:set({ label = icon_line })\n-  end)\n-end)\n-\n-function onAppFocused(space, app)\n-  print('APP FOCUSSEEEED', space, app)\n-  -- local space = tonumber(space)\n-  -- sbar.exec(\"yabai -m space \" .. space)\n-end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-    local selected = env.SELECTED == \"true\"\n-    local color = selected and colors.grey or colors.bg2\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local browserStr = \"\"\n-local editorStr = \"\"\n-local termStr = \"\"\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- exit function\n-  if env.INFO == nil then\n-    return\n-  else\n-    return\n-  end\n-  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-  --  = tonumber(env.INFO.space)\n-  if (env.INFO.space == 0) then\n-    browserStr = \"\"\n-  end\n-  if (env.INFO.space == 1) then\n-    editorStr = \"\"\n-  end\n-  if (env.INFO.space == 2) then\n-    termStr = \"\"\n-  end\n-\n-  local icon_line = \"\"\n-  local no_app = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n-      browserStr = browserStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"Code\") then\n-      editorStr = editorStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"iTerm\") then\n-      termStr = termStr .. \" \" .. icon\n-    end\n-  end\n-  print(\n-    \"BROWSER: \", browserStr,\n-    \"EDITOR: \", editorStr,\n-    \"TERM: \", termStr\n-  )\n-  print('##################')\n-  if (env.INFO.space == 0) then\n-    icon_line = browserStr\n-  end\n-  if (env.INFO.space == 1) then\n-    icon_line = editorStr\n-  end\n-  if (env.INFO.space == 2) then\n-    icon_line = termStr\n-  end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-\n-  if (icon_line == \"\") then\n-    icon_line = \" —\"\n-  end\n-  sbar.animate(\"tanh\", 10, function()\n-    spaces[env.INFO.space]:set({ label = icon_line })\n-  end)\n-end)\n-\n-function onAppFocused(space, app)\n-  print('APP FOCUSSEEEED', space, app)\n-  -- local space = tonumber(space)\n-  -- sbar.exec(\"yabai -m space \" .. space)\n-end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-\n-return {\n-  onAppFocused = onAppFocused\n-}\n"
                },
                {
                    "date": 1716823219014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n \n \n \n   space:subscribe(\"space_windows_change\", function(env)\n-    -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+    print('WIN STPACE CHANGES', dumpTableToString(env))\n \n     -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n \n     \n"
                },
                {
                    "date": 1716823432399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,8 +211,9 @@\n local editorStr = \"\"\n local termStr = \"\"\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  print('space_window_observe XHAGEXXXr')\n   -- exit function\n   if env.INFO == nil then\n     return\n   else\n"
                },
                {
                    "date": 1716823623163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,15 +139,16 @@\n \n \n \n \n-  space:subscribe(\"space_windows_change\", function(env)\n-    print('WIN STPACE CHANGES', dumpTableToString(env))\n+  space:subscribe(\"front_app_switched\", function(env)\n+    print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n+    debugTable(env)\n+    -- print('WIN STPACE CHANGES', dumpTableToString(env))\n \n     -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n \n-    \n-    print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+    -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n \n \n     -- local selected = env.SELECTED == \"true\"\n     -- local color = selected and colors.grey or colors.bg2\n@@ -211,9 +212,8 @@\n local editorStr = \"\"\n local termStr = \"\"\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  print('space_window_observe XHAGEXXXr')\n   -- exit function\n   if env.INFO == nil then\n     return\n   else\n"
                },
                {
                    "date": 1716823951499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,8 +140,11 @@\n \n \n \n   space:subscribe(\"front_app_switched\", function(env)\n+    if (env.SELECTED == false) then\n+      return\n+    end\n     print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n     debugTable(env)\n     -- print('WIN STPACE CHANGES', dumpTableToString(env))\n \n"
                },
                {
                    "date": 1716823978732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n \n \n \n   space:subscribe(\"front_app_switched\", function(env)\n-    if (env.SELECTED == false) then\n+    if (env.SELECTED ~= true) then\n       return\n     end\n     print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n     debugTable(env)\n"
                },
                {
                    "date": 1716824002462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,10 @@\n \n \n \n   space:subscribe(\"front_app_switched\", function(env)\n-    if (env.SELECTED ~= true) then\n+    if (env.SELECTED ~= \"true\") then\n+      print(\"#### <<<atcher>>>>>\")\n       return\n     end\n     print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n     debugTable(env)\n"
                },
                {
                    "date": 1716824053267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,18 +109,9 @@\n     }\n   })\n \n   space:subscribe(\"space_change\", function(env)\n-    local selected = env.SELECTED == \"true\"\n-    local color = selected and colors.grey or colors.bg2\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n+\n   end)\n \n   space:subscribe(\"mouse.clicked\", function(env)\n     if env.BUTTON == \"other\" then\n@@ -145,9 +136,21 @@\n       print(\"#### <<<atcher>>>>>\")\n       return\n     end\n     print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n+    local selected = env.SELECTED == \"true\"\n+    local color = selected and colors.grey or colors.bg2\n     debugTable(env)\n+\n+    \n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n     -- print('WIN STPACE CHANGES', dumpTableToString(env))\n \n     -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n \n"
                },
                {
                    "date": 1716824340293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,26 +131,37 @@\n \n \n \n   space:subscribe(\"front_app_switched\", function(env)\n-    if (env.SELECTED ~= \"true\") then\n-      print(\"#### <<<atcher>>>>>\")\n-      return\n-    end\n+    -- if (env.SELECTED ~= \"true\") then\n+    --   print(\"#### <<<atcher>>>>>\")\n+    --   return\n+    -- end\n     print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n+    debugTable(env)\n     local selected = env.SELECTED == \"true\"\n     local color = selected and colors.grey or colors.bg2\n-    debugTable(env)\n \n-    \n+    -- space:set({\n+    --   icon = { highlight = selected, },\n+    --   label = { highlight = selected },\n+    --   background = { border_color = selected and colors.black or colors.bg2 }\n+    -- })\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+\n+    -- local color = selected and colors.grey or colors.bg2\n+\n     space:set({\n       icon = { highlight = selected, },\n       label = { highlight = selected },\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n     space_bracket:set({\n       background = { border_color = selected and colors.grey or colors.bg2 }\n     })\n+\n     -- print('WIN STPACE CHANGES', dumpTableToString(env))\n \n     -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n \n@@ -293,14 +304,8 @@\n     spaces[env.INFO.space]:set({ label = icon_line })\n   end)\n end)\n \n-function onAppFocused(space, app)\n-  print('APP FOCUSSEEEED', space, app)\n-  -- local space = tonumber(space)\n-  -- sbar.exec(\"yabai -m space \" .. space)\n-end\n-\n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n   -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n   -- spaces_indicator:set({\n   --   icon = currently_on and icons.switch.off or icons.switch.on\n"
                },
                {
                    "date": 1716824418164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,352 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+\n+\n+\n+\n+\n+  space:subscribe(\"front_app_switched\", function(env)\n+    -- if (env.SELECTED ~= \"true\") then\n+    --   print(\"#### <<<atcher>>>>>\")\n+    --   return\n+    -- end\n+    print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n+    debugTable(env)\n+    local selected = env.SELECTED == \"true\"\n+    local color = selected and colors.grey or colors.bg2\n+\n+    -- space:set({\n+    --   icon = { highlight = selected, },\n+    --   label = { highlight = selected },\n+    --   background = { border_color = selected and colors.black or colors.bg2 }\n+    -- })\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+\n+    -- local color = selected and colors.grey or colors.bg2\n+    sbar.animate(\"tanh\", 30, function()\n+      -- spaces_indicator:set({\n+      --   background = {\n+      --     color = { alpha = 1.0 },\n+      --     border_color = { alpha = 1.0 },\n+      --   },\n+      --   icon = { color = colors.bg1 },\n+      --   label = { width = \"dynamic\" }\n+      -- })\n+      space:set({\n+        icon = { highlight = selected, },\n+        label = { highlight = selected },\n+        background = { border_color = selected and colors.black or colors.bg2 }\n+      })\n+      space_bracket:set({\n+        background = { border_color = selected and colors.grey or colors.bg2 }\n+      })\n+    end)\n+\n+    -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+    -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+    -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+    -- local selected = env.SELECTED == \"true\"\n+    -- local color = selected and colors.grey or colors.bg2\n+    -- space:set({\n+    --   icon = { highlight = selected, },\n+    --   label = { highlight = selected },\n+    --   background = { border_color = selected and colors.black or colors.bg2 }\n+    -- })\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local browserStr = \"\"\n+local editorStr = \"\"\n+local termStr = \"\"\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  -- exit function\n+  if env.INFO == nil then\n+    return\n+  else\n+    return\n+  end\n+  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+  --  = tonumber(env.INFO.space)\n+  if (env.INFO.space == 0) then\n+    browserStr = \"\"\n+  end\n+  if (env.INFO.space == 1) then\n+    editorStr = \"\"\n+  end\n+  if (env.INFO.space == 2) then\n+    termStr = \"\"\n+  end\n+\n+  local icon_line = \"\"\n+  local no_app = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n+      browserStr = browserStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"Code\") then\n+      editorStr = editorStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"iTerm\") then\n+      termStr = termStr .. \" \" .. icon\n+    end\n+  end\n+  print(\n+    \"BROWSER: \", browserStr,\n+    \"EDITOR: \", editorStr,\n+    \"TERM: \", termStr\n+  )\n+  print('##################')\n+  if (env.INFO.space == 0) then\n+    icon_line = browserStr\n+  end\n+  if (env.INFO.space == 1) then\n+    icon_line = editorStr\n+  end\n+  if (env.INFO.space == 2) then\n+    icon_line = termStr\n+  end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+\n+  if (icon_line == \"\") then\n+    icon_line = \" —\"\n+  end\n+  sbar.animate(\"tanh\", 10, function()\n+    spaces[env.INFO.space]:set({ label = icon_line })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n"
                },
                {
                    "date": 1716824593549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,13 @@\n     -- if (env.SELECTED ~= \"true\") then\n     --   print(\"#### <<<atcher>>>>>\")\n     --   return\n     -- end\n-    print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n+    print(\"#### DU NOUVEAU #### ?\", env.INFO,   -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+    local z = spaces_indicator:set({\n+      icon = currently_on and icons.switch.off or icons.switch.on\n+    })\n     debugTable(env)\n     local selected = env.SELECTED == \"true\"\n     local color = selected and colors.grey or colors.bg2\n \n@@ -151,16 +155,16 @@\n     -- })\n \n     -- local color = selected and colors.grey or colors.bg2\n     sbar.animate(\"tanh\", 30, function()\n-      -- spaces_indicator:set({\n-      --   background = {\n-      --     color = { alpha = 1.0 },\n-      --     border_color = { alpha = 1.0 },\n-      --   },\n-      --   icon = { color = colors.bg1 },\n-      --   label = { width = \"dynamic\" }\n-      -- })\n+      spaces_indicator:set({\n+        background = {\n+          color = { alpha = 1.0 },\n+          border_color = { alpha = 1.0 },\n+        },\n+        icon = { color = colors.bg1 },\n+        label = { width = \"dynamic\" }\n+      })\n       space:set({\n         icon = { highlight = selected, },\n         label = { highlight = selected },\n         background = { border_color = selected and colors.black or colors.bg2 }\n@@ -349,347 +353,4 @@\n \n spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-\n-\n-\n-\n-\n-  space:subscribe(\"front_app_switched\", function(env)\n-    -- if (env.SELECTED ~= \"true\") then\n-    --   print(\"#### <<<atcher>>>>>\")\n-    --   return\n-    -- end\n-    print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n-    debugTable(env)\n-    local selected = env.SELECTED == \"true\"\n-    local color = selected and colors.grey or colors.bg2\n-\n-    -- space:set({\n-    --   icon = { highlight = selected, },\n-    --   label = { highlight = selected },\n-    --   background = { border_color = selected and colors.black or colors.bg2 }\n-    -- })\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n-\n-    -- local color = selected and colors.grey or colors.bg2\n-\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-\n-    -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-    -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-    -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-    -- local selected = env.SELECTED == \"true\"\n-    -- local color = selected and colors.grey or colors.bg2\n-    -- space:set({\n-    --   icon = { highlight = selected, },\n-    --   label = { highlight = selected },\n-    --   background = { border_color = selected and colors.black or colors.bg2 }\n-    -- })\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local browserStr = \"\"\n-local editorStr = \"\"\n-local termStr = \"\"\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- exit function\n-  if env.INFO == nil then\n-    return\n-  else\n-    return\n-  end\n-  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-  --  = tonumber(env.INFO.space)\n-  if (env.INFO.space == 0) then\n-    browserStr = \"\"\n-  end\n-  if (env.INFO.space == 1) then\n-    editorStr = \"\"\n-  end\n-  if (env.INFO.space == 2) then\n-    termStr = \"\"\n-  end\n-\n-  local icon_line = \"\"\n-  local no_app = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n-      browserStr = browserStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"Code\") then\n-      editorStr = editorStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"iTerm\") then\n-      termStr = termStr .. \" \" .. icon\n-    end\n-  end\n-  print(\n-    \"BROWSER: \", browserStr,\n-    \"EDITOR: \", editorStr,\n-    \"TERM: \", termStr\n-  )\n-  print('##################')\n-  if (env.INFO.space == 0) then\n-    icon_line = browserStr\n-  end\n-  if (env.INFO.space == 1) then\n-    icon_line = editorStr\n-  end\n-  if (env.INFO.space == 2) then\n-    icon_line = termStr\n-  end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-\n-  if (icon_line == \"\") then\n-    icon_line = \" —\"\n-  end\n-  sbar.animate(\"tanh\", 10, function()\n-    spaces[env.INFO.space]:set({ label = icon_line })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n"
                },
                {
                    "date": 1716824605452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,12 +318,12 @@\n   end)\n end)\n \n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n+  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  spaces_indicator:set({\n+    icon = currently_on and icons.switch.off or icons.switch.on\n+  })\n end)\n \n spaces_indicator:subscribe(\"mouse.entered\", function(env)\n   sbar.animate(\"tanh\", 30, function()\n"
                },
                {
                    "date": 1716824686911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,12 +318,12 @@\n   end)\n end)\n \n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  spaces_indicator:set({\n-    icon = currently_on and icons.switch.off or icons.switch.on\n-  })\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n end)\n \n spaces_indicator:subscribe(\"mouse.entered\", function(env)\n   sbar.animate(\"tanh\", 30, function()\n"
                },
                {
                    "date": 1716824718749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n     --   print(\"#### <<<atcher>>>>>\")\n     --   return\n     -- end\n     print(\"#### DU NOUVEAU #### ?\", env.INFO,   -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n     local z = spaces_indicator:set({\n       icon = currently_on and icons.switch.off or icons.switch.on\n     })\n     debugTable(env)\n@@ -155,16 +155,16 @@\n     -- })\n \n     -- local color = selected and colors.grey or colors.bg2\n     sbar.animate(\"tanh\", 30, function()\n-      spaces_indicator:set({\n-        background = {\n-          color = { alpha = 1.0 },\n-          border_color = { alpha = 1.0 },\n-        },\n-        icon = { color = colors.bg1 },\n-        label = { width = \"dynamic\" }\n-      })\n+      -- spaces_indicator:set({\n+      --   background = {\n+      --     color = { alpha = 1.0 },\n+      --     border_color = { alpha = 1.0 },\n+      --   },\n+      --   icon = { color = colors.bg1 },\n+      --   label = { width = \"dynamic\" }\n+      -- })\n       space:set({\n         icon = { highlight = selected, },\n         label = { highlight = selected },\n         background = { border_color = selected and colors.black or colors.bg2 }\n"
                },
                {
                    "date": 1716824724613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,13 +136,12 @@\n     --   print(\"#### <<<atcher>>>>>\")\n     --   return\n     -- end\n     print(\"#### DU NOUVEAU #### ?\", env.INFO,   -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-    local z = spaces_indicator:set({\n-      icon = currently_on and icons.switch.off or icons.switch.on\n-    })\n-    debugTable(env)\n+    -- spaces_indicator:set({\n+    --   icon = currently_on and icons.switch.off or icons.switch.on\n+    -- })\n+    -- debugTable(env)\n     local selected = env.SELECTED == \"true\"\n     local color = selected and colors.grey or colors.bg2\n \n     -- space:set({\n"
                },
                {
                    "date": 1716824736544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,45 +135,33 @@\n     -- if (env.SELECTED ~= \"true\") then\n     --   print(\"#### <<<atcher>>>>>\")\n     --   return\n     -- end\n-    print(\"#### DU NOUVEAU #### ?\", env.INFO,   -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-    -- spaces_indicator:set({\n-    --   icon = currently_on and icons.switch.off or icons.switch.on\n-    -- })\n-    -- debugTable(env)\n+    print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n+    debugTable(env)\n     local selected = env.SELECTED == \"true\"\n     local color = selected and colors.grey or colors.bg2\n \n-    -- space:set({\n-    --   icon = { highlight = selected, },\n-    --   label = { highlight = selected },\n-    --   background = { border_color = selected and colors.black or colors.bg2 }\n-    -- })\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n \n     -- local color = selected and colors.grey or colors.bg2\n-    sbar.animate(\"tanh\", 30, function()\n-      -- spaces_indicator:set({\n-      --   background = {\n-      --     color = { alpha = 1.0 },\n-      --     border_color = { alpha = 1.0 },\n-      --   },\n-      --   icon = { color = colors.bg1 },\n-      --   label = { width = \"dynamic\" }\n-      -- })\n-      space:set({\n-        icon = { highlight = selected, },\n-        label = { highlight = selected },\n-        background = { border_color = selected and colors.black or colors.bg2 }\n-      })\n-      space_bracket:set({\n-        background = { border_color = selected and colors.grey or colors.bg2 }\n-      })\n-    end)\n \n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+\n     -- print('WIN STPACE CHANGES', dumpTableToString(env))\n \n     -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n \n@@ -316,8 +304,14 @@\n     spaces[env.INFO.space]:set({ label = icon_line })\n   end)\n end)\n \n+function onAppFocused(space, app)\n+  print('APP FOCUSSEEEED', space, app)\n+  -- local space = tonumber(space)\n+  -- sbar.exec(\"yabai -m space \" .. space)\n+end\n+\n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n   -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n   -- spaces_indicator:set({\n   --   icon = currently_on and icons.switch.off or icons.switch.on\n"
                },
                {
                    "date": 1716824749716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n     --   print(\"#### <<<atcher>>>>>\")\n     --   return\n     -- end\n     print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n-    debugTable(env)\n+    -- debugTable(env)\n     local selected = env.SELECTED == \"true\"\n     local color = selected and colors.grey or colors.bg2\n \n     space:set({\n"
                },
                {
                    "date": 1716825051202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,24 @@\n     -- if (env.SELECTED ~= \"true\") then\n     --   print(\"#### <<<atcher>>>>>\")\n     --   return\n     -- end\n+\n+    -- no_app = false\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+\n+    local appType = 0;\n+    local fmApp = env.INFO.app\n+    if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+      appType = 1\n+    end\n+    if string.match(app, \"Code\") then\n+      editorStr = 2\n+    end\n+    if string.match(app, \"iTerm\") then\n+      termStr = 3\n+    end\n     print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n     -- debugTable(env)\n     local selected = env.SELECTED == \"true\"\n     local color = selected and colors.grey or colors.bg2\n"
                },
                {
                    "date": 1716825341003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,31 +131,35 @@\n \n \n \n   space:subscribe(\"front_app_switched\", function(env)\n-    -- if (env.SELECTED ~= \"true\") then\n-    --   print(\"#### <<<atcher>>>>>\")\n-    --   return\n-    -- end\n+    if (env.SELECTED ~= \"true\") then\n+      print(\"#### <<<atcher>>>>>\")\n+      return\n+    end\n \n     -- no_app = false\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local selected = env.SELECTED == \"true\"\n \n     local appType = 0;\n     local fmApp = env.INFO.app\n     if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n       appType = 1\n     end\n-    if string.match(app, \"Code\") then\n-      editorStr = 2\n+    if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+      appType = 2\n     end\n-    if string.match(app, \"iTerm\") then\n-      termStr = 3\n+    if string.match(fmApp, \"iTerm\") then\n+      appType = 3\n     end\n+    if (appType == 0) then\n+      return\n+    end\n+\n     print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n     -- debugTable(env)\n-    local selected = env.SELECTED == \"true\"\n     local color = selected and colors.grey or colors.bg2\n \n     space:set({\n       icon = { highlight = selected, },\n@@ -176,8 +180,10 @@\n     space_bracket:set({\n       background = { border_color = selected and colors.grey or colors.bg2 }\n     })\n \n+\n+    \n     -- print('WIN STPACE CHANGES', dumpTableToString(env))\n \n     -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n \n@@ -185,16 +191,9 @@\n \n \n     -- local selected = env.SELECTED == \"true\"\n     -- local color = selected and colors.grey or colors.bg2\n-    -- space:set({\n-    --   icon = { highlight = selected, },\n-    --   label = { highlight = selected },\n-    --   background = { border_color = selected and colors.black or colors.bg2 }\n-    -- })\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n+\n   end)\n end\n \n \n"
                },
                {
                    "date": 1716825477716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,11 @@\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     local selected = env.SELECTED == \"true\"\n \n     local appType = 0;\n-    local fmApp = env.INFO.app\n+    -- heheh\n+    print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+    local fmApp = env.INFO.apps[1]\n     if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n       appType = 1\n     end\n     if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n"
                },
                {
                    "date": 1716825505584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n \n     local appType = 0;\n     -- heheh\n     print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-    local fmApp = env.INFO.apps[1]\n+    local fmApp = env.INFO.app\n     if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n       appType = 1\n     end\n     if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n"
                },
                {
                    "date": 1716825579863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,366 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+\n+\n+\n+\n+\n+  space:subscribe(\"front_app_switched\", function(env)\n+    if (env.SELECTED ~= \"true\") then\n+      print(\"#### <<<atcher>>>>>\")\n+      return\n+    end\n+\n+    -- no_app = false\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local selected = env.SELECTED == \"true\"\n+\n+    local appType = 0;\n+    -- heheh\n+    print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+    local fmApp = env.INFO\n+    if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+      appType = 1\n+    end\n+    if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+      appType = 2\n+    end\n+    if string.match(fmApp, \"iTerm\") then\n+      appType = 3\n+    end\n+    if (appType == 0) then\n+      return\n+    end\n+\n+    print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n+    -- debugTable(env)\n+    local color = selected and colors.grey or colors.bg2\n+\n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+\n+    -- local color = selected and colors.grey or colors.bg2\n+\n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+\n+\n+    \n+    -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+    -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+    -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+    -- local selected = env.SELECTED == \"true\"\n+    -- local color = selected and colors.grey or colors.bg2\n+\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local browserStr = \"\"\n+local editorStr = \"\"\n+local termStr = \"\"\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  -- exit function\n+  if env.INFO == nil then\n+    return\n+  else\n+    return\n+  end\n+  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+  --  = tonumber(env.INFO.space)\n+  if (env.INFO.space == 0) then\n+    browserStr = \"\"\n+  end\n+  if (env.INFO.space == 1) then\n+    editorStr = \"\"\n+  end\n+  if (env.INFO.space == 2) then\n+    termStr = \"\"\n+  end\n+\n+  local icon_line = \"\"\n+  local no_app = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n+      browserStr = browserStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"Code\") then\n+      editorStr = editorStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"iTerm\") then\n+      termStr = termStr .. \" \" .. icon\n+    end\n+  end\n+  print(\n+    \"BROWSER: \", browserStr,\n+    \"EDITOR: \", editorStr,\n+    \"TERM: \", termStr\n+  )\n+  print('##################')\n+  if (env.INFO.space == 0) then\n+    icon_line = browserStr\n+  end\n+  if (env.INFO.space == 1) then\n+    icon_line = editorStr\n+  end\n+  if (env.INFO.space == 2) then\n+    icon_line = termStr\n+  end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+\n+  if (icon_line == \"\") then\n+    icon_line = \" —\"\n+  end\n+  sbar.animate(\"tanh\", 10, function()\n+    spaces[env.INFO.space]:set({ label = icon_line })\n+  end)\n+end)\n+\n+function onAppFocused(space, app)\n+  print('APP FOCUSSEEEED', space, app)\n+  -- local space = tonumber(space)\n+  -- sbar.exec(\"yabai -m space \" .. space)\n+end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n"
                },
                {
                    "date": 1716825881365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,11 +137,8 @@\n       return\n     end\n \n     -- no_app = false\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local selected = env.SELECTED == \"true\"\n \n     local appType = 0;\n     -- heheh\n     print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n@@ -154,381 +151,21 @@\n     end\n     if string.match(fmApp, \"iTerm\") then\n       appType = 3\n     end\n-    if (appType == 0) then\n+    if (appType ~= selected) then\n       return\n     end\n \n-    print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n-    -- debugTable(env)\n-    local color = selected and colors.grey or colors.bg2\n-\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-\n-    -- local color = selected and colors.grey or colors.bg2\n-\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-\n-\n-    \n-    -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-    -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-    -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-    -- local selected = env.SELECTED == \"true\"\n-    -- local color = selected and colors.grey or colors.bg2\n-\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local browserStr = \"\"\n-local editorStr = \"\"\n-local termStr = \"\"\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- exit function\n-  if env.INFO == nil then\n-    return\n-  else\n-    return\n-  end\n-  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-  --  = tonumber(env.INFO.space)\n-  if (env.INFO.space == 0) then\n-    browserStr = \"\"\n-  end\n-  if (env.INFO.space == 1) then\n-    editorStr = \"\"\n-  end\n-  if (env.INFO.space == 2) then\n-    termStr = \"\"\n-  end\n-\n-  local icon_line = \"\"\n-  local no_app = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n-      browserStr = browserStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"Code\") then\n-      editorStr = editorStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"iTerm\") then\n-      termStr = termStr .. \" \" .. icon\n-    end\n-  end\n-  print(\n-    \"BROWSER: \", browserStr,\n-    \"EDITOR: \", editorStr,\n-    \"TERM: \", termStr\n-  )\n-  print('##################')\n-  if (env.INFO.space == 0) then\n-    icon_line = browserStr\n-  end\n-  if (env.INFO.space == 1) then\n-    icon_line = editorStr\n-  end\n-  if (env.INFO.space == 2) then\n-    icon_line = termStr\n-  end\n+    local selected = env.SELECTED == \"true\" and appType == env.INFO\n+    -- local selected = appType\n \n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-\n-  if (icon_line == \"\") then\n-    icon_line = \" —\"\n-  end\n-  sbar.animate(\"tanh\", 10, function()\n-    spaces[env.INFO.space]:set({ label = icon_line })\n-  end)\n-end)\n-\n-function onAppFocused(space, app)\n-  print('APP FOCUSSEEEED', space, app)\n-  -- local space = tonumber(space)\n-  -- sbar.exec(\"yabai -m space \" .. space)\n-end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-\n-\n-\n-\n-\n-  space:subscribe(\"front_app_switched\", function(env)\n-    if (env.SELECTED ~= \"true\") then\n-      print(\"#### <<<atcher>>>>>\")\n-      return\n-    end\n-\n-    -- no_app = false\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local selected = env.SELECTED == \"true\"\n-\n-    local appType = 0;\n-    -- heheh\n-    print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-    local fmApp = env.INFO.app\n-    if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-      appType = 1\n-    end\n-    if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-      appType = 2\n-    end\n-    if string.match(fmApp, \"iTerm\") then\n-      appType = 3\n-    end\n-    if (appType == 0) then\n-      return\n-    end\n-\n-    print(\"#### DU NOUVEAU front_app_switched ##### ?\")\n+    print(\"#### DU NOUVEAU front_app_switched ##### ?\", selected, appType, env.INFO)\n     -- debugTable(env)\n     local color = selected and colors.grey or colors.bg2\n+    -- for \n \n     space:set({\n       icon = { highlight = selected, },\n       label = { highlight = selected },\n"
                },
                {
                    "date": 1716825965177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,15 +151,16 @@\n     end\n     if string.match(fmApp, \"iTerm\") then\n       appType = 3\n     end\n-    if (appType ~= selected) then\n-      return\n-    end\n+    -- if (appType ~= selected) then\n+    --   return\n+    -- end\n \n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     local selected = env.SELECTED == \"true\" and appType == env.INFO\n+    \n     -- local selected = appType\n \n     print(\"#### DU NOUVEAU front_app_switched ##### ?\", selected, appType, env.INFO)\n     -- debugTable(env)\n"
                },
                {
                    "date": 1716825977653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,370 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+\n+\n+\n+\n+\n+  space:subscribe(\"front_app_switched\", function(env)\n+    if (env.SELECTED ~= \"true\") then\n+      print(\"#### <<<atcher>>>>>\")\n+      return\n+    end\n+\n+    -- no_app = false\n+\n+    local appType = 0;\n+    -- heheh\n+    print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+    local fmApp = env.INFO\n+    if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+      appType = 1\n+    end\n+    if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+      appType = 2\n+    end\n+    if string.match(fmApp, \"iTerm\") then\n+      appType = 3\n+    end\n+    -- if (appType ~= selected) then\n+    --   return\n+    -- end\n+\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local selected = env.SELECTED == \"true\" and appType == env.INFO\n+    \n+    -- local selected = appType\n+\n+    print(\"#### DU NOUVEAU front_app_switched ##### ?\", selected, appType, env.INFO)\n+    debugTable(env)\n+    local color = selected and colors.grey or colors.bg2\n+    -- for \n+\n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+\n+    -- local color = selected and colors.grey or colors.bg2\n+\n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+\n+\n+    \n+    -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+    -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+    -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+    -- local selected = env.SELECTED == \"true\"\n+    -- local color = selected and colors.grey or colors.bg2\n+\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local browserStr = \"\"\n+local editorStr = \"\"\n+local termStr = \"\"\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  -- exit function\n+  if env.INFO == nil then\n+    return\n+  else\n+    return\n+  end\n+  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+  --  = tonumber(env.INFO.space)\n+  if (env.INFO.space == 0) then\n+    browserStr = \"\"\n+  end\n+  if (env.INFO.space == 1) then\n+    editorStr = \"\"\n+  end\n+  if (env.INFO.space == 2) then\n+    termStr = \"\"\n+  end\n+\n+  local icon_line = \"\"\n+  local no_app = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n+      browserStr = browserStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"Code\") then\n+      editorStr = editorStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"iTerm\") then\n+      termStr = termStr .. \" \" .. icon\n+    end\n+  end\n+  print(\n+    \"BROWSER: \", browserStr,\n+    \"EDITOR: \", editorStr,\n+    \"TERM: \", termStr\n+  )\n+  print('##################')\n+  if (env.INFO.space == 0) then\n+    icon_line = browserStr\n+  end\n+  if (env.INFO.space == 1) then\n+    icon_line = editorStr\n+  end\n+  if (env.INFO.space == 2) then\n+    icon_line = termStr\n+  end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+\n+  if (icon_line == \"\") then\n+    icon_line = \" —\"\n+  end\n+  sbar.animate(\"tanh\", 10, function()\n+    spaces[env.INFO.space]:set({ label = icon_line })\n+  end)\n+end)\n+\n+function onAppFocused(space, app)\n+  print('APP FOCUSSEEEED', space, app)\n+  -- local space = tonumber(space)\n+  -- sbar.exec(\"yabai -m space \" .. space)\n+end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n"
                },
                {
                    "date": 1716826056559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,11 +155,11 @@\n     -- if (appType ~= selected) then\n     --   return\n     -- end\n \n-    local lookup = app_icons[app]\n+    local lookup = app_icons[fmApp]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local selected = env.SELECTED == \"true\" and appType == env.INFO\n+    local selected = env.SELECTED == \"true\" and appType == (env.SID + 1)\n     \n     -- local selected = appType\n \n     print(\"#### DU NOUVEAU front_app_switched ##### ?\", selected, appType, env.INFO)\n"
                },
                {
                    "date": 1716826281973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n     -- end\n \n     local lookup = app_icons[fmApp]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local selected = env.SELECTED == \"true\" and appType == (env.SID + 1)\n+    local selected = env.SELECTED == \"true\" and appType == (env.SID)\n     \n     -- local selected = appType\n \n     print(\"#### DU NOUVEAU front_app_switched ##### ?\", selected, appType, env.INFO)\n@@ -367,374 +367,4 @@\n \n spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-\n-\n-\n-\n-\n-  space:subscribe(\"front_app_switched\", function(env)\n-    if (env.SELECTED ~= \"true\") then\n-      print(\"#### <<<atcher>>>>>\")\n-      return\n-    end\n-\n-    -- no_app = false\n-\n-    local appType = 0;\n-    -- heheh\n-    print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-    local fmApp = env.INFO\n-    if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-      appType = 1\n-    end\n-    if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-      appType = 2\n-    end\n-    if string.match(fmApp, \"iTerm\") then\n-      appType = 3\n-    end\n-    -- if (appType ~= selected) then\n-    --   return\n-    -- end\n-\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local selected = env.SELECTED == \"true\" and appType == env.INFO\n-    \n-    -- local selected = appType\n-\n-    print(\"#### DU NOUVEAU front_app_switched ##### ?\", selected, appType, env.INFO)\n-    -- debugTable(env)\n-    local color = selected and colors.grey or colors.bg2\n-    -- for \n-\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-\n-    -- local color = selected and colors.grey or colors.bg2\n-\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-\n-\n-    \n-    -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-    -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-    -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-    -- local selected = env.SELECTED == \"true\"\n-    -- local color = selected and colors.grey or colors.bg2\n-\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local browserStr = \"\"\n-local editorStr = \"\"\n-local termStr = \"\"\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- exit function\n-  if env.INFO == nil then\n-    return\n-  else\n-    return\n-  end\n-  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-  --  = tonumber(env.INFO.space)\n-  if (env.INFO.space == 0) then\n-    browserStr = \"\"\n-  end\n-  if (env.INFO.space == 1) then\n-    editorStr = \"\"\n-  end\n-  if (env.INFO.space == 2) then\n-    termStr = \"\"\n-  end\n-\n-  local icon_line = \"\"\n-  local no_app = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n-      browserStr = browserStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"Code\") then\n-      editorStr = editorStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"iTerm\") then\n-      termStr = termStr .. \" \" .. icon\n-    end\n-  end\n-  print(\n-    \"BROWSER: \", browserStr,\n-    \"EDITOR: \", editorStr,\n-    \"TERM: \", termStr\n-  )\n-  print('##################')\n-  if (env.INFO.space == 0) then\n-    icon_line = browserStr\n-  end\n-  if (env.INFO.space == 1) then\n-    icon_line = editorStr\n-  end\n-  if (env.INFO.space == 2) then\n-    icon_line = termStr\n-  end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-\n-  if (icon_line == \"\") then\n-    icon_line = \" —\"\n-  end\n-  sbar.animate(\"tanh\", 10, function()\n-    spaces[env.INFO.space]:set({ label = icon_line })\n-  end)\n-end)\n-\n-function onAppFocused(space, app)\n-  print('APP FOCUSSEEEED', space, app)\n-  -- local space = tonumber(space)\n-  -- sbar.exec(\"yabai -m space \" .. space)\n-end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n"
                },
                {
                    "date": 1716826291529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n     -- end\n \n     local lookup = app_icons[fmApp]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local selected = env.SELECTED == \"true\" and appType == (env.SID)\n+    local selected = env.SELECTED == \"true\" and appType == (env.SID + 1)\n     \n     -- local selected = appType\n \n     print(\"#### DU NOUVEAU front_app_switched ##### ?\", selected, appType, env.INFO)\n"
                },
                {
                    "date": 1716826300201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,370 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+\n+\n+\n+\n+\n+  space:subscribe(\"front_app_switched\", function(env)\n+    if (env.SELECTED ~= \"true\") then\n+      print(\"#### <<<atcher>>>>>\")\n+      return\n+    end\n+\n+    -- no_app = false\n+\n+    local appType = 0;\n+    -- heheh\n+    print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+    local fmApp = env.INFO\n+    if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+      appType = 1\n+    end\n+    if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+      appType = 2\n+    end\n+    if string.match(fmApp, \"iTerm\") then\n+      appType = 3\n+    end\n+    -- if (appType ~= selected) then\n+    --   return\n+    -- end\n+\n+    local lookup = app_icons[fmApp]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local selected = env.SELECTED == \"true\" and appType == (env.SID + 2)\n+    \n+    -- local selected = appType\n+\n+    print(\"#### DU NOUVEAU front_app_switched ##### ?\", selected, appType, env.INFO)\n+    debugTable(env)\n+    local color = selected and colors.grey or colors.bg2\n+    -- for \n+\n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+\n+    -- local color = selected and colors.grey or colors.bg2\n+\n+    space:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+\n+\n+    \n+    -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+    -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+    -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+    -- local selected = env.SELECTED == \"true\"\n+    -- local color = selected and colors.grey or colors.bg2\n+\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local browserStr = \"\"\n+local editorStr = \"\"\n+local termStr = \"\"\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  -- exit function\n+  if env.INFO == nil then\n+    return\n+  else\n+    return\n+  end\n+  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+  --  = tonumber(env.INFO.space)\n+  if (env.INFO.space == 0) then\n+    browserStr = \"\"\n+  end\n+  if (env.INFO.space == 1) then\n+    editorStr = \"\"\n+  end\n+  if (env.INFO.space == 2) then\n+    termStr = \"\"\n+  end\n+\n+  local icon_line = \"\"\n+  local no_app = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n+      browserStr = browserStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"Code\") then\n+      editorStr = editorStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"iTerm\") then\n+      termStr = termStr .. \" \" .. icon\n+    end\n+  end\n+  print(\n+    \"BROWSER: \", browserStr,\n+    \"EDITOR: \", editorStr,\n+    \"TERM: \", termStr\n+  )\n+  print('##################')\n+  if (env.INFO.space == 0) then\n+    icon_line = browserStr\n+  end\n+  if (env.INFO.space == 1) then\n+    icon_line = editorStr\n+  end\n+  if (env.INFO.space == 2) then\n+    icon_line = termStr\n+  end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+\n+  if (icon_line == \"\") then\n+    icon_line = \" —\"\n+  end\n+  sbar.animate(\"tanh\", 10, function()\n+    spaces[env.INFO.space]:set({ label = icon_line })\n+  end)\n+end)\n+\n+function onAppFocused(space, app)\n+  print('APP FOCUSSEEEED', space, app)\n+  -- local space = tonumber(space)\n+  -- sbar.exec(\"yabai -m space \" .. space)\n+end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n"
                },
                {
                    "date": 1716826310785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,378 +157,8 @@\n     -- end\n \n     local lookup = app_icons[fmApp]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local selected = env.SELECTED == \"true\" and appType == (env.SID + 2)\n-    \n-    -- local selected = appType\n-\n-    print(\"#### DU NOUVEAU front_app_switched ##### ?\", selected, appType, env.INFO)\n-    debugTable(env)\n-    local color = selected and colors.grey or colors.bg2\n-    -- for \n-\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-\n-    -- local color = selected and colors.grey or colors.bg2\n-\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-\n-\n-    \n-    -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-    -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-    -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-    -- local selected = env.SELECTED == \"true\"\n-    -- local color = selected and colors.grey or colors.bg2\n-\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local browserStr = \"\"\n-local editorStr = \"\"\n-local termStr = \"\"\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- exit function\n-  if env.INFO == nil then\n-    return\n-  else\n-    return\n-  end\n-  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-  --  = tonumber(env.INFO.space)\n-  if (env.INFO.space == 0) then\n-    browserStr = \"\"\n-  end\n-  if (env.INFO.space == 1) then\n-    editorStr = \"\"\n-  end\n-  if (env.INFO.space == 2) then\n-    termStr = \"\"\n-  end\n-\n-  local icon_line = \"\"\n-  local no_app = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n-      browserStr = browserStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"Code\") then\n-      editorStr = editorStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"iTerm\") then\n-      termStr = termStr .. \" \" .. icon\n-    end\n-  end\n-  print(\n-    \"BROWSER: \", browserStr,\n-    \"EDITOR: \", editorStr,\n-    \"TERM: \", termStr\n-  )\n-  print('##################')\n-  if (env.INFO.space == 0) then\n-    icon_line = browserStr\n-  end\n-  if (env.INFO.space == 1) then\n-    icon_line = editorStr\n-  end\n-  if (env.INFO.space == 2) then\n-    icon_line = termStr\n-  end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-\n-  if (icon_line == \"\") then\n-    icon_line = \" —\"\n-  end\n-  sbar.animate(\"tanh\", 10, function()\n-    spaces[env.INFO.space]:set({ label = icon_line })\n-  end)\n-end)\n-\n-function onAppFocused(space, app)\n-  print('APP FOCUSSEEEED', space, app)\n-  -- local space = tonumber(space)\n-  -- sbar.exec(\"yabai -m space \" .. space)\n-end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-\n-\n-\n-\n-\n-  space:subscribe(\"front_app_switched\", function(env)\n-    if (env.SELECTED ~= \"true\") then\n-      print(\"#### <<<atcher>>>>>\")\n-      return\n-    end\n-\n-    -- no_app = false\n-\n-    local appType = 0;\n-    -- heheh\n-    print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-    local fmApp = env.INFO\n-    if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-      appType = 1\n-    end\n-    if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-      appType = 2\n-    end\n-    if string.match(fmApp, \"iTerm\") then\n-      appType = 3\n-    end\n-    -- if (appType ~= selected) then\n-    --   return\n-    -- end\n-\n-    local lookup = app_icons[fmApp]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     local selected = env.SELECTED == \"true\" and appType == (env.SID + 1)\n     \n     -- local selected = appType\n \n"
                },
                {
                    "date": 1716826316577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n     -- end\n \n     local lookup = app_icons[fmApp]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local selected = env.SELECTED == \"true\" and appType == (env.SID + 1)\n+    local selected = env.SELECTED == \"true\" and appType == (env.SID )\n     \n     -- local selected = appType\n \n     print(\"#### DU NOUVEAU front_app_switched ##### ?\", selected, appType, env.INFO)\n"
                },
                {
                    "date": 1716826791425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,85 +129,8 @@\n \n \n \n \n-\n-  space:subscribe(\"front_app_switched\", function(env)\n-    if (env.SELECTED ~= \"true\") then\n-      print(\"#### <<<atcher>>>>>\")\n-      return\n-    end\n-\n-    -- no_app = false\n-\n-    local appType = 0;\n-    -- heheh\n-    print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-    local fmApp = env.INFO\n-    if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-      appType = 1\n-    end\n-    if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-      appType = 2\n-    end\n-    if string.match(fmApp, \"iTerm\") then\n-      appType = 3\n-    end\n-    -- if (appType ~= selected) then\n-    --   return\n-    -- end\n-\n-    local lookup = app_icons[fmApp]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local selected = env.SELECTED == \"true\" and appType == (env.SID )\n-    \n-    -- local selected = appType\n-\n-    print(\"#### DU NOUVEAU front_app_switched ##### ?\", selected, appType, env.INFO)\n-    debugTable(env)\n-    local color = selected and colors.grey or colors.bg2\n-    -- for \n-\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-\n-    -- local color = selected and colors.grey or colors.bg2\n-\n-    space:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-\n-\n-    \n-    -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-    -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-    -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-    -- local selected = env.SELECTED == \"true\"\n-    -- local color = selected and colors.grey or colors.bg2\n-\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n local space_window_observer = sbar.add(\"item\", {\n   drawing = false,\n   updates = true,\n })\n@@ -234,8 +157,85 @@\n   }\n })\n \n \n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env))\n+  return\n+\n+  if (env.SELECTED ~= \"true\") then\n+    print(\"#### <<<atcher>>>>>\")\n+    return\n+  end\n+\n+  -- no_app = false\n+\n+  local appType = 0;\n+  -- heheh\n+  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    appType = 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    appType = 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    appType = 3\n+  end\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selected = env.SELECTED == \"true\" and appType == (env.SID + 1)\n+  \n+  -- local selected = appType\n+\n+  print(\"#### DU NOUVEAU front_app_switched ##### ?\", selected, appType, env.INFO)\n+  debugTable(env)\n+  local color = selected and colors.grey or colors.bg2\n+  -- for \n+\n+  space:set({\n+    icon = { highlight = selected, },\n+    label = { highlight = selected },\n+    background = { border_color = selected and colors.black or colors.bg2 }\n+  })\n+  space_bracket:set({\n+    background = { border_color = selected and colors.grey or colors.bg2 }\n+  })\n+\n+  -- local color = selected and colors.grey or colors.bg2\n+\n+  space:set({\n+    icon = { highlight = selected, },\n+    label = { highlight = selected },\n+    background = { border_color = selected and colors.black or colors.bg2 }\n+  })\n+  space_bracket:set({\n+    background = { border_color = selected and colors.grey or colors.bg2 }\n+  })\n+\n+\n+  \n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+\n+end)\n+end\n+\n+\n+\n+\n local tCodeEditors = {\n   \"dev.zed.Zed\",\n   \"com.microsoft.VSCodeInsiders\",\n   \"com.microsoft.VSCode\",\n"
                },
                {
                    "date": 1716826798985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n \n \n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n   print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env))\n-  return\n+  return 0\n \n   if (env.SELECTED ~= \"true\") then\n     print(\"#### <<<atcher>>>>>\")\n     return\n"
                },
                {
                    "date": 1716826807942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n \n \n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n   print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env))\n-  return 0\n+  -- return 0\n \n   if (env.SELECTED ~= \"true\") then\n     print(\"#### <<<atcher>>>>>\")\n     return\n"
                },
                {
                    "date": 1716826894747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,11 +126,15 @@\n   space:subscribe(\"mouse.exited\", function(_)\n     space:set({ popup = { drawing = false } })\n   end)\n \n+end\n \n \n \n+\n+\n+\n local space_window_observer = sbar.add(\"item\", {\n   drawing = false,\n   updates = true,\n })\n@@ -157,85 +161,8 @@\n   }\n })\n \n \n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env))\n-  -- return 0\n-\n-  if (env.SELECTED ~= \"true\") then\n-    print(\"#### <<<atcher>>>>>\")\n-    return\n-  end\n-\n-  -- no_app = false\n-\n-  local appType = 0;\n-  -- heheh\n-  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-  local fmApp = env.INFO\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    appType = 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    appType = 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    appType = 3\n-  end\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selected = env.SELECTED == \"true\" and appType == (env.SID + 1)\n-  \n-  -- local selected = appType\n-\n-  print(\"#### DU NOUVEAU front_app_switched ##### ?\", selected, appType, env.INFO)\n-  debugTable(env)\n-  local color = selected and colors.grey or colors.bg2\n-  -- for \n-\n-  space:set({\n-    icon = { highlight = selected, },\n-    label = { highlight = selected },\n-    background = { border_color = selected and colors.black or colors.bg2 }\n-  })\n-  space_bracket:set({\n-    background = { border_color = selected and colors.grey or colors.bg2 }\n-  })\n-\n-  -- local color = selected and colors.grey or colors.bg2\n-\n-  space:set({\n-    icon = { highlight = selected, },\n-    label = { highlight = selected },\n-    background = { border_color = selected and colors.black or colors.bg2 }\n-  })\n-  space_bracket:set({\n-    background = { border_color = selected and colors.grey or colors.bg2 }\n-  })\n-\n-\n-  \n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n-\n-end)\n-end\n-\n-\n-\n-\n local tCodeEditors = {\n   \"dev.zed.Zed\",\n   \"com.microsoft.VSCodeInsiders\",\n   \"com.microsoft.VSCode\",\n"
                },
                {
                    "date": 1716827134759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,8 +161,9 @@\n   }\n })\n \n \n+\n local tCodeEditors = {\n   \"dev.zed.Zed\",\n   \"com.microsoft.VSCodeInsiders\",\n   \"com.microsoft.VSCode\",\n@@ -294,4 +295,71 @@\n \n spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n+\n+\n+\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  if (env.SELECTED ~= \"true\") then\n+    print(\"#### <<<atcher>>>>>\")\n+    return\n+  end\n+\n+  -- no_app = false\n+\n+  local appType = 0;\n+  -- heheh\n+  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    appType = 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    appType = 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    appType = 3\n+  end\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+  \n+  -- local selected = appType\n+\n+  print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  debugTable(env)\n+  -- for \n+  -- spaces\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    spaces[i]:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+  end\n+\n+\n+\n+\n+\n+  space_bracket:set({\n+    background = { border_color = selected and colors.grey or colors.bg2 }\n+  })\n+  \n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+\n+end)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716827163567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,12 +299,12 @@\n \n \n \n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  if (env.SELECTED ~= \"true\") then\n-    print(\"#### <<<atcher>>>>>\")\n-    return\n-  end\n+  -- if (env.SELECTED ~= \"true\") then\n+  --   print(\"#### <<<atcher>>>>>\")\n+  --   return\n+  -- end\n \n   -- no_app = false\n \n   local appType = 0;\n"
                },
                {
                    "date": 1716827448442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,18 +78,10 @@\n   })\n \n   spaces[i] = space\n \n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n \n+\n   -- Padding space\n   sbar.add(\"space\", \"space.padding.\" .. i, {\n     space = i,\n     script = \"\",\n@@ -125,9 +117,8 @@\n \n   space:subscribe(\"mouse.exited\", function(_)\n     space:set({ popup = { drawing = false } })\n   end)\n-\n end\n \n \n \n@@ -180,24 +171,24 @@\n local termStr = \"\"\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   -- exit function\n-  if env.INFO == nil then\n-    return\n-  else\n-    return\n-  end\n-  print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+  -- if env.INFO == nil then\n+  --   return\n+  -- else\n+  --   return\n+  -- end\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n   --  = tonumber(env.INFO.space)\n-  if (env.INFO.space == 0) then\n-    browserStr = \"\"\n-  end\n-  if (env.INFO.space == 1) then\n-    editorStr = \"\"\n-  end\n-  if (env.INFO.space == 2) then\n-    termStr = \"\"\n-  end\n+  -- if (env.INFO.space == 0) then\n+  --   browserStr = \"\"\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   editorStr = \"\"\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   termStr = \"\"\n+  -- end\n \n   local icon_line = \"\"\n   local no_app = true\n \n@@ -253,13 +244,13 @@\n     spaces[env.INFO.space]:set({ label = icon_line })\n   end)\n end)\n \n-function onAppFocused(space, app)\n-  print('APP FOCUSSEEEED', space, app)\n-  -- local space = tonumber(space)\n-  -- sbar.exec(\"yabai -m space \" .. space)\n-end\n+-- function onAppFocused(space, app)\n+--   print('APP FOCUSSEEEED', space, app)\n+--   -- local space = tonumber(space)\n+--   -- sbar.exec(\"yabai -m space \" .. space)\n+-- end\n \n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n   -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n   -- spaces_indicator:set({\n@@ -297,17 +288,26 @@\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n \n \n+-- Single item bracket for space items to achieve double border on highlight\n \n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n   -- if (env.SELECTED ~= \"true\") then\n   --   print(\"#### <<<atcher>>>>>\")\n   --   return\n   -- end\n \n   -- no_app = false\n-\n+  local space_bracket = sbar.add(\"bracket\", { spaces[env.SID].name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+  \n   local appType = 0;\n   -- heheh\n   print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n   local fmApp = env.INFO\n@@ -326,14 +326,14 @@\n \n   local lookup = app_icons[fmApp]\n   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n   local selectedNum = appType\n-  \n+\n   -- local selected = appType\n \n   print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n   debugTable(env)\n-  -- for \n+  -- for\n   -- spaces\n   for i = 1, 5, 1 do\n     local selected = (i == selectedNum)\n     local color = selected and colors.grey or colors.bg2\n@@ -350,9 +350,9 @@\n \n   space_bracket:set({\n     background = { border_color = selected and colors.grey or colors.bg2 }\n   })\n-  \n+\n   -- print('WIN STPACE CHANGES', dumpTableToString(env))\n \n   -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n \n@@ -360,6 +360,5 @@\n \n \n   -- local selected = env.SELECTED == \"true\"\n   -- local color = selected and colors.grey or colors.bg2\n-\n-end)\n\\ No newline at end of file\n+end)\n"
                },
                {
                    "date": 1716827458029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -297,16 +297,16 @@\n   --   return\n   -- end\n \n   -- no_app = false\n-  local space_bracket = sbar.add(\"bracket\", { spaces[env.SID].name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n+  -- local space_bracket = sbar.add(\"bracket\", { spaces[env.SID].name }, {\n+  --   background = {\n+  --     color = colors.transparent,\n+  --     border_color = colors.bg2,\n+  --     height = 28,\n+  --     border_width = 2\n+  --   }\n+  -- })\n   \n   local appType = 0;\n   -- heheh\n   print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n"
                },
                {
                    "date": 1716827537179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,367 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local browserStr = \"\"\n+local editorStr = \"\"\n+local termStr = \"\"\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  -- exit function\n+  -- if env.INFO == nil then\n+  --   return\n+  -- else\n+  --   return\n+  -- end\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+  --  = tonumber(env.INFO.space)\n+  -- if (env.INFO.space == 0) then\n+  --   browserStr = \"\"\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   editorStr = \"\"\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   termStr = \"\"\n+  -- end\n+\n+  local icon_line = \"\"\n+  local no_app = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n+      browserStr = browserStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"Code\") then\n+      editorStr = editorStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"iTerm\") then\n+      termStr = termStr .. \" \" .. icon\n+    end\n+  end\n+  print(\n+    \"BROWSER: \", browserStr,\n+    \"EDITOR: \", editorStr,\n+    \"TERM: \", termStr\n+  )\n+  print('##################')\n+  if (env.INFO.space == 0) then\n+    icon_line = browserStr\n+  end\n+  if (env.INFO.space == 1) then\n+    icon_line = editorStr\n+  end\n+  if (env.INFO.space == 2) then\n+    icon_line = termStr\n+  end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+\n+  if (icon_line == \"\") then\n+    icon_line = \" —\"\n+  end\n+  sbar.animate(\"tanh\", 10, function()\n+    spaces[env.INFO.space]:set({ label = icon_line })\n+  end)\n+\n+    local space_bracket = sbar.add(\"bracket\", { spaces[env.SID].name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+end)\n+\n+-- function onAppFocused(space, app)\n+--   print('APP FOCUSSEEEED', space, app)\n+--   -- local space = tonumber(space)\n+--   -- sbar.exec(\"yabai -m space \" .. space)\n+-- end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+\n+\n+-- Single item bracket for space items to achieve double border on highlight\n+\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  -- if (env.SELECTED ~= \"true\") then\n+  --   print(\"#### <<<atcher>>>>>\")\n+  --   return\n+  -- end\n+\n+  -- no_app = false\n+\n+\n+  local appType = 0;\n+  -- heheh\n+  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    appType = 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    appType = 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    appType = 3\n+  end\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  -- local selected = appType\n+\n+  print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  debugTable(env)\n+  -- for\n+  -- spaces\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    spaces[i]:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+  end\n+\n+\n+\n+\n+\n+\n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+end)\n"
                },
                {
                    "date": 1716827542852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,16 +243,16 @@\n   sbar.animate(\"tanh\", 10, function()\n     spaces[env.INFO.space]:set({ label = icon_line })\n   end)\n \n-    local space_bracket = sbar.add(\"bracket\", { spaces[env.SID].name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n+  --   local space_bracket = sbar.add(\"bracket\", { spaces[env.SID].name }, {\n+  --   background = {\n+  --     color = colors.transparent,\n+  --     border_color = colors.bg2,\n+  --     height = 28,\n+  --     border_width = 2\n+  --   }\n+  -- })\n end)\n \n -- function onAppFocused(space, app)\n --   print('APP FOCUSSEEEED', space, app)\n@@ -364,368 +364,4 @@\n \n   -- local selected = env.SELECTED == \"true\"\n   -- local color = selected and colors.grey or colors.bg2\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local browserStr = \"\"\n-local editorStr = \"\"\n-local termStr = \"\"\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- exit function\n-  -- if env.INFO == nil then\n-  --   return\n-  -- else\n-  --   return\n-  -- end\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-  --  = tonumber(env.INFO.space)\n-  -- if (env.INFO.space == 0) then\n-  --   browserStr = \"\"\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   editorStr = \"\"\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   termStr = \"\"\n-  -- end\n-\n-  local icon_line = \"\"\n-  local no_app = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n-      browserStr = browserStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"Code\") then\n-      editorStr = editorStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"iTerm\") then\n-      termStr = termStr .. \" \" .. icon\n-    end\n-  end\n-  print(\n-    \"BROWSER: \", browserStr,\n-    \"EDITOR: \", editorStr,\n-    \"TERM: \", termStr\n-  )\n-  print('##################')\n-  if (env.INFO.space == 0) then\n-    icon_line = browserStr\n-  end\n-  if (env.INFO.space == 1) then\n-    icon_line = editorStr\n-  end\n-  if (env.INFO.space == 2) then\n-    icon_line = termStr\n-  end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-\n-  if (icon_line == \"\") then\n-    icon_line = \" —\"\n-  end\n-  sbar.animate(\"tanh\", 10, function()\n-    spaces[env.INFO.space]:set({ label = icon_line })\n-  end)\n-end)\n-\n--- function onAppFocused(space, app)\n---   print('APP FOCUSSEEEED', space, app)\n---   -- local space = tonumber(space)\n---   -- sbar.exec(\"yabai -m space \" .. space)\n--- end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-\n-\n--- Single item bracket for space items to achieve double border on highlight\n-\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  -- if (env.SELECTED ~= \"true\") then\n-  --   print(\"#### <<<atcher>>>>>\")\n-  --   return\n-  -- end\n-\n-  -- no_app = false\n-  -- local space_bracket = sbar.add(\"bracket\", { spaces[env.SID].name }, {\n-  --   background = {\n-  --     color = colors.transparent,\n-  --     border_color = colors.bg2,\n-  --     height = 28,\n-  --     border_width = 2\n-  --   }\n-  -- })\n-  \n-  local appType = 0;\n-  -- heheh\n-  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-  local fmApp = env.INFO\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    appType = 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    appType = 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    appType = 3\n-  end\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  -- local selected = appType\n-\n-  print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n-  debugTable(env)\n-  -- for\n-  -- spaces\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    spaces[i]:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-  end\n-\n-\n-\n-\n-\n-  space_bracket:set({\n-    background = { border_color = selected and colors.grey or colors.bg2 }\n-  })\n-\n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n-end)\n"
                },
                {
                    "date": 1716827555043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,17 +242,8 @@\n   end\n   sbar.animate(\"tanh\", 10, function()\n     spaces[env.INFO.space]:set({ label = icon_line })\n   end)\n-\n-  --   local space_bracket = sbar.add(\"bracket\", { spaces[env.SID].name }, {\n-  --   background = {\n-  --     color = colors.transparent,\n-  --     border_color = colors.bg2,\n-  --     height = 28,\n-  --     border_width = 2\n-  --   }\n-  -- })\n end)\n \n -- function onAppFocused(space, app)\n --   print('APP FOCUSSEEEED', space, app)\n@@ -306,10 +297,17 @@\n   --   return\n   -- end\n \n   -- no_app = false\n-\n-\n+  -- local space_bracket = sbar.add(\"bracket\", { spaces[env.SID].name }, {\n+  --   background = {\n+  --     color = colors.transparent,\n+  --     border_color = colors.bg2,\n+  --     height = 28,\n+  --     border_width = 2\n+  --   }\n+  -- })\n+  \n   local appType = 0;\n   -- heheh\n   print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n   local fmApp = env.INFO\n@@ -343,18 +341,17 @@\n       icon = { highlight = selected, },\n       label = { highlight = selected },\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n-\n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n   end\n \n \n \n \n \n+  space_bracket:set({\n+    background = { border_color = selected and colors.grey or colors.bg2 }\n+  })\n \n   -- print('WIN STPACE CHANGES', dumpTableToString(env))\n \n   -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n"
                },
                {
                    "date": 1716827569955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,9 +305,9 @@\n   --     height = 28,\n   --     border_width = 2\n   --   }\n   -- })\n-  \n+\n   local appType = 0;\n   -- heheh\n   print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n   local fmApp = env.INFO\n@@ -341,17 +341,18 @@\n       icon = { highlight = selected, },\n       label = { highlight = selected },\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n+\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n   end\n \n \n \n \n \n-  space_bracket:set({\n-    background = { border_color = selected and colors.grey or colors.bg2 }\n-  })\n \n   -- print('WIN STPACE CHANGES', dumpTableToString(env))\n \n   -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n"
                },
                {
                    "date": 1716827647723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,18 +296,10 @@\n   --   print(\"#### <<<atcher>>>>>\")\n   --   return\n   -- end\n \n-  -- no_app = false\n-  -- local space_bracket = sbar.add(\"bracket\", { spaces[env.SID].name }, {\n-  --   background = {\n-  --     color = colors.transparent,\n-  --     border_color = colors.bg2,\n-  --     height = 28,\n-  --     border_width = 2\n-  --   }\n-  -- })\n \n+\n   local appType = 0;\n   -- heheh\n   print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n   local fmApp = env.INFO\n@@ -336,8 +328,17 @@\n   -- spaces\n   for i = 1, 5, 1 do\n     local selected = (i == selectedNum)\n     local color = selected and colors.grey or colors.bg2\n+    -- no_app = false\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n     spaces[i]:set({\n       icon = { highlight = selected, },\n       label = { highlight = selected },\n       background = { border_color = selected and colors.black or colors.bg2 }\n"
                },
                {
                    "date": 1716827685936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -343,11 +343,11 @@\n       label = { highlight = selected },\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n \n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n   end\n \n \n \n"
                },
                {
                    "date": 1716827692546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,366 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local browserStr = \"\"\n+local editorStr = \"\"\n+local termStr = \"\"\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  -- exit function\n+  -- if env.INFO == nil then\n+  --   return\n+  -- else\n+  --   return\n+  -- end\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+  --  = tonumber(env.INFO.space)\n+  -- if (env.INFO.space == 0) then\n+  --   browserStr = \"\"\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   editorStr = \"\"\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   termStr = \"\"\n+  -- end\n+\n+  local icon_line = \"\"\n+  local no_app = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n+      browserStr = browserStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"Code\") then\n+      editorStr = editorStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"iTerm\") then\n+      termStr = termStr .. \" \" .. icon\n+    end\n+  end\n+  print(\n+    \"BROWSER: \", browserStr,\n+    \"EDITOR: \", editorStr,\n+    \"TERM: \", termStr\n+  )\n+  print('##################')\n+  if (env.INFO.space == 0) then\n+    icon_line = browserStr\n+  end\n+  if (env.INFO.space == 1) then\n+    icon_line = editorStr\n+  end\n+  if (env.INFO.space == 2) then\n+    icon_line = termStr\n+  end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+\n+  if (icon_line == \"\") then\n+    icon_line = \" —\"\n+  end\n+  sbar.animate(\"tanh\", 10, function()\n+    spaces[env.INFO.space]:set({ label = icon_line })\n+  end)\n+end)\n+\n+-- function onAppFocused(space, app)\n+--   print('APP FOCUSSEEEED', space, app)\n+--   -- local space = tonumber(space)\n+--   -- sbar.exec(\"yabai -m space \" .. space)\n+-- end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+\n+\n+-- Single item bracket for space items to achieve double border on highlight\n+\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  -- if (env.SELECTED ~= \"true\") then\n+  --   print(\"#### <<<atcher>>>>>\")\n+  --   return\n+  -- end\n+\n+\n+\n+  local appType = 0;\n+  -- heheh\n+  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    appType = 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    appType = 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    appType = 3\n+  end\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  -- local selected = appType\n+\n+  print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  debugTable(env)\n+  -- for\n+  -- spaces\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    -- no_app = false\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    spaces[i]:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+\n+    space_bracket:set({\n+      background = { border_color = selected and colors.grey or colors.bg2 }\n+    })\n+  end\n+\n+\n+\n+\n+\n+\n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+end)\n"
                },
                {
                    "date": 1716827700250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -343,374 +343,8 @@\n       label = { highlight = selected },\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n \n-    space_bracket:set({\n-      background = { border_color = selected and colors.grey or colors.bg2 }\n-    })\n-  end\n-\n-\n-\n-\n-\n-\n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n-end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local browserStr = \"\"\n-local editorStr = \"\"\n-local termStr = \"\"\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- exit function\n-  -- if env.INFO == nil then\n-  --   return\n-  -- else\n-  --   return\n-  -- end\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-  --  = tonumber(env.INFO.space)\n-  -- if (env.INFO.space == 0) then\n-  --   browserStr = \"\"\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   editorStr = \"\"\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   termStr = \"\"\n-  -- end\n-\n-  local icon_line = \"\"\n-  local no_app = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n-      browserStr = browserStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"Code\") then\n-      editorStr = editorStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"iTerm\") then\n-      termStr = termStr .. \" \" .. icon\n-    end\n-  end\n-  print(\n-    \"BROWSER: \", browserStr,\n-    \"EDITOR: \", editorStr,\n-    \"TERM: \", termStr\n-  )\n-  print('##################')\n-  if (env.INFO.space == 0) then\n-    icon_line = browserStr\n-  end\n-  if (env.INFO.space == 1) then\n-    icon_line = editorStr\n-  end\n-  if (env.INFO.space == 2) then\n-    icon_line = termStr\n-  end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-\n-  if (icon_line == \"\") then\n-    icon_line = \" —\"\n-  end\n-  sbar.animate(\"tanh\", 10, function()\n-    spaces[env.INFO.space]:set({ label = icon_line })\n-  end)\n-end)\n-\n--- function onAppFocused(space, app)\n---   print('APP FOCUSSEEEED', space, app)\n---   -- local space = tonumber(space)\n---   -- sbar.exec(\"yabai -m space \" .. space)\n--- end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-\n-\n--- Single item bracket for space items to achieve double border on highlight\n-\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  -- if (env.SELECTED ~= \"true\") then\n-  --   print(\"#### <<<atcher>>>>>\")\n-  --   return\n-  -- end\n-\n-\n-\n-  local appType = 0;\n-  -- heheh\n-  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-  local fmApp = env.INFO\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    appType = 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    appType = 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    appType = 3\n-  end\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  -- local selected = appType\n-\n-  print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n-  debugTable(env)\n-  -- for\n-  -- spaces\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    -- no_app = false\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    spaces[i]:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-\n     -- space_bracket:set({\n     --   background = { border_color = selected and colors.grey or colors.bg2 }\n     -- })\n   end\n"
                },
                {
                    "date": 1716827751723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,29 +325,32 @@\n   print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n   debugTable(env)\n   -- for\n   -- spaces\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    -- no_app = false\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    spaces[i]:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n+  sbar.animate(\"tanh\", 10, function()\n \n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n+    for i = 1, 5, 1 do\n+      local selected = (i == selectedNum)\n+      local color = selected and colors.grey or colors.bg2\n+      -- no_app = false\n+      local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+        background = {\n+          color = colors.transparent,\n+          border_color = colors.bg2,\n+          height = 28,\n+          border_width = 2\n+        }\n+      })\n+      spaces[i]:set({\n+        icon = { highlight = selected, },\n+        label = { highlight = selected },\n+        background = { border_color = selected and colors.black or colors.bg2 }\n+      })\n+\n+      -- space_bracket:set({\n+      --   background = { border_color = selected and colors.grey or colors.bg2 }\n+      -- })\n+    end\n   end\n \n \n \n"
                },
                {
                    "date": 1716827757884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,9 +325,9 @@\n   print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n   debugTable(env)\n   -- for\n   -- spaces\n-  sbar.animate(\"tanh\", 10, function()\n+  -- sbar.animate(\"tanh\", 10, function()\n \n     for i = 1, 5, 1 do\n       local selected = (i == selectedNum)\n       local color = selected and colors.grey or colors.bg2\n@@ -348,9 +348,9 @@\n \n       -- space_bracket:set({\n       --   background = { border_color = selected and colors.grey or colors.bg2 }\n       -- })\n-    end\n+    -- end\n   end\n \n \n \n"
                },
                {
                    "date": 1716827824461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,29 +327,37 @@\n   -- for\n   -- spaces\n   -- sbar.animate(\"tanh\", 10, function()\n \n-    for i = 1, 5, 1 do\n-      local selected = (i == selectedNum)\n-      local color = selected and colors.grey or colors.bg2\n-      -- no_app = false\n-      local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-        background = {\n-          color = colors.transparent,\n-          border_color = colors.bg2,\n-          height = 28,\n-          border_width = 2\n-        }\n-      })\n-      spaces[i]:set({\n-        icon = { highlight = selected, },\n-        label = { highlight = selected },\n-        background = { border_color = selected and colors.black or colors.bg2 }\n-      })\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    -- no_app = false\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    spaces[i]:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n \n-      -- space_bracket:set({\n-      --   background = { border_color = selected and colors.grey or colors.bg2 }\n-      -- })\n+    local icon_line = \"\"\n+    if (icon_line == \"\") then\n+      icon_line = \" —\"\n+    end\n+    sbar.animate(\"tanh\", 10, function()\n+      spaces[i]:set({ label = icon_line })\n+    end)\n+\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n     -- end\n   end\n \n \n"
                },
                {
                    "date": 1716827914841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -345,12 +345,9 @@\n       label = { highlight = selected },\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n \n-    local icon_line = \"\"\n-    if (icon_line == \"\") then\n-      icon_line = \" —\"\n-    end\n+    local icon_line = selected and \" —\" or \"\"\n     sbar.animate(\"tanh\", 10, function()\n       spaces[i]:set({ label = icon_line })\n     end)\n \n"
                },
                {
                    "date": 1716828004635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,11 +346,15 @@\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n \n     local icon_line = selected and \" —\" or \"\"\n-    sbar.animate(\"tanh\", 10, function()\n-      spaces[i]:set({ label = icon_line })\n-    end)\n+    if (selected) then\n+      spaces[i]:set({ label = \"\" })\n+    else\n+      sbar.animate(\"tanh\", 10, function()\n+        spaces[i]:set({ label = \" - \" })\n+      end)\n+    end\n \n     -- space_bracket:set({\n     --   background = { border_color = selected and colors.grey or colors.bg2 }\n     -- })\n"
                },
                {
                    "date": 1716828016401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,9 +346,9 @@\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n \n     local icon_line = selected and \" —\" or \"\"\n-    if (selected) then\n+    if (not selected) then\n       spaces[i]:set({ label = \"\" })\n     else\n       sbar.animate(\"tanh\", 10, function()\n         spaces[i]:set({ label = \" - \" })\n"
                },
                {
                    "date": 1716828229058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,10 +349,10 @@\n     local icon_line = selected and \" —\" or \"\"\n     if (not selected) then\n       spaces[i]:set({ label = \"\" })\n     else\n-      sbar.animate(\"tanh\", 10, function()\n-        spaces[i]:set({ label = \" - \" })\n+      sbar.animate(\"tanh\", 100, function()\n+        spaces[i]:set({ label = \"  \" })\n       end)\n     end\n \n     -- space_bracket:set({\n"
                },
                {
                    "date": 1716828257656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,10 +349,10 @@\n     local icon_line = selected and \" —\" or \"\"\n     if (not selected) then\n       spaces[i]:set({ label = \"\" })\n     else\n-      sbar.animate(\"tanh\", 100, function()\n-        spaces[i]:set({ label = \"  \" })\n+      sbar.animate(\"tanh\", 10, function()\n+        spaces[i]:set({ label = icons.switch.on })\n       end)\n     end\n \n     -- space_bracket:set({\n"
                },
                {
                    "date": 1716828279442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,9 +350,9 @@\n     if (not selected) then\n       spaces[i]:set({ label = \"\" })\n     else\n       sbar.animate(\"tanh\", 10, function()\n-        spaces[i]:set({ label = icons.switch.on })\n+        spaces[i]:set({ label = icons.apple })\n       end)\n     end\n \n     -- space_bracket:set({\n"
                },
                {
                    "date": 1716828590492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,31 +165,20 @@\n   \"Chrome\",\n   \"Browser\",\n }\n \n-local browserStr = \"\"\n-local editorStr = \"\"\n-local termStr = \"\"\n \n+\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- exit function\n-  -- if env.INFO == nil then\n-  --   return\n-  -- else\n-  --   return\n-  -- end\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-  --  = tonumber(env.INFO.space)\n-  -- if (env.INFO.space == 0) then\n-  --   browserStr = \"\"\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   editorStr = \"\"\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   termStr = \"\"\n-  -- end\n-\n+  if env.INFO.space ~= 0 then\n+    return\n+  else \n+    print ('DYAH BUN DEM')\n+    return\n+  end\n+  local browserStr = \"\"\n+  local editorStr = \"\"\n+  local termStr = \"\"\n   local icon_line = \"\"\n   local no_app = true\n \n   for app, count in pairs(env.INFO.apps) do\n@@ -204,23 +193,23 @@\n     if string.match(app, \"iTerm\") then\n       termStr = termStr .. \" \" .. icon\n     end\n   end\n-  print(\n-    \"BROWSER: \", browserStr,\n-    \"EDITOR: \", editorStr,\n-    \"TERM: \", termStr\n-  )\n-  print('##################')\n-  if (env.INFO.space == 0) then\n-    icon_line = browserStr\n-  end\n-  if (env.INFO.space == 1) then\n-    icon_line = editorStr\n-  end\n-  if (env.INFO.space == 2) then\n-    icon_line = termStr\n-  end\n+  -- print(\n+  --   \"BROWSER: \", browserStr,\n+  --   \"EDITOR: \", editorStr,\n+  --   \"TERM: \", termStr\n+  -- )\n+  -- print('##################')\n+  -- if (env.INFO.space == 0) then\n+  --   icon_line = browserStr\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   icon_line = editorStr\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   icon_line = termStr\n+  -- end\n \n \n \n   -- for app, count in pairs(env.INFO.apps) do\n"
                },
                {
                    "date": 1716828641121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n \n \n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  if env.INFO.space ~= 0 then\n+  if env.INFO.space ~= 1 then\n     return\n   else \n     print ('DYAH BUN DEM')\n     return\n"
                },
                {
                    "date": 1716828986285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,377 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  if env.INFO.space ~= 1 then\n+    return\n+  else\n+    print('DYAH BUN DEM')\n+    -- return\n+  end\n+  local browserStr = \"\"\n+  local editorStr = \"\"\n+  local termStr = \"\"\n+  local icon_line = \"\"\n+  local no_app = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n+      browserStr = browserStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"Code\") then\n+      editorStr = editorStr .. \" \" .. icon\n+    end\n+    if string.match(app, \"iTerm\") then\n+      termStr = termStr .. \" \" .. icon\n+    end\n+  end\n+\n+\n+  for i = 1, 5, 1 do\n+    local label = \"\"\n+    if (i == 1) then\n+      label = browserStr\n+    elseif (i == 2) then\n+      label = editorStr\n+    elseif (i == 3) then\n+      label = termStr\n+    else\n+      label = \" —\"\n+    end\n+    spaces[env.INFO.space]:set({ label = label })\n+    -- end)\n+  end\n+\n+  -- print(\n+  --   \"BROWSER: \", browserStr,\n+  --   \"EDITOR: \", editorStr,\n+  --   \"TERM: \", termStr\n+  -- )\n+  -- print('##################')\n+  -- if (env.INFO.space == 0) then\n+  --   icon_line = browserStr\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   icon_line = editorStr\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   icon_line = termStr\n+  -- end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+end)\n+\n+-- function onAppFocused(space, app)\n+--   print('APP FOCUSSEEEED', space, app)\n+--   -- local space = tonumber(space)\n+--   -- sbar.exec(\"yabai -m space \" .. space)\n+-- end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+\n+\n+-- Single item bracket for space items to achieve double border on highlight\n+\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  -- if (env.SELECTED ~= \"true\") then\n+  --   print(\"#### <<<atcher>>>>>\")\n+  --   return\n+  -- end\n+\n+\n+\n+  local appType = 0;\n+  -- heheh\n+  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    appType = 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    appType = 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    appType = 3\n+  end\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  -- local selected = appType\n+\n+  print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  debugTable(env)\n+  -- for\n+  -- spaces\n+  -- sbar.animate(\"tanh\", 10, function()\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    -- no_app = false\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    spaces[i]:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+\n+    local icon_line = selected and \" —\" or \"\"\n+    if (not selected) then\n+      spaces[i]:set({ label = \"\" })\n+    else\n+      sbar.animate(\"tanh\", 10, function()\n+        spaces[i]:set({ label = icons.apple })\n+      end)\n+    end\n+\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+    -- end\n+  end\n+\n+\n+\n+\n+\n+\n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+end)\n"
                },
                {
                    "date": 1716829014632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -345,383 +345,16 @@\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n \n     local icon_line = selected and \" —\" or \"\"\n-    if (not selected) then\n-      spaces[i]:set({ label = \"\" })\n-    else\n-      sbar.animate(\"tanh\", 10, function()\n-        spaces[i]:set({ label = icons.apple })\n-      end)\n-    end\n-\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n+    -- if (not selected) then\n+    --   spaces[i]:set({ label = \"\" })\n+    -- else\n+    --   sbar.animate(\"tanh\", 10, function()\n+    --     spaces[i]:set({ label = icons.apple })\n+    --   end)\n     -- end\n-  end\n \n-\n-\n-\n-\n-\n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n-end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  if env.INFO.space ~= 1 then\n-    return\n-  else \n-    print ('DYAH BUN DEM')\n-    return\n-  end\n-  local browserStr = \"\"\n-  local editorStr = \"\"\n-  local termStr = \"\"\n-  local icon_line = \"\"\n-  local no_app = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n-      browserStr = browserStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"Code\") then\n-      editorStr = editorStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"iTerm\") then\n-      termStr = termStr .. \" \" .. icon\n-    end\n-  end\n-  -- print(\n-  --   \"BROWSER: \", browserStr,\n-  --   \"EDITOR: \", editorStr,\n-  --   \"TERM: \", termStr\n-  -- )\n-  -- print('##################')\n-  -- if (env.INFO.space == 0) then\n-  --   icon_line = browserStr\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   icon_line = editorStr\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   icon_line = termStr\n-  -- end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-\n-  if (icon_line == \"\") then\n-    icon_line = \" —\"\n-  end\n-  sbar.animate(\"tanh\", 10, function()\n-    spaces[env.INFO.space]:set({ label = icon_line })\n-  end)\n-end)\n-\n--- function onAppFocused(space, app)\n---   print('APP FOCUSSEEEED', space, app)\n---   -- local space = tonumber(space)\n---   -- sbar.exec(\"yabai -m space \" .. space)\n--- end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-\n-\n--- Single item bracket for space items to achieve double border on highlight\n-\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  -- if (env.SELECTED ~= \"true\") then\n-  --   print(\"#### <<<atcher>>>>>\")\n-  --   return\n-  -- end\n-\n-\n-\n-  local appType = 0;\n-  -- heheh\n-  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-  local fmApp = env.INFO\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    appType = 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    appType = 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    appType = 3\n-  end\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  -- local selected = appType\n-\n-  print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n-  debugTable(env)\n-  -- for\n-  -- spaces\n-  -- sbar.animate(\"tanh\", 10, function()\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    -- no_app = false\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    spaces[i]:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-\n-    local icon_line = selected and \" —\" or \"\"\n-    if (not selected) then\n-      spaces[i]:set({ label = \"\" })\n-    else\n-      sbar.animate(\"tanh\", 10, function()\n-        spaces[i]:set({ label = icons.apple })\n-      end)\n-    end\n-\n     -- space_bracket:set({\n     --   background = { border_color = selected and colors.grey or colors.bg2 }\n     -- })\n     -- end\n"
                },
                {
                    "date": 1716829062745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,8 +169,9 @@\n \n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   if env.INFO.space ~= 1 then\n+    print(\"REFUSED\")\n     return\n   else\n     print('DYAH BUN DEM')\n     -- return\n"
                },
                {
                    "date": 1716829085014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,9 +321,9 @@\n   local selectedNum = appType\n \n   -- local selected = appType\n \n-  print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n   debugTable(env)\n   -- for\n   -- spaces\n   -- sbar.animate(\"tanh\", 10, function()\n"
                },
                {
                    "date": 1716829468505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,376 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+function getAppType(fmApp)\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    return 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    return 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    return 3\n+  end\n+  return 0\n+end\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  if env.INFO.space ~= 1 then\n+    print(\"REFUSED\")\n+    return\n+  else\n+    print('DYAH BUN DEM')\n+    -- return\n+  end\n+  local spaceTypes = {}\n+  -- local browserStr = \"\"\n+  -- local editorStr = \"\"\n+  -- local termStr = \"\"\n+  local icon_line  = \"\"\n+  local no_app     = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local appType = getAppType(app) or 0\n+    spaceTypes[appType] = spaceTypes[appType] .. \" \" .. icon\n+  end\n+\n+\n+  -- for i = 1, 5, 1 do\n+  --   local label = \"\"\n+  --   if (i == 1) then\n+  --     label = browserStr\n+  --   elseif (i == 2) then\n+  --     label = editorStr\n+  --   elseif (i == 3) then\n+  --     label = termStr\n+  --   else\n+  --     label = \" —\"\n+  --   end\n+  --   spaces[env.INFO.space]:set({ label = label })\n+  --   -- end)\n+  -- end\n+\n+  -- print(\n+  --   \"BROWSER: \", browserStr,\n+  --   \"EDITOR: \", editorStr,\n+  --   \"TERM: \", termStr\n+  -- )\n+  -- print('##################')\n+  -- if (env.INFO.space == 0) then\n+  --   icon_line = browserStr\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   icon_line = editorStr\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   icon_line = termStr\n+  -- end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+end)\n+\n+-- function onAppFocused(space, app)\n+--   print('APP FOCUSSEEEED', space, app)\n+--   -- local space = tonumber(space)\n+--   -- sbar.exec(\"yabai -m space \" .. space)\n+-- end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+\n+\n+-- Single item bracket for space items to achieve double border on highlight\n+\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  -- if (env.SELECTED ~= \"true\") then\n+  --   print(\"#### <<<atcher>>>>>\")\n+  --   return\n+  -- end\n+\n+\n+\n+  local appType = getAppType(env.INFO) or 0;\n+  -- heheh\n+  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  -- local selected = appType\n+\n+  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  debugTable(env)\n+  -- for\n+  -- spaces\n+  -- sbar.animate(\"tanh\", 10, function()\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    -- no_app = false\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    spaces[i]:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+\n+    local icon_line = selected and \" —\" or \"\"\n+    -- if (not selected) then\n+    --   spaces[i]:set({ label = \"\" })\n+    -- else\n+    --   sbar.animate(\"tanh\", 10, function()\n+    --     spaces[i]:set({ label = icons.apple })\n+    --   end)\n+    -- end\n+\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+    -- end\n+  end\n+\n+\n+\n+\n+\n+\n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+end)\n"
                },
                {
                    "date": 1716829528697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,10 +200,15 @@\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     local appType = getAppType(app) or 0\n     spaceTypes[appType] = spaceTypes[appType] .. \" \" .. icon\n   end\n+  -- evert spacetypes:\n+  for i = 1, 3, 1 do\n+    spaces[env.INFO.space]:set({ label = spaceTypes[i] or \" -\" })\n+  end\n \n \n+\n   -- for i = 1, 5, 1 do\n   --   local label = \"\"\n   --   if (i == 1) then\n   --     label = browserStr\n@@ -373,382 +378,4 @@\n \n   -- local selected = env.SELECTED == \"true\"\n   -- local color = selected and colors.grey or colors.bg2\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  if env.INFO.space ~= 1 then\n-    print(\"REFUSED\")\n-    return\n-  else\n-    print('DYAH BUN DEM')\n-    -- return\n-  end\n-  local browserStr = \"\"\n-  local editorStr = \"\"\n-  local termStr = \"\"\n-  local icon_line = \"\"\n-  local no_app = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    if string.match(app, \"Chrome\") or string.match(app, \"Safari\") then\n-      browserStr = browserStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"Code\") then\n-      editorStr = editorStr .. \" \" .. icon\n-    end\n-    if string.match(app, \"iTerm\") then\n-      termStr = termStr .. \" \" .. icon\n-    end\n-  end\n-\n-\n-  for i = 1, 5, 1 do\n-    local label = \"\"\n-    if (i == 1) then\n-      label = browserStr\n-    elseif (i == 2) then\n-      label = editorStr\n-    elseif (i == 3) then\n-      label = termStr\n-    else\n-      label = \" —\"\n-    end\n-    spaces[env.INFO.space]:set({ label = label })\n-    -- end)\n-  end\n-\n-  -- print(\n-  --   \"BROWSER: \", browserStr,\n-  --   \"EDITOR: \", editorStr,\n-  --   \"TERM: \", termStr\n-  -- )\n-  -- print('##################')\n-  -- if (env.INFO.space == 0) then\n-  --   icon_line = browserStr\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   icon_line = editorStr\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   icon_line = termStr\n-  -- end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-end)\n-\n--- function onAppFocused(space, app)\n---   print('APP FOCUSSEEEED', space, app)\n---   -- local space = tonumber(space)\n---   -- sbar.exec(\"yabai -m space \" .. space)\n--- end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-\n-\n--- Single item bracket for space items to achieve double border on highlight\n-\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  -- if (env.SELECTED ~= \"true\") then\n-  --   print(\"#### <<<atcher>>>>>\")\n-  --   return\n-  -- end\n-\n-\n-\n-  local appType = 0;\n-  -- heheh\n-  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-  local fmApp = env.INFO\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    appType = 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    appType = 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    appType = 3\n-  end\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  -- local selected = appType\n-\n-  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n-  debugTable(env)\n-  -- for\n-  -- spaces\n-  -- sbar.animate(\"tanh\", 10, function()\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    -- no_app = false\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    spaces[i]:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-\n-    local icon_line = selected and \" —\" or \"\"\n-    -- if (not selected) then\n-    --   spaces[i]:set({ label = \"\" })\n-    -- else\n-    --   sbar.animate(\"tanh\", 10, function()\n-    --     spaces[i]:set({ label = icons.apple })\n-    --   end)\n-    -- end\n-\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n-    -- end\n-  end\n-\n-\n-\n-\n-\n-\n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n-end)\n"
                },
                {
                    "date": 1716829559131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n   for app, count in pairs(env.INFO.apps) do\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     local appType = getAppType(app) or 0\n-    spaceTypes[appType] = spaceTypes[appType] .. \" \" .. icon\n+    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n   end\n   -- evert spacetypes:\n   for i = 1, 3, 1 do\n     spaces[env.INFO.space]:set({ label = spaceTypes[i] or \" -\" })\n"
                },
                {
                    "date": 1716829767468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,382 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+function getAppType(fmApp)\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    return 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    return 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    return 3\n+  end\n+  return 0\n+end\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser     = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local SpaceOps     = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n+--\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  if env.INFO.space > 3 then\n+    print(\"REFUSED\")\n+    return\n+  else\n+    print('DYAH BUN DEM')\n+    -- return\n+  end\n+  local spaceTypes = {}\n+  -- local browserStr = \"\"\n+  -- local editorStr = \"\"\n+  -- local termStr = \"\"\n+  local icon_line  = \"\"\n+  local no_app     = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local appType = getAppType(app) or 0\n+    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+  end\n+  -- evert spacetypes:\n+  for i = 1, 3, 1 do\n+    spaces[env.INFO.space]:set({ label = spaceTypes[i] or \" -\" })\n+  end\n+\n+\n+\n+  -- for i = 1, 5, 1 do\n+  --   local label = \"\"\n+  --   if (i == 1) then\n+  --     label = browserStr\n+  --   elseif (i == 2) then\n+  --     label = editorStr\n+  --   elseif (i == 3) then\n+  --     label = termStr\n+  --   else\n+  --     label = \" —\"\n+  --   end\n+  --   spaces[env.INFO.space]:set({ label = label })\n+  --   -- end)\n+  -- end\n+\n+  -- print(\n+  --   \"BROWSER: \", browserStr,\n+  --   \"EDITOR: \", editorStr,\n+  --   \"TERM: \", termStr\n+  -- )\n+  -- print('##################')\n+  -- if (env.INFO.space == 0) then\n+  --   icon_line = browserStr\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   icon_line = editorStr\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   icon_line = termStr\n+  -- end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+end)\n+\n+-- function onAppFocused(space, app)\n+--   print('APP FOCUSSEEEED', space, app)\n+--   -- local space = tonumber(space)\n+--   -- sbar.exec(\"yabai -m space \" .. space)\n+-- end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+\n+\n+-- Single item bracket for space items to achieve double border on highlight\n+\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  -- if (env.SELECTED ~= \"true\") then\n+  --   print(\"#### <<<atcher>>>>>\")\n+  --   return\n+  -- end\n+\n+\n+\n+  local appType = getAppType(env.INFO) or 0;\n+  -- heheh\n+  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  -- local selected = appType\n+\n+  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  debugTable(env)\n+  -- for\n+  -- spaces\n+  -- sbar.animate(\"tanh\", 10, function()\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    -- no_app = false\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    spaces[i]:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+\n+    local icon_line = selected and \" —\" or \"\"\n+    -- if (not selected) then\n+    --   spaces[i]:set({ label = \"\" })\n+    -- else\n+    --   sbar.animate(\"tanh\", 10, function()\n+    --     spaces[i]:set({ label = icons.apple })\n+    --   end)\n+    -- end\n+\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+    -- end\n+  end\n+\n+\n+\n+\n+\n+\n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+end)\n"
                },
                {
                    "date": 1716830129966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n   \"Chrome\",\n   \"Browser\",\n }\n \n-local SpaceOps     = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n+local SpaceOps     = {};\n --\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   if env.INFO.space > 3 then\n@@ -188,14 +188,14 @@\n   else\n     print('DYAH BUN DEM')\n     -- return\n   end\n-  local spaceTypes = {}\n+  local spaceTypes         = {\"\", \"\", \"\", \"\", \"\"}\n   -- local browserStr = \"\"\n   -- local editorStr = \"\"\n   -- local termStr = \"\"\n-  local icon_line  = \"\"\n-  local no_app     = true\n+  local icon_line          = \"\"\n+  local no_app             = true\n \n   for app, count in pairs(env.INFO.apps) do\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n@@ -203,11 +203,12 @@\n     spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n   end\n   -- evert spacetypes:\n   for i = 1, 3, 1 do\n-    spaces[env.INFO.space]:set({ label = spaceTypes[i] or \" -\" })\n+    spaces[env.INFO.space][i]:set({ label = spaceTypes[i] or \" -\" })\n   end\n \n+  -- SpaceOps[env.INFO.space] = spaceTypes\n \n \n   -- for i = 1, 5, 1 do\n   --   local label = \"\"\n@@ -379,385 +380,4 @@\n \n   -- local selected = env.SELECTED == \"true\"\n   -- local color = selected and colors.grey or colors.bg2\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-function getAppType(fmApp)\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    return 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    return 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    return 3\n-  end\n-  return 0\n-end\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  if env.INFO.space ~= 1 then\n-    print(\"REFUSED\")\n-    return\n-  else\n-    print('DYAH BUN DEM')\n-    -- return\n-  end\n-  local spaceTypes = {}\n-  -- local browserStr = \"\"\n-  -- local editorStr = \"\"\n-  -- local termStr = \"\"\n-  local icon_line  = \"\"\n-  local no_app     = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local appType = getAppType(app) or 0\n-    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-  end\n-  -- evert spacetypes:\n-  for i = 1, 3, 1 do\n-    spaces[env.INFO.space]:set({ label = spaceTypes[i] or \" -\" })\n-  end\n-\n-\n-\n-  -- for i = 1, 5, 1 do\n-  --   local label = \"\"\n-  --   if (i == 1) then\n-  --     label = browserStr\n-  --   elseif (i == 2) then\n-  --     label = editorStr\n-  --   elseif (i == 3) then\n-  --     label = termStr\n-  --   else\n-  --     label = \" —\"\n-  --   end\n-  --   spaces[env.INFO.space]:set({ label = label })\n-  --   -- end)\n-  -- end\n-\n-  -- print(\n-  --   \"BROWSER: \", browserStr,\n-  --   \"EDITOR: \", editorStr,\n-  --   \"TERM: \", termStr\n-  -- )\n-  -- print('##################')\n-  -- if (env.INFO.space == 0) then\n-  --   icon_line = browserStr\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   icon_line = editorStr\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   icon_line = termStr\n-  -- end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-end)\n-\n--- function onAppFocused(space, app)\n---   print('APP FOCUSSEEEED', space, app)\n---   -- local space = tonumber(space)\n---   -- sbar.exec(\"yabai -m space \" .. space)\n--- end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-\n-\n--- Single item bracket for space items to achieve double border on highlight\n-\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  -- if (env.SELECTED ~= \"true\") then\n-  --   print(\"#### <<<atcher>>>>>\")\n-  --   return\n-  -- end\n-\n-\n-\n-  local appType = getAppType(env.INFO) or 0;\n-  -- heheh\n-  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-  local fmApp = env.INFO\n-\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  -- local selected = appType\n-\n-  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n-  debugTable(env)\n-  -- for\n-  -- spaces\n-  -- sbar.animate(\"tanh\", 10, function()\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    -- no_app = false\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    spaces[i]:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-\n-    local icon_line = selected and \" —\" or \"\"\n-    -- if (not selected) then\n-    --   spaces[i]:set({ label = \"\" })\n-    -- else\n-    --   sbar.animate(\"tanh\", 10, function()\n-    --     spaces[i]:set({ label = icons.apple })\n-    --   end)\n-    -- end\n-\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n-    -- end\n-  end\n-\n-\n-\n-\n-\n-\n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n-end)\n"
                },
                {
                    "date": 1716830383631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,14 +181,13 @@\n local SpaceOps     = {};\n --\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  if env.INFO.space > 3 then\n+  if env.INFO.space == env.SIP then\n     print(\"REFUSED\")\n     return\n   else\n     print('DYAH BUN DEM')\n-    -- return\n   end\n   local spaceTypes         = {\"\", \"\", \"\", \"\", \"\"}\n   -- local browserStr = \"\"\n   -- local editorStr = \"\"\n"
                },
                {
                    "date": 1716830415839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,383 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+function getAppType(fmApp)\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    return 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    return 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    return 3\n+  end\n+  return 0\n+end\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser     = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local SpaceOps     = {};\n+--\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  if env.INFO.space == env.SIP then\n+    print(\"REFUSED\")\n+    return\n+  else\n+    print('DYAH BUN DEM')\n+  end\n+  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n+  -- local browserStr = \"\"\n+  -- local editorStr = \"\"\n+  -- local termStr = \"\"\n+  local icon_line  = \"\"\n+  local no_app     = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local appType = getAppType(app) or 0\n+    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+  end\n+  -- evert spacetypes:\n+  for i = 1, 3, 1 do\n+    print('SET DES ICONS', i, env.INFO.space)\n+    spaces[env.INFO.space][i]:set({ label = spaceTypes[i] or \" -\" })\n+  end\n+\n+  -- SpaceOps[env.INFO.space] = spaceTypes\n+\n+\n+  -- for i = 1, 5, 1 do\n+  --   local label = \"\"\n+  --   if (i == 1) then\n+  --     label = browserStr\n+  --   elseif (i == 2) then\n+  --     label = editorStr\n+  --   elseif (i == 3) then\n+  --     label = termStr\n+  --   else\n+  --     label = \" —\"\n+  --   end\n+  --   spaces[env.INFO.space]:set({ label = label })\n+  --   -- end)\n+  -- end\n+\n+  -- print(\n+  --   \"BROWSER: \", browserStr,\n+  --   \"EDITOR: \", editorStr,\n+  --   \"TERM: \", termStr\n+  -- )\n+  -- print('##################')\n+  -- if (env.INFO.space == 0) then\n+  --   icon_line = browserStr\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   icon_line = editorStr\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   icon_line = termStr\n+  -- end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+end)\n+\n+-- function onAppFocused(space, app)\n+--   print('APP FOCUSSEEEED', space, app)\n+--   -- local space = tonumber(space)\n+--   -- sbar.exec(\"yabai -m space \" .. space)\n+-- end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+\n+\n+-- Single item bracket for space items to achieve double border on highlight\n+\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  -- if (env.SELECTED ~= \"true\") then\n+  --   print(\"#### <<<atcher>>>>>\")\n+  --   return\n+  -- end\n+\n+\n+\n+  local appType = getAppType(env.INFO) or 0;\n+  -- heheh\n+  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  -- local selected = appType\n+\n+  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  debugTable(env)\n+  -- for\n+  -- spaces\n+  -- sbar.animate(\"tanh\", 10, function()\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    -- no_app = false\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    spaces[i]:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+\n+    local icon_line = selected and \" —\" or \"\"\n+    -- if (not selected) then\n+    --   spaces[i]:set({ label = \"\" })\n+    -- else\n+    --   sbar.animate(\"tanh\", 10, function()\n+    --     spaces[i]:set({ label = icons.apple })\n+    --   end)\n+    -- end\n+\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+    -- end\n+  end\n+\n+\n+\n+\n+\n+\n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+end)\n"
                },
                {
                    "date": 1716830448417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n \n \n   local appType = getAppType(env.INFO) or 0;\n   -- heheh\n-  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n   local fmApp = env.INFO\n \n   -- if (appType ~= selected) then\n   --   return\n@@ -380,386 +380,4 @@\n \n   -- local selected = env.SELECTED == \"true\"\n   -- local color = selected and colors.grey or colors.bg2\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-function getAppType(fmApp)\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    return 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    return 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    return 3\n-  end\n-  return 0\n-end\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser     = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local SpaceOps     = {};\n---\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  if env.INFO.space == env.SIP then\n-    print(\"REFUSED\")\n-    return\n-  else\n-    print('DYAH BUN DEM')\n-  end\n-  local spaceTypes         = {\"\", \"\", \"\", \"\", \"\"}\n-  -- local browserStr = \"\"\n-  -- local editorStr = \"\"\n-  -- local termStr = \"\"\n-  local icon_line          = \"\"\n-  local no_app             = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local appType = getAppType(app) or 0\n-    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-  end\n-  -- evert spacetypes:\n-  for i = 1, 3, 1 do\n-    spaces[env.INFO.space][i]:set({ label = spaceTypes[i] or \" -\" })\n-  end\n-\n-  -- SpaceOps[env.INFO.space] = spaceTypes\n-\n-\n-  -- for i = 1, 5, 1 do\n-  --   local label = \"\"\n-  --   if (i == 1) then\n-  --     label = browserStr\n-  --   elseif (i == 2) then\n-  --     label = editorStr\n-  --   elseif (i == 3) then\n-  --     label = termStr\n-  --   else\n-  --     label = \" —\"\n-  --   end\n-  --   spaces[env.INFO.space]:set({ label = label })\n-  --   -- end)\n-  -- end\n-\n-  -- print(\n-  --   \"BROWSER: \", browserStr,\n-  --   \"EDITOR: \", editorStr,\n-  --   \"TERM: \", termStr\n-  -- )\n-  -- print('##################')\n-  -- if (env.INFO.space == 0) then\n-  --   icon_line = browserStr\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   icon_line = editorStr\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   icon_line = termStr\n-  -- end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-end)\n-\n--- function onAppFocused(space, app)\n---   print('APP FOCUSSEEEED', space, app)\n---   -- local space = tonumber(space)\n---   -- sbar.exec(\"yabai -m space \" .. space)\n--- end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-\n-\n--- Single item bracket for space items to achieve double border on highlight\n-\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  -- if (env.SELECTED ~= \"true\") then\n-  --   print(\"#### <<<atcher>>>>>\")\n-  --   return\n-  -- end\n-\n-\n-\n-  local appType = getAppType(env.INFO) or 0;\n-  -- heheh\n-  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-  local fmApp = env.INFO\n-\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  -- local selected = appType\n-\n-  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n-  debugTable(env)\n-  -- for\n-  -- spaces\n-  -- sbar.animate(\"tanh\", 10, function()\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    -- no_app = false\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    spaces[i]:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-\n-    local icon_line = selected and \" —\" or \"\"\n-    -- if (not selected) then\n-    --   spaces[i]:set({ label = \"\" })\n-    -- else\n-    --   sbar.animate(\"tanh\", 10, function()\n-    --     spaces[i]:set({ label = icons.apple })\n-    --   end)\n-    -- end\n-\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n-    -- end\n-  end\n-\n-\n-\n-\n-\n-\n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n-end)\n"
                },
                {
                    "date": 1716830565966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,11 +182,12 @@\n --\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   if env.INFO.space == env.SIP then\n-    print(\"REFUSED\")\n+    print(\"REFUSED\", env.INFO.space, env.SIP)\n     return\n   else\n+    print(\"ok\", env.INFO.space, env.SIP)\n     print('DYAH BUN DEM')\n   end\n   local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n   -- local browserStr = \"\"\n"
                },
                {
                    "date": 1716830613739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,9 +204,9 @@\n   end\n   -- evert spacetypes:\n   for i = 1, 3, 1 do\n     print('SET DES ICONS', i, env.INFO.space)\n-    spaces[env.INFO.space][i]:set({ label = spaceTypes[i] or \" -\" })\n+    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n   end\n \n   -- SpaceOps[env.INFO.space] = spaceTypes\n \n"
                },
                {
                    "date": 1716830637261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n local SpaceOps     = {};\n --\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  if env.INFO.space == env.SIP then\n+  if env.INFO.space ~= env.SIP then\n     print(\"REFUSED\", env.INFO.space, env.SIP)\n     return\n   else\n     print(\"ok\", env.INFO.space, env.SIP)\n"
                },
                {
                    "date": 1716830691194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,385 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+function getAppType(fmApp)\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    return 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    return 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    return 3\n+  end\n+  return 0\n+end\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser     = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local SpaceOps     = {};\n+--\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  debugTable(env)\n+  if env.INFO.space ~= env.SIP then\n+    print(\"REFUSED\", env.INFO.space, env.SIP)\n+    return\n+  else\n+    print(\"ok\", env.INFO.space, env.SIP)\n+    print('DYAH BUN DEM')\n+  end\n+  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n+  -- local browserStr = \"\"\n+  -- local editorStr = \"\"\n+  -- local termStr = \"\"\n+  local icon_line  = \"\"\n+  local no_app     = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local appType = getAppType(app) or 0\n+    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+  end\n+  -- evert spacetypes:\n+  for i = 1, 3, 1 do\n+    print('SET DES ICONS', i, env.INFO.space)\n+    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n+  end\n+\n+  -- SpaceOps[env.INFO.space] = spaceTypes\n+\n+\n+  -- for i = 1, 5, 1 do\n+  --   local label = \"\"\n+  --   if (i == 1) then\n+  --     label = browserStr\n+  --   elseif (i == 2) then\n+  --     label = editorStr\n+  --   elseif (i == 3) then\n+  --     label = termStr\n+  --   else\n+  --     label = \" —\"\n+  --   end\n+  --   spaces[env.INFO.space]:set({ label = label })\n+  --   -- end)\n+  -- end\n+\n+  -- print(\n+  --   \"BROWSER: \", browserStr,\n+  --   \"EDITOR: \", editorStr,\n+  --   \"TERM: \", termStr\n+  -- )\n+  -- print('##################')\n+  -- if (env.INFO.space == 0) then\n+  --   icon_line = browserStr\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   icon_line = editorStr\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   icon_line = termStr\n+  -- end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+end)\n+\n+-- function onAppFocused(space, app)\n+--   print('APP FOCUSSEEEED', space, app)\n+--   -- local space = tonumber(space)\n+--   -- sbar.exec(\"yabai -m space \" .. space)\n+-- end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+\n+\n+-- Single item bracket for space items to achieve double border on highlight\n+\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  -- if (env.SELECTED ~= \"true\") then\n+  --   print(\"#### <<<atcher>>>>>\")\n+  --   return\n+  -- end\n+\n+\n+\n+  local appType = getAppType(env.INFO) or 0;\n+  -- heheh\n+  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  -- local selected = appType\n+\n+  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  debugTable(env)\n+  -- for\n+  -- spaces\n+  -- sbar.animate(\"tanh\", 10, function()\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    -- no_app = false\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    spaces[i]:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+\n+    local icon_line = selected and \" —\" or \"\"\n+    -- if (not selected) then\n+    --   spaces[i]:set({ label = \"\" })\n+    -- else\n+    --   sbar.animate(\"tanh\", 10, function()\n+    --     spaces[i]:set({ label = icons.apple })\n+    --   end)\n+    -- end\n+\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+    -- end\n+  end\n+\n+\n+\n+\n+\n+\n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+end)\n"
                },
                {
                    "date": 1716830701206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,386 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+function getAppType(fmApp)\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    return 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    return 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    return 3\n+  end\n+  return 0\n+end\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser     = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local SpaceOps     = {};\n+--\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  debugTable(env)\n+  print('')\n+  if env.INFO.space ~= env.SIP then\n+    print(\"REFUSED\", env.INFO.space, env.SIP)\n+    return\n+  else\n+    print(\"ok\", env.INFO.space, env.SIP)\n+    print('DYAH BUN DEM')\n+  end\n+  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n+  -- local browserStr = \"\"\n+  -- local editorStr = \"\"\n+  -- local termStr = \"\"\n+  local icon_line  = \"\"\n+  local no_app     = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local appType = getAppType(app) or 0\n+    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+  end\n+  -- evert spacetypes:\n+  for i = 1, 3, 1 do\n+    print('SET DES ICONS', i, env.INFO.space)\n+    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n+  end\n+\n+  -- SpaceOps[env.INFO.space] = spaceTypes\n+\n+\n+  -- for i = 1, 5, 1 do\n+  --   local label = \"\"\n+  --   if (i == 1) then\n+  --     label = browserStr\n+  --   elseif (i == 2) then\n+  --     label = editorStr\n+  --   elseif (i == 3) then\n+  --     label = termStr\n+  --   else\n+  --     label = \" —\"\n+  --   end\n+  --   spaces[env.INFO.space]:set({ label = label })\n+  --   -- end)\n+  -- end\n+\n+  -- print(\n+  --   \"BROWSER: \", browserStr,\n+  --   \"EDITOR: \", editorStr,\n+  --   \"TERM: \", termStr\n+  -- )\n+  -- print('##################')\n+  -- if (env.INFO.space == 0) then\n+  --   icon_line = browserStr\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   icon_line = editorStr\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   icon_line = termStr\n+  -- end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+end)\n+\n+-- function onAppFocused(space, app)\n+--   print('APP FOCUSSEEEED', space, app)\n+--   -- local space = tonumber(space)\n+--   -- sbar.exec(\"yabai -m space \" .. space)\n+-- end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+\n+\n+-- Single item bracket for space items to achieve double border on highlight\n+\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  -- if (env.SELECTED ~= \"true\") then\n+  --   print(\"#### <<<atcher>>>>>\")\n+  --   return\n+  -- end\n+\n+\n+\n+  local appType = getAppType(env.INFO) or 0;\n+  -- heheh\n+  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  -- local selected = appType\n+\n+  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  debugTable(env)\n+  -- for\n+  -- spaces\n+  -- sbar.animate(\"tanh\", 10, function()\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    -- no_app = false\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    spaces[i]:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+\n+    local icon_line = selected and \" —\" or \"\"\n+    -- if (not selected) then\n+    --   spaces[i]:set({ label = \"\" })\n+    -- else\n+    --   sbar.animate(\"tanh\", 10, function()\n+    --     spaces[i]:set({ label = icons.apple })\n+    --   end)\n+    -- end\n+\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+    -- end\n+  end\n+\n+\n+\n+\n+\n+\n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+end)\n"
                },
                {
                    "date": 1716830750319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,9 @@\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   debugTable(env)\n   print('')\n-  if env.INFO.space ~= env.SIP then\n+  if env.INFO.space ~= 1 then\n     print(\"REFUSED\", env.INFO.space, env.SIP)\n     return\n   else\n     print(\"ok\", env.INFO.space, env.SIP)\n@@ -383,773 +383,4 @@\n \n   -- local selected = env.SELECTED == \"true\"\n   -- local color = selected and colors.grey or colors.bg2\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-function getAppType(fmApp)\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    return 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    return 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    return 3\n-  end\n-  return 0\n-end\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser     = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local SpaceOps     = {};\n---\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  debugTable(env)\n-  if env.INFO.space ~= env.SIP then\n-    print(\"REFUSED\", env.INFO.space, env.SIP)\n-    return\n-  else\n-    print(\"ok\", env.INFO.space, env.SIP)\n-    print('DYAH BUN DEM')\n-  end\n-  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n-  -- local browserStr = \"\"\n-  -- local editorStr = \"\"\n-  -- local termStr = \"\"\n-  local icon_line  = \"\"\n-  local no_app     = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local appType = getAppType(app) or 0\n-    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-  end\n-  -- evert spacetypes:\n-  for i = 1, 3, 1 do\n-    print('SET DES ICONS', i, env.INFO.space)\n-    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n-  end\n-\n-  -- SpaceOps[env.INFO.space] = spaceTypes\n-\n-\n-  -- for i = 1, 5, 1 do\n-  --   local label = \"\"\n-  --   if (i == 1) then\n-  --     label = browserStr\n-  --   elseif (i == 2) then\n-  --     label = editorStr\n-  --   elseif (i == 3) then\n-  --     label = termStr\n-  --   else\n-  --     label = \" —\"\n-  --   end\n-  --   spaces[env.INFO.space]:set({ label = label })\n-  --   -- end)\n-  -- end\n-\n-  -- print(\n-  --   \"BROWSER: \", browserStr,\n-  --   \"EDITOR: \", editorStr,\n-  --   \"TERM: \", termStr\n-  -- )\n-  -- print('##################')\n-  -- if (env.INFO.space == 0) then\n-  --   icon_line = browserStr\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   icon_line = editorStr\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   icon_line = termStr\n-  -- end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-end)\n-\n--- function onAppFocused(space, app)\n---   print('APP FOCUSSEEEED', space, app)\n---   -- local space = tonumber(space)\n---   -- sbar.exec(\"yabai -m space \" .. space)\n--- end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-\n-\n--- Single item bracket for space items to achieve double border on highlight\n-\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  -- if (env.SELECTED ~= \"true\") then\n-  --   print(\"#### <<<atcher>>>>>\")\n-  --   return\n-  -- end\n-\n-\n-\n-  local appType = getAppType(env.INFO) or 0;\n-  -- heheh\n-  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-  local fmApp = env.INFO\n-\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  -- local selected = appType\n-\n-  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n-  debugTable(env)\n-  -- for\n-  -- spaces\n-  -- sbar.animate(\"tanh\", 10, function()\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    -- no_app = false\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    spaces[i]:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-\n-    local icon_line = selected and \" —\" or \"\"\n-    -- if (not selected) then\n-    --   spaces[i]:set({ label = \"\" })\n-    -- else\n-    --   sbar.animate(\"tanh\", 10, function()\n-    --     spaces[i]:set({ label = icons.apple })\n-    --   end)\n-    -- end\n-\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n-    -- end\n-  end\n-\n-\n-\n-\n-\n-\n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n-end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-function getAppType(fmApp)\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    return 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    return 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    return 3\n-  end\n-  return 0\n-end\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser     = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local SpaceOps     = {};\n---\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  if env.INFO.space ~= env.SIP then\n-    print(\"REFUSED\", env.INFO.space, env.SIP)\n-    return\n-  else\n-    print(\"ok\", env.INFO.space, env.SIP)\n-    print('DYAH BUN DEM')\n-  end\n-  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n-  -- local browserStr = \"\"\n-  -- local editorStr = \"\"\n-  -- local termStr = \"\"\n-  local icon_line  = \"\"\n-  local no_app     = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local appType = getAppType(app) or 0\n-    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-  end\n-  -- evert spacetypes:\n-  for i = 1, 3, 1 do\n-    print('SET DES ICONS', i, env.INFO.space)\n-    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n-  end\n-\n-  -- SpaceOps[env.INFO.space] = spaceTypes\n-\n-\n-  -- for i = 1, 5, 1 do\n-  --   local label = \"\"\n-  --   if (i == 1) then\n-  --     label = browserStr\n-  --   elseif (i == 2) then\n-  --     label = editorStr\n-  --   elseif (i == 3) then\n-  --     label = termStr\n-  --   else\n-  --     label = \" —\"\n-  --   end\n-  --   spaces[env.INFO.space]:set({ label = label })\n-  --   -- end)\n-  -- end\n-\n-  -- print(\n-  --   \"BROWSER: \", browserStr,\n-  --   \"EDITOR: \", editorStr,\n-  --   \"TERM: \", termStr\n-  -- )\n-  -- print('##################')\n-  -- if (env.INFO.space == 0) then\n-  --   icon_line = browserStr\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   icon_line = editorStr\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   icon_line = termStr\n-  -- end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-end)\n-\n--- function onAppFocused(space, app)\n---   print('APP FOCUSSEEEED', space, app)\n---   -- local space = tonumber(space)\n---   -- sbar.exec(\"yabai -m space \" .. space)\n--- end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-\n-\n--- Single item bracket for space items to achieve double border on highlight\n-\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  -- if (env.SELECTED ~= \"true\") then\n-  --   print(\"#### <<<atcher>>>>>\")\n-  --   return\n-  -- end\n-\n-\n-\n-  local appType = getAppType(env.INFO) or 0;\n-  -- heheh\n-  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-  local fmApp = env.INFO\n-\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  -- local selected = appType\n-\n-  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n-  debugTable(env)\n-  -- for\n-  -- spaces\n-  -- sbar.animate(\"tanh\", 10, function()\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    -- no_app = false\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    spaces[i]:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-\n-    local icon_line = selected and \" —\" or \"\"\n-    -- if (not selected) then\n-    --   spaces[i]:set({ label = \"\" })\n-    -- else\n-    --   sbar.animate(\"tanh\", 10, function()\n-    --     spaces[i]:set({ label = icons.apple })\n-    --   end)\n-    -- end\n-\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n-    -- end\n-  end\n-\n-\n-\n-\n-\n-\n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n-end)\n"
                },
                {
                    "date": 1716830800596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,8 +202,9 @@\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     local appType = getAppType(app) or 0\n     spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+    printf('Icons:spaceTypes[appType].')\n   end\n   -- evert spacetypes:\n   for i = 1, 3, 1 do\n     print('SET DES ICONS', i, env.INFO.space)\n"
                },
                {
                    "date": 1716830823968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,387 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+function getAppType(fmApp)\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    return 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    return 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    return 3\n+  end\n+  return 0\n+end\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser     = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local SpaceOps     = {};\n+--\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  debugTable(env)\n+  print('')\n+  if env.INFO.space ~= 1 then\n+    print(\"REFUSED\", env.INFO.space, env.SIP)\n+    return\n+  else\n+    print(\"ok\", env.INFO.space, env.SIP)\n+    print('DYAH BUN DEM')\n+  end\n+  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n+  -- local browserStr = \"\"\n+  -- local editorStr = \"\"\n+  -- local termStr = \"\"\n+  local icon_line  = \"\"\n+  local no_app     = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local appType = getAppType(app) or 0\n+    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+    -- sprint('Icons:spaceTypes[appType]')\n+  end\n+  -- evert spacetypes:\n+  for i = 1, 3, 1 do\n+    print('SET DES ICONS', i, env.INFO.space)\n+    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n+  end\n+\n+  -- SpaceOps[env.INFO.space] = spaceTypes\n+\n+\n+  -- for i = 1, 5, 1 do\n+  --   local label = \"\"\n+  --   if (i == 1) then\n+  --     label = browserStr\n+  --   elseif (i == 2) then\n+  --     label = editorStr\n+  --   elseif (i == 3) then\n+  --     label = termStr\n+  --   else\n+  --     label = \" —\"\n+  --   end\n+  --   spaces[env.INFO.space]:set({ label = label })\n+  --   -- end)\n+  -- end\n+\n+  -- print(\n+  --   \"BROWSER: \", browserStr,\n+  --   \"EDITOR: \", editorStr,\n+  --   \"TERM: \", termStr\n+  -- )\n+  -- print('##################')\n+  -- if (env.INFO.space == 0) then\n+  --   icon_line = browserStr\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   icon_line = editorStr\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   icon_line = termStr\n+  -- end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+end)\n+\n+-- function onAppFocused(space, app)\n+--   print('APP FOCUSSEEEED', space, app)\n+--   -- local space = tonumber(space)\n+--   -- sbar.exec(\"yabai -m space \" .. space)\n+-- end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+\n+\n+-- Single item bracket for space items to achieve double border on highlight\n+\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  -- if (env.SELECTED ~= \"true\") then\n+  --   print(\"#### <<<atcher>>>>>\")\n+  --   return\n+  -- end\n+\n+\n+\n+  local appType = getAppType(env.INFO) or 0;\n+  -- heheh\n+  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  -- local selected = appType\n+\n+  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  debugTable(env)\n+  -- for\n+  -- spaces\n+  -- sbar.animate(\"tanh\", 10, function()\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    -- no_app = false\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    spaces[i]:set({\n+      icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+\n+    local icon_line = selected and \" —\" or \"\"\n+    -- if (not selected) then\n+    --   spaces[i]:set({ label = \"\" })\n+    -- else\n+    --   sbar.animate(\"tanh\", 10, function()\n+    --     spaces[i]:set({ label = icons.apple })\n+    --   end)\n+    -- end\n+\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+    -- end\n+  end\n+\n+\n+\n+\n+\n+\n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+end)\n"
                },
                {
                    "date": 1716830852086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     local appType = getAppType(app) or 0\n     spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-    -- sprint('Icons:spaceTypes[appType]')\n+    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n   end\n   -- evert spacetypes:\n   for i = 1, 3, 1 do\n     print('SET DES ICONS', i, env.INFO.space)\n@@ -384,391 +384,4 @@\n \n   -- local selected = env.SELECTED == \"true\"\n   -- local color = selected and colors.grey or colors.bg2\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-function getAppType(fmApp)\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    return 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    return 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    return 3\n-  end\n-  return 0\n-end\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser     = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local SpaceOps     = {};\n---\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  debugTable(env)\n-  print('')\n-  if env.INFO.space ~= 1 then\n-    print(\"REFUSED\", env.INFO.space, env.SIP)\n-    return\n-  else\n-    print(\"ok\", env.INFO.space, env.SIP)\n-    print('DYAH BUN DEM')\n-  end\n-  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n-  -- local browserStr = \"\"\n-  -- local editorStr = \"\"\n-  -- local termStr = \"\"\n-  local icon_line  = \"\"\n-  local no_app     = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local appType = getAppType(app) or 0\n-    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-    printf('Icons:spaceTypes[appType].')\n-  end\n-  -- evert spacetypes:\n-  for i = 1, 3, 1 do\n-    print('SET DES ICONS', i, env.INFO.space)\n-    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n-  end\n-\n-  -- SpaceOps[env.INFO.space] = spaceTypes\n-\n-\n-  -- for i = 1, 5, 1 do\n-  --   local label = \"\"\n-  --   if (i == 1) then\n-  --     label = browserStr\n-  --   elseif (i == 2) then\n-  --     label = editorStr\n-  --   elseif (i == 3) then\n-  --     label = termStr\n-  --   else\n-  --     label = \" —\"\n-  --   end\n-  --   spaces[env.INFO.space]:set({ label = label })\n-  --   -- end)\n-  -- end\n-\n-  -- print(\n-  --   \"BROWSER: \", browserStr,\n-  --   \"EDITOR: \", editorStr,\n-  --   \"TERM: \", termStr\n-  -- )\n-  -- print('##################')\n-  -- if (env.INFO.space == 0) then\n-  --   icon_line = browserStr\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   icon_line = editorStr\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   icon_line = termStr\n-  -- end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-end)\n-\n--- function onAppFocused(space, app)\n---   print('APP FOCUSSEEEED', space, app)\n---   -- local space = tonumber(space)\n---   -- sbar.exec(\"yabai -m space \" .. space)\n--- end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-\n-\n--- Single item bracket for space items to achieve double border on highlight\n-\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  -- if (env.SELECTED ~= \"true\") then\n-  --   print(\"#### <<<atcher>>>>>\")\n-  --   return\n-  -- end\n-\n-\n-\n-  local appType = getAppType(env.INFO) or 0;\n-  -- heheh\n-  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-  local fmApp = env.INFO\n-\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  -- local selected = appType\n-\n-  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n-  debugTable(env)\n-  -- for\n-  -- spaces\n-  -- sbar.animate(\"tanh\", 10, function()\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    -- no_app = false\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    spaces[i]:set({\n-      icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-\n-    local icon_line = selected and \" —\" or \"\"\n-    -- if (not selected) then\n-    --   spaces[i]:set({ label = \"\" })\n-    -- else\n-    --   sbar.animate(\"tanh\", 10, function()\n-    --     spaces[i]:set({ label = icons.apple })\n-    --   end)\n-    -- end\n-\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n-    -- end\n-  end\n-\n-\n-\n-\n-\n-\n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n-end)\n"
                },
                {
                    "date": 1716830857496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,9 @@\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   debugTable(env)\n   print('')\n   if env.INFO.space ~= 1 then\n-    print(\"REFUSED\", env.INFO.space, env.SIP)\n+    -- print(\"REFUSED\", env.INFO.space, env.SIP)\n     return\n   else\n     print(\"ok\", env.INFO.space, env.SIP)\n     print('DYAH BUN DEM')\n"
                },
                {
                    "date": 1716830971862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,9 +349,9 @@\n         border_width = 2\n       }\n     })\n     spaces[i]:set({\n-      icon = { highlight = selected, },\n+      -- icon = { highlight = selected, },\n       label = { highlight = selected },\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n \n"
                },
                {
                    "date": 1716831071682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,11 +182,11 @@\n --\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   debugTable(env)\n-  print('')\n   if env.INFO.space ~= 1 then\n-    -- print(\"REFUSED\", env.INFO.space, env.SIP)\n+    print(\"ok\", env.INFO.space, env.SIP)\n+    print(\"REFUSED\", env.INFO.space, env.SIP)\n     return\n   else\n     print(\"ok\", env.INFO.space, env.SIP)\n     print('DYAH BUN DEM')\n"
                },
                {
                    "date": 1716831114480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n     print('Icons:spaceTypes[appType]', spaceTypes[appType])\n   end\n   -- evert spacetypes:\n   for i = 1, 3, 1 do\n-    print('SET DES ICONS', i, env.INFO.space)\n+    print('SET DES ICONS', spaceTypes[i][i.lighten])\n     spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n   end\n \n   -- SpaceOps[env.INFO.space] = spaceTypes\n"
                },
                {
                    "date": 1716831139549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,387 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+function getAppType(fmApp)\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    return 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    return 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    return 3\n+  end\n+  return 0\n+end\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser     = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local SpaceOps     = {};\n+--\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  debugTable(env)\n+  if env.INFO.space ~= 1 then\n+    print(\"ok\", env.INFO.space, env.SIP)\n+    print(\"REFUSED\", env.INFO.space, env.SIP)\n+    return\n+  else\n+    print(\"ok\", env.INFO.space, env.SIP)\n+    print('DYAH BUN DEM')\n+  end\n+  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n+  -- local browserStr = \"\"\n+  -- local editorStr = \"\"\n+  -- local termStr = \"\"\n+  local icon_line  = \"\"\n+  local no_app     = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local appType = getAppType(app) or 0\n+    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n+  end\n+  -- evert spacetypes:\n+  for i = 1, 3, 1 do\n+    print('SET DES ICONS', spaceTypes[i])\n+    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n+  end\n+\n+  -- SpaceOps[env.INFO.space] = spaceTypes\n+\n+\n+  -- for i = 1, 5, 1 do\n+  --   local label = \"\"\n+  --   if (i == 1) then\n+  --     label = browserStr\n+  --   elseif (i == 2) then\n+  --     label = editorStr\n+  --   elseif (i == 3) then\n+  --     label = termStr\n+  --   else\n+  --     label = \" —\"\n+  --   end\n+  --   spaces[env.INFO.space]:set({ label = label })\n+  --   -- end)\n+  -- end\n+\n+  -- print(\n+  --   \"BROWSER: \", browserStr,\n+  --   \"EDITOR: \", editorStr,\n+  --   \"TERM: \", termStr\n+  -- )\n+  -- print('##################')\n+  -- if (env.INFO.space == 0) then\n+  --   icon_line = browserStr\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   icon_line = editorStr\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   icon_line = termStr\n+  -- end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+end)\n+\n+-- function onAppFocused(space, app)\n+--   print('APP FOCUSSEEEED', space, app)\n+--   -- local space = tonumber(space)\n+--   -- sbar.exec(\"yabai -m space \" .. space)\n+-- end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+\n+\n+-- Single item bracket for space items to achieve double border on highlight\n+\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  -- if (env.SELECTED ~= \"true\") then\n+  --   print(\"#### <<<atcher>>>>>\")\n+  --   return\n+  -- end\n+\n+\n+\n+  local appType = getAppType(env.INFO) or 0;\n+  -- heheh\n+  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  -- local selected = appType\n+\n+  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  debugTable(env)\n+  -- for\n+  -- spaces\n+  -- sbar.animate(\"tanh\", 10, function()\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    -- no_app = false\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    spaces[i]:set({\n+      -- icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+\n+    local icon_line = selected and \" —\" or \"\"\n+    -- if (not selected) then\n+    --   spaces[i]:set({ label = \"\" })\n+    -- else\n+    --   sbar.animate(\"tanh\", 10, function()\n+    --     spaces[i]:set({ label = icons.apple })\n+    --   end)\n+    -- end\n+\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+    -- end\n+  end\n+\n+\n+\n+\n+\n+\n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+end)\n"
                },
                {
                    "date": 1716831169885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,8 +185,9 @@\n   debugTable(env)\n   if env.INFO.space ~= 1 then\n     print(\"ok\", env.INFO.space, env.SIP)\n     print(\"REFUSED\", env.INFO.space, env.SIP)\n+    print('-------------------')\n     return\n   else\n     print(\"ok\", env.INFO.space, env.SIP)\n     print('DYAH BUN DEM')\n@@ -384,391 +385,4 @@\n \n   -- local selected = env.SELECTED == \"true\"\n   -- local color = selected and colors.grey or colors.bg2\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-function getAppType(fmApp)\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    return 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    return 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    return 3\n-  end\n-  return 0\n-end\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser     = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local SpaceOps     = {};\n---\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  debugTable(env)\n-  if env.INFO.space ~= 1 then\n-    print(\"ok\", env.INFO.space, env.SIP)\n-    print(\"REFUSED\", env.INFO.space, env.SIP)\n-    return\n-  else\n-    print(\"ok\", env.INFO.space, env.SIP)\n-    print('DYAH BUN DEM')\n-  end\n-  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n-  -- local browserStr = \"\"\n-  -- local editorStr = \"\"\n-  -- local termStr = \"\"\n-  local icon_line  = \"\"\n-  local no_app     = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local appType = getAppType(app) or 0\n-    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n-  end\n-  -- evert spacetypes:\n-  for i = 1, 3, 1 do\n-    print('SET DES ICONS', spaceTypes[i][i.lighten])\n-    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n-  end\n-\n-  -- SpaceOps[env.INFO.space] = spaceTypes\n-\n-\n-  -- for i = 1, 5, 1 do\n-  --   local label = \"\"\n-  --   if (i == 1) then\n-  --     label = browserStr\n-  --   elseif (i == 2) then\n-  --     label = editorStr\n-  --   elseif (i == 3) then\n-  --     label = termStr\n-  --   else\n-  --     label = \" —\"\n-  --   end\n-  --   spaces[env.INFO.space]:set({ label = label })\n-  --   -- end)\n-  -- end\n-\n-  -- print(\n-  --   \"BROWSER: \", browserStr,\n-  --   \"EDITOR: \", editorStr,\n-  --   \"TERM: \", termStr\n-  -- )\n-  -- print('##################')\n-  -- if (env.INFO.space == 0) then\n-  --   icon_line = browserStr\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   icon_line = editorStr\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   icon_line = termStr\n-  -- end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-end)\n-\n--- function onAppFocused(space, app)\n---   print('APP FOCUSSEEEED', space, app)\n---   -- local space = tonumber(space)\n---   -- sbar.exec(\"yabai -m space \" .. space)\n--- end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-\n-\n--- Single item bracket for space items to achieve double border on highlight\n-\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  -- if (env.SELECTED ~= \"true\") then\n-  --   print(\"#### <<<atcher>>>>>\")\n-  --   return\n-  -- end\n-\n-\n-\n-  local appType = getAppType(env.INFO) or 0;\n-  -- heheh\n-  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-  local fmApp = env.INFO\n-\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  -- local selected = appType\n-\n-  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n-  debugTable(env)\n-  -- for\n-  -- spaces\n-  -- sbar.animate(\"tanh\", 10, function()\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    -- no_app = false\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    spaces[i]:set({\n-      -- icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-\n-    local icon_line = selected and \" —\" or \"\"\n-    -- if (not selected) then\n-    --   spaces[i]:set({ label = \"\" })\n-    -- else\n-    --   sbar.animate(\"tanh\", 10, function()\n-    --     spaces[i]:set({ label = icons.apple })\n-    --   end)\n-    -- end\n-\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n-    -- end\n-  end\n-\n-\n-\n-\n-\n-\n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n-end)\n"
                },
                {
                    "date": 1716831220393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,9 @@\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   debugTable(env)\n   if env.INFO.space ~= 1 then\n-    print(\"ok\", env.INFO.space, env.SIP)\n+    -- print(\"ok\", env.INFO.space, env.SIP)\n     print(\"REFUSED\", env.INFO.space, env.SIP)\n     print('-------------------')\n     return\n   else\n"
                },
                {
                    "date": 1716831239953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,18 +181,19 @@\n local SpaceOps     = {};\n --\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  print('-------------------')\n   debugTable(env)\n   if env.INFO.space ~= 1 then\n     -- print(\"ok\", env.INFO.space, env.SIP)\n     print(\"REFUSED\", env.INFO.space, env.SIP)\n-    print('-------------------')\n     return\n   else\n     print(\"ok\", env.INFO.space, env.SIP)\n     print('DYAH BUN DEM')\n   end\n+  print('-------------------')\n   local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n   -- local browserStr = \"\"\n   -- local editorStr = \"\"\n   -- local termStr = \"\"\n"
                },
                {
                    "date": 1716831367284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,12 @@\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   print('-------------------')\n   debugTable(env)\n-  if env.INFO.space ~= 1 then\n+  local currentAppType = getAppType(env.INFO.app)\n+  print(\"REQUEEEEEST\", env.INFO.space, currentAppType)\n+\n+  if env.INFO.space ~= currentAppType\n     -- print(\"ok\", env.INFO.space, env.SIP)\n     print(\"REFUSED\", env.INFO.space, env.SIP)\n     return\n   else\n"
                },
                {
                    "date": 1716831385700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n   debugTable(env)\n   local currentAppType = getAppType(env.INFO.app)\n   print(\"REQUEEEEEST\", env.INFO.space, currentAppType)\n \n-  if env.INFO.space ~= currentAppType\n+  if env.INFO.space ~= currentAppType: then\n     -- print(\"ok\", env.INFO.space, env.SIP)\n     print(\"REFUSED\", env.INFO.space, env.SIP)\n     return\n   else\n"
                },
                {
                    "date": 1716831422443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n   debugTable(env)\n   local currentAppType = getAppType(env.INFO.app)\n   print(\"REQUEEEEEST\", env.INFO.space, currentAppType)\n \n-  if env.INFO.space ~= currentAppType: then\n+  if env.INFO.space ~= currentAppType\n     -- print(\"ok\", env.INFO.space, env.SIP)\n     print(\"REFUSED\", env.INFO.space, env.SIP)\n     return\n   else\n"
                },
                {
                    "date": 1716831516623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,17 +184,15 @@\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   print('-------------------')\n   debugTable(env)\n   local currentAppType = getAppType(env.INFO.app)\n-  print(\"REQUEEEEEST\", env.INFO.space, currentAppType)\n \n-  if env.INFO.space ~= currentAppType\n-    -- print(\"ok\", env.INFO.space, env.SIP)\n-    print(\"REFUSED\", env.INFO.space, env.SIP)\n-    return\n+  if env.INFO.space ~= currentAppType:\n+    -- print(\"REFUSED\", env.INFO.space, currentAppType)\n+    -- return\n   else\n-    print(\"ok\", env.INFO.space, env.SIP)\n-    print('DYAH BUN DEM')\n+    -- print(\"ok\", env.INFO.space)\n+    -- print('DYAH BUN DEM')\n   end\n   print('-------------------')\n   local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n   -- local browserStr = \"\"\n"
                },
                {
                    "date": 1716831538472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,380 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+function getAppType(fmApp)\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    return 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    return 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    return 3\n+  end\n+  return 0\n+end\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser     = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local SpaceOps     = {};\n+--\n+\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  print('-------------------')\n+  debugTable(env)\n+  local currentAppType = getAppType(env.INFO.app)\n+\n+\n+  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n+  local icon_line  = \"\"\n+  local no_app     = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local appType = getAppType(app) or 0\n+    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n+  end\n+  -- evert spacetypes:\n+  for i = 1, 3, 1 do\n+    print('SET DES ICONS', spaceTypes[i])\n+    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n+  end\n+\n+  -- SpaceOps[env.INFO.space] = spaceTypes\n+\n+\n+  -- for i = 1, 5, 1 do\n+  --   local label = \"\"\n+  --   if (i == 1) then\n+  --     label = browserStr\n+  --   elseif (i == 2) then\n+  --     label = editorStr\n+  --   elseif (i == 3) then\n+  --     label = termStr\n+  --   else\n+  --     label = \" —\"\n+  --   end\n+  --   spaces[env.INFO.space]:set({ label = label })\n+  --   -- end)\n+  -- end\n+\n+  -- print(\n+  --   \"BROWSER: \", browserStr,\n+  --   \"EDITOR: \", editorStr,\n+  --   \"TERM: \", termStr\n+  -- )\n+  -- print('##################')\n+  -- if (env.INFO.space == 0) then\n+  --   icon_line = browserStr\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   icon_line = editorStr\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   icon_line = termStr\n+  -- end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+end)\n+\n+-- function onAppFocused(space, app)\n+--   print('APP FOCUSSEEEED', space, app)\n+--   -- local space = tonumber(space)\n+--   -- sbar.exec(\"yabai -m space \" .. space)\n+-- end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+\n+\n+-- Single item bracket for space items to achieve double border on highlight\n+\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  -- if (env.SELECTED ~= \"true\") then\n+  --   print(\"#### <<<atcher>>>>>\")\n+  --   return\n+  -- end\n+\n+\n+\n+  local appType = getAppType(env.INFO) or 0;\n+  -- heheh\n+  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  -- local selected = appType\n+\n+  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  debugTable(env)\n+  -- for\n+  -- spaces\n+  -- sbar.animate(\"tanh\", 10, function()\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    -- no_app = false\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    spaces[i]:set({\n+      -- icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+\n+    local icon_line = selected and \" —\" or \"\"\n+    -- if (not selected) then\n+    --   spaces[i]:set({ label = \"\" })\n+    -- else\n+    --   sbar.animate(\"tanh\", 10, function()\n+    --     spaces[i]:set({ label = icons.apple })\n+    --   end)\n+    -- end\n+\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+    -- end\n+  end\n+\n+\n+\n+\n+\n+\n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+end)\n"
                },
                {
                    "date": 1716831549138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n -- local console = require(\"../../.hammerspoon/console\")\n local spaces = {}\n \n \n-function getAppType(fmApp)\n+function getAppType(fmApp: string)\n   if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n     return 1\n   end\n   if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n@@ -377,394 +377,4 @@\n \n   -- local selected = env.SELECTED == \"true\"\n   -- local color = selected and colors.grey or colors.bg2\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-function getAppType(fmApp)\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    return 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    return 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    return 3\n-  end\n-  return 0\n-end\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser     = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local SpaceOps     = {};\n---\n-\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  print('-------------------')\n-  debugTable(env)\n-  local currentAppType = getAppType(env.INFO.app)\n-\n-  if env.INFO.space ~= currentAppType:\n-    -- print(\"REFUSED\", env.INFO.space, currentAppType)\n-    -- return\n-  else\n-    -- print(\"ok\", env.INFO.space)\n-    -- print('DYAH BUN DEM')\n-  end\n-  print('-------------------')\n-  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n-  -- local browserStr = \"\"\n-  -- local editorStr = \"\"\n-  -- local termStr = \"\"\n-  local icon_line  = \"\"\n-  local no_app     = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local appType = getAppType(app) or 0\n-    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n-  end\n-  -- evert spacetypes:\n-  for i = 1, 3, 1 do\n-    print('SET DES ICONS', spaceTypes[i])\n-    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n-  end\n-\n-  -- SpaceOps[env.INFO.space] = spaceTypes\n-\n-\n-  -- for i = 1, 5, 1 do\n-  --   local label = \"\"\n-  --   if (i == 1) then\n-  --     label = browserStr\n-  --   elseif (i == 2) then\n-  --     label = editorStr\n-  --   elseif (i == 3) then\n-  --     label = termStr\n-  --   else\n-  --     label = \" —\"\n-  --   end\n-  --   spaces[env.INFO.space]:set({ label = label })\n-  --   -- end)\n-  -- end\n-\n-  -- print(\n-  --   \"BROWSER: \", browserStr,\n-  --   \"EDITOR: \", editorStr,\n-  --   \"TERM: \", termStr\n-  -- )\n-  -- print('##################')\n-  -- if (env.INFO.space == 0) then\n-  --   icon_line = browserStr\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   icon_line = editorStr\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   icon_line = termStr\n-  -- end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-end)\n-\n--- function onAppFocused(space, app)\n---   print('APP FOCUSSEEEED', space, app)\n---   -- local space = tonumber(space)\n---   -- sbar.exec(\"yabai -m space \" .. space)\n--- end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-\n-\n--- Single item bracket for space items to achieve double border on highlight\n-\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  -- if (env.SELECTED ~= \"true\") then\n-  --   print(\"#### <<<atcher>>>>>\")\n-  --   return\n-  -- end\n-\n-\n-\n-  local appType = getAppType(env.INFO) or 0;\n-  -- heheh\n-  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-  local fmApp = env.INFO\n-\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  -- local selected = appType\n-\n-  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n-  debugTable(env)\n-  -- for\n-  -- spaces\n-  -- sbar.animate(\"tanh\", 10, function()\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    -- no_app = false\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    spaces[i]:set({\n-      -- icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-\n-    local icon_line = selected and \" —\" or \"\"\n-    -- if (not selected) then\n-    --   spaces[i]:set({ label = \"\" })\n-    -- else\n-    --   sbar.animate(\"tanh\", 10, function()\n-    --     spaces[i]:set({ label = icons.apple })\n-    --   end)\n-    -- end\n-\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n-    -- end\n-  end\n-\n-\n-\n-\n-\n-\n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n-end)\n"
                },
                {
                    "date": 1716831562205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n -- local console = require(\"../../.hammerspoon/console\")\n local spaces = {}\n \n \n-function getAppType(fmApp: string)\n+function getAppType(fmApp)\n   if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n     return 1\n   end\n   if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n"
                },
                {
                    "date": 1716831578007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n local SpaceOps     = {};\n --\n \n space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  print('-------------------')\n+  print('---------', env.INFO.app, '----------')\n   debugTable(env)\n   local currentAppType = getAppType(env.INFO.app)\n \n \n"
                },
                {
                    "date": 1716831838059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,13 +179,13 @@\n }\n \n local SpaceOps     = {};\n --\n-\n+local currentAppType = \"\"\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   print('---------', env.INFO.app, '----------')\n   debugTable(env)\n-  local currentAppType = getAppType(env.INFO.app)\n+  currentAppType = getAppType(env.INFO.app)\n \n \n   local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n   local icon_line  = \"\"\n@@ -301,8 +301,9 @@\n \n -- Single item bracket for space items to achieve double border on highlight\n \n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  -- env.INFO.s\n   -- if (env.SELECTED ~= \"true\") then\n   --   print(\"#### <<<atcher>>>>>\")\n   --   return\n   -- end\n@@ -310,9 +311,9 @@\n \n \n   local appType = getAppType(env.INFO) or 0;\n   -- heheh\n-  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n   local fmApp = env.INFO\n \n   -- if (appType ~= selected) then\n   --   return\n"
                },
                {
                    "date": 1716831891764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,21 +165,21 @@\n })\n \n \n \n-local tCodeEditors = {\n+local tCodeEditors   = {\n   \"dev.zed.Zed\",\n   \"com.microsoft.VSCodeInsiders\",\n   \"com.microsoft.VSCode\",\n   \"com.sublimetext.4\",\n }\n-local tBrowser     = {\n+local tBrowser       = {\n   \"Safari\",\n   \"Chrome\",\n   \"Browser\",\n }\n \n-local SpaceOps     = {};\n+local SpaceOps       = {};\n --\n local currentAppType = \"\"\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   print('---------', env.INFO.app, '----------')\n@@ -301,9 +301,11 @@\n \n -- Single item bracket for space items to achieve double border on highlight\n \n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  -- env.INFO.s\n+  local front_most = env.INFO\n+  print('SET FRONTMOST')\n+\n   -- if (env.SELECTED ~= \"true\") then\n   --   print(\"#### <<<atcher>>>>>\")\n   --   return\n   -- end\n"
                },
                {
                    "date": 1716831932417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,10 +301,10 @@\n \n -- Single item bracket for space items to achieve double border on highlight\n \n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  local front_most = env.INFO\n-  print('SET FRONTMOST')\n+  local currentBusiness = env.INFO\n+  print('SET FRONTMOST', currentBusiness)\n \n   -- if (env.SELECTED ~= \"true\") then\n   --   print(\"#### <<<atcher>>>>>\")\n   --   return\n@@ -313,9 +313,9 @@\n \n \n   local appType = getAppType(env.INFO) or 0;\n   -- heheh\n-  print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n   local fmApp = env.INFO\n \n   -- if (appType ~= selected) then\n   --   return\n"
                },
                {
                    "date": 1716831942932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,9 +301,9 @@\n \n -- Single item bracket for space items to achieve double border on highlight\n \n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  local currentBusiness = env.INFO\n+  currentBusiness = env.INFO\n   print('SET FRONTMOST', currentBusiness)\n \n   -- if (env.SELECTED ~= \"true\") then\n   --   print(\"#### <<<atcher>>>>>\")\n"
                },
                {
                    "date": 1716832185444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,11 @@\n   end\n   return 0\n end\n \n+currentBusiness = _ENV.INFO \n+\n+\n function debugTable(obj)\n   print(dumpTableToString(obj))\n end\n \n@@ -183,9 +186,9 @@\n local currentAppType = \"\"\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   print('---------', env.INFO.app, '----------')\n   debugTable(env)\n-  currentAppType = getAppType(env.INFO.app)\n+  currentAppType = getAppType(currentAppType)\n \n \n   local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n   local icon_line  = \"\"\n@@ -302,9 +305,8 @@\n -- Single item bracket for space items to achieve double border on highlight\n \n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n   currentBusiness = env.INFO\n-  print('SET FRONTMOST', currentBusiness)\n \n   -- if (env.SELECTED ~= \"true\") then\n   --   print(\"#### <<<atcher>>>>>\")\n   --   return\n"
                },
                {
                    "date": 1716832266732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,11 +184,15 @@\n local SpaceOps       = {};\n --\n local currentAppType = \"\"\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  print('---------', env.INFO.app, '----------')\n+  print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n+  \n   debugTable(env)\n   currentAppType = getAppType(currentAppType)\n+  if (currentAppType ~= getAppType(env.INFO.app)) then\n+    return\n+  end\n \n \n   local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n   local icon_line  = \"\"\n"
                },
                {
                    "date": 1716832403167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,10 +187,11 @@\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n   \n   debugTable(env)\n-  currentAppType = getAppType(currentAppType)\n-  if (currentAppType ~= getAppType(env.INFO.app)) then\n+  \n+  currentAppType = (currentAppType)\n+  if (currentAppType ~= (env.INFO.app)) then\n     return\n   end\n \n \n"
                },
                {
                    "date": 1716832422282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,10 +188,10 @@\n   print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n   \n   debugTable(env)\n   \n-  currentAppType = (currentAppType)\n-  if (currentAppType ~= (env.INFO.app)) then\n+  -- currentAppType = (currentAppType)\n+  if (currentAppType ~= getAppType(env.INFO.app)) then\n     return\n   end\n \n \n"
                },
                {
                    "date": 1716832494302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,390 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+function getAppType(fmApp)\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    return 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    return 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    return 3\n+  end\n+  return 0\n+end\n+\n+currentBusiness = _ENV.INFO \n+\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.with_alpha(colors.white, 0.8),\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 5,\n+    padding_right = 0,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors   = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser       = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local SpaceOps       = {};\n+--\n+local currentAppType = nil\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n+  \n+  debugTable(env)\n+  \n+  -- currentAppType = (currentAppType)\n+  if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n+    return 0\n+  end\n+\n+\n+  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n+  local icon_line  = \"\"\n+  local no_app     = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local appType = getAppType(app) or 0\n+    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n+  end\n+  -- evert spacetypes:\n+  for i = 1, 3, 1 do\n+    print('SET DES ICONS', spaceTypes[i])\n+    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n+  end\n+\n+  -- SpaceOps[env.INFO.space] = spaceTypes\n+\n+\n+  -- for i = 1, 5, 1 do\n+  --   local label = \"\"\n+  --   if (i == 1) then\n+  --     label = browserStr\n+  --   elseif (i == 2) then\n+  --     label = editorStr\n+  --   elseif (i == 3) then\n+  --     label = termStr\n+  --   else\n+  --     label = \" —\"\n+  --   end\n+  --   spaces[env.INFO.space]:set({ label = label })\n+  --   -- end)\n+  -- end\n+\n+  -- print(\n+  --   \"BROWSER: \", browserStr,\n+  --   \"EDITOR: \", editorStr,\n+  --   \"TERM: \", termStr\n+  -- )\n+  -- print('##################')\n+  -- if (env.INFO.space == 0) then\n+  --   icon_line = browserStr\n+  -- end\n+  -- if (env.INFO.space == 1) then\n+  --   icon_line = editorStr\n+  -- end\n+  -- if (env.INFO.space == 2) then\n+  --   icon_line = termStr\n+  -- end\n+\n+\n+\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   no_app = false\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   -- print('-------------====dddddd====', app)\n+  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n+  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n+  --     browserStr = browserStr .. \" \" .. icon\n+  --     -- end\n+  --     -- local isBrowser = strMatch\n+  --     -- icon_line = icon_line .. \" \" .. icon\n+  --   end\n+  -- end\n+end)\n+\n+-- function onAppFocused(space, app)\n+--   print('APP FOCUSSEEEED', space, app)\n+--   -- local space = tonumber(space)\n+--   -- sbar.exec(\"yabai -m space \" .. space)\n+-- end\n+\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n+  -- spaces_indicator:set({\n+  --   icon = currently_on and icons.switch.off or icons.switch.on\n+  -- })\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+\n+\n+-- Single item bracket for space items to achieve double border on highlight\n+\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  currentBusiness = env.INFO\n+\n+  -- if (env.SELECTED ~= \"true\") then\n+  --   print(\"#### <<<atcher>>>>>\")\n+  --   return\n+  -- end\n+\n+\n+\n+  local appType = getAppType(env.INFO) or 0;\n+  -- heheh\n+  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n+  local fmApp = env.INFO\n+\n+  -- if (appType ~= selected) then\n+  --   return\n+  -- end\n+\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  -- local selected = appType\n+\n+  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n+  debugTable(env)\n+  -- for\n+  -- spaces\n+  -- sbar.animate(\"tanh\", 10, function()\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    -- no_app = false\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    spaces[i]:set({\n+      -- icon = { highlight = selected, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+\n+    local icon_line = selected and \" —\" or \"\"\n+    -- if (not selected) then\n+    --   spaces[i]:set({ label = \"\" })\n+    -- else\n+    --   sbar.animate(\"tanh\", 10, function()\n+    --     spaces[i]:set({ label = icons.apple })\n+    --   end)\n+    -- end\n+\n+    -- space_bracket:set({\n+    --   background = { border_color = selected and colors.grey or colors.bg2 }\n+    -- })\n+    -- end\n+  end\n+\n+\n+\n+\n+\n+\n+  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n+\n+  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n+\n+\n+  -- local selected = env.SELECTED == \"true\"\n+  -- local color = selected and colors.grey or colors.bg2\n+end)\n"
                },
                {
                    "date": 1716832503371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,9 @@\n local SpaceOps       = {};\n --\n local currentAppType = nil\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n+  -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n   \n   debugTable(env)\n   \n   -- currentAppType = (currentAppType)\n@@ -387,394 +387,4 @@\n \n   -- local selected = env.SELECTED == \"true\"\n   -- local color = selected and colors.grey or colors.bg2\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-function getAppType(fmApp)\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    return 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    return 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    return 3\n-  end\n-  return 0\n-end\n-\n-currentBusiness = _ENV.INFO \n-\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors   = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser       = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local SpaceOps       = {};\n---\n-local currentAppType = \"\"\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n-  \n-  debugTable(env)\n-  \n-  -- currentAppType = (currentAppType)\n-  if (currentAppType ~= getAppType(env.INFO.app)) then\n-    return\n-  end\n-\n-\n-  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n-  local icon_line  = \"\"\n-  local no_app     = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local appType = getAppType(app) or 0\n-    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n-  end\n-  -- evert spacetypes:\n-  for i = 1, 3, 1 do\n-    print('SET DES ICONS', spaceTypes[i])\n-    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n-  end\n-\n-  -- SpaceOps[env.INFO.space] = spaceTypes\n-\n-\n-  -- for i = 1, 5, 1 do\n-  --   local label = \"\"\n-  --   if (i == 1) then\n-  --     label = browserStr\n-  --   elseif (i == 2) then\n-  --     label = editorStr\n-  --   elseif (i == 3) then\n-  --     label = termStr\n-  --   else\n-  --     label = \" —\"\n-  --   end\n-  --   spaces[env.INFO.space]:set({ label = label })\n-  --   -- end)\n-  -- end\n-\n-  -- print(\n-  --   \"BROWSER: \", browserStr,\n-  --   \"EDITOR: \", editorStr,\n-  --   \"TERM: \", termStr\n-  -- )\n-  -- print('##################')\n-  -- if (env.INFO.space == 0) then\n-  --   icon_line = browserStr\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   icon_line = editorStr\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   icon_line = termStr\n-  -- end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n-end)\n-\n--- function onAppFocused(space, app)\n---   print('APP FOCUSSEEEED', space, app)\n---   -- local space = tonumber(space)\n---   -- sbar.exec(\"yabai -m space \" .. space)\n--- end\n-\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-\n-\n--- Single item bracket for space items to achieve double border on highlight\n-\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  currentBusiness = env.INFO\n-\n-  -- if (env.SELECTED ~= \"true\") then\n-  --   print(\"#### <<<atcher>>>>>\")\n-  --   return\n-  -- end\n-\n-\n-\n-  local appType = getAppType(env.INFO) or 0;\n-  -- heheh\n-  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n-  local fmApp = env.INFO\n-\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  -- local selected = appType\n-\n-  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n-  debugTable(env)\n-  -- for\n-  -- spaces\n-  -- sbar.animate(\"tanh\", 10, function()\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    -- no_app = false\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    spaces[i]:set({\n-      -- icon = { highlight = selected, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-\n-    local icon_line = selected and \" —\" or \"\"\n-    -- if (not selected) then\n-    --   spaces[i]:set({ label = \"\" })\n-    -- else\n-    --   sbar.animate(\"tanh\", 10, function()\n-    --     spaces[i]:set({ label = icons.apple })\n-    --   end)\n-    -- end\n-\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n-    -- end\n-  end\n-\n-\n-\n-\n-\n-\n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n-end)\n"
                },
                {
                    "date": 1716832667566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,71 +210,10 @@\n   for i = 1, 3, 1 do\n     print('SET DES ICONS', spaceTypes[i])\n     spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n   end\n-\n-  -- SpaceOps[env.INFO.space] = spaceTypes\n-\n-\n-  -- for i = 1, 5, 1 do\n-  --   local label = \"\"\n-  --   if (i == 1) then\n-  --     label = browserStr\n-  --   elseif (i == 2) then\n-  --     label = editorStr\n-  --   elseif (i == 3) then\n-  --     label = termStr\n-  --   else\n-  --     label = \" —\"\n-  --   end\n-  --   spaces[env.INFO.space]:set({ label = label })\n-  --   -- end)\n-  -- end\n-\n-  -- print(\n-  --   \"BROWSER: \", browserStr,\n-  --   \"EDITOR: \", editorStr,\n-  --   \"TERM: \", termStr\n-  -- )\n-  -- print('##################')\n-  -- if (env.INFO.space == 0) then\n-  --   icon_line = browserStr\n-  -- end\n-  -- if (env.INFO.space == 1) then\n-  --   icon_line = editorStr\n-  -- end\n-  -- if (env.INFO.space == 2) then\n-  --   icon_line = termStr\n-  -- end\n-\n-\n-\n-  -- for app, count in pairs(env.INFO.apps) do\n-  --   no_app = false\n-  --   local lookup = app_icons[app]\n-  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  --   -- print('-------------====dddddd====', app)\n-  --   -- if app match Chrome|Safari|Duck|Edge|Sigma|Arc\n-  --   if string.match(app, \"Chrome|Safari|Duck|Edge|Sigma|Arc\") then\n-  --     browserStr = browserStr .. \" \" .. icon\n-  --     -- end\n-  --     -- local isBrowser = strMatch\n-  --     -- icon_line = icon_line .. \" \" .. icon\n-  --   end\n-  -- end\n end)\n-\n--- function onAppFocused(space, app)\n---   print('APP FOCUSSEEEED', space, app)\n---   -- local space = tonumber(space)\n---   -- sbar.exec(\"yabai -m space \" .. space)\n--- end\n-\n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-  -- local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n-  -- spaces_indicator:set({\n-  --   icon = currently_on and icons.switch.off or icons.switch.on\n-  -- })\n end)\n \n spaces_indicator:subscribe(\"mouse.entered\", function(env)\n   sbar.animate(\"tanh\", 30, function()\n@@ -305,46 +244,19 @@\n spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n \n-\n--- Single item bracket for space items to achieve double border on highlight\n-\n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n   currentBusiness = env.INFO\n-\n-  -- if (env.SELECTED ~= \"true\") then\n-  --   print(\"#### <<<atcher>>>>>\")\n-  --   return\n-  -- end\n-\n-\n-\n   local appType = getAppType(env.INFO) or 0;\n-  -- heheh\n-  -- print('çç!!!!!!!!!!!!!!!!!!!!', dumpTableToString(env.INFO))\n   local fmApp = env.INFO\n-\n-  -- if (appType ~= selected) then\n-  --   return\n-  -- end\n-\n   local lookup = app_icons[fmApp]\n   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n   local selectedNum = appType\n \n-  -- local selected = appType\n-\n-  -- print(\"#### DU NOUVEAU front_app_switched ##### ?\", selectedNum, appType, env.INFO)\n-  debugTable(env)\n-  -- for\n-  -- spaces\n-  -- sbar.animate(\"tanh\", 10, function()\n-\n   for i = 1, 5, 1 do\n     local selected = (i == selectedNum)\n     local color = selected and colors.grey or colors.bg2\n-    -- no_app = false\n     local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n       background = {\n         color = colors.transparent,\n         border_color = colors.bg2,\n@@ -352,9 +264,9 @@\n         border_width = 2\n       }\n     })\n     spaces[i]:set({\n-      -- icon = { highlight = selected, },\n+      icon = { highlight = selected, },\n       label = { highlight = selected },\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n \n"
                },
                {
                    "date": 1716832727433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,27 +263,14 @@\n         height = 28,\n         border_width = 2\n       }\n     })\n+    local icon_line = selected and \" —\" or \"\"\n     spaces[i]:set({\n       icon = { highlight = selected, },\n       label = { highlight = selected },\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n-\n-    local icon_line = selected and \" —\" or \"\"\n-    -- if (not selected) then\n-    --   spaces[i]:set({ label = \"\" })\n-    -- else\n-    --   sbar.animate(\"tanh\", 10, function()\n-    --     spaces[i]:set({ label = icons.apple })\n-    --   end)\n-    -- end\n-\n-    -- space_bracket:set({\n-    --   background = { border_color = selected and colors.grey or colors.bg2 }\n-    -- })\n-    -- end\n   end\n \n \n \n"
                },
                {
                    "date": 1716832747944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,20 +270,5 @@\n       label = { highlight = selected },\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n   end\n-\n-\n-\n-\n-\n-\n-  -- print('WIN STPACE CHANGES', dumpTableToString(env))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", dumpTableToString(env.INFO))\n-\n-  -- print(\"SPACE WINDOW CHANGES\", print(env.INFO.app))\n-\n-\n-  -- local selected = env.SELECTED == \"true\"\n-  -- local color = selected and colors.grey or colors.bg2\n end)\n"
                },
                {
                    "date": 1716832815814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n       }\n     })\n     local icon_line = selected and \" —\" or \"\"\n     spaces[i]:set({\n-      icon = { highlight = selected, },\n+      icon = { highlight = selected or icon_line, },\n       label = { highlight = selected },\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n   end\n"
                },
                {
                    "date": 1716832893099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,14 @@\n   end\n   return 0\n end\n \n-currentBusiness = _ENV.INFO \n+currentBusiness = _ENV.INFO\n \n+log(\"=::q=q=q==q\", currentBusiness)\n \n+-- local currentlyFOcsed  = application()\n+\n function debugTable(obj)\n   print(dumpTableToString(obj))\n end\n \n@@ -185,11 +188,11 @@\n --\n local currentAppType = nil\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n-  \n+\n   debugTable(env)\n-  \n+\n   -- currentAppType = (currentAppType)\n   if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n     return 0\n   end\n"
                },
                {
                    "date": 1716832911588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n end\n \n currentBusiness = _ENV.INFO\n \n-log(\"=::q=q=q==q\", currentBusiness)\n+print(\"=::q=q=q==q\", currentBusiness)\n \n -- local currentlyFOcsed  = application()\n \n function debugTable(obj)\n"
                },
                {
                    "date": 1716832970076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,10 @@\n end\n \n currentBusiness = _ENV.INFO\n \n-print(\"=::q=q=q==q\", currentBusiness)\n+local front_app = settings.front_app\n+print(\"=::q=q=q==q\", { front_app })\n \n -- local currentlyFOcsed  = application()\n \n function debugTable(obj)\n"
                },
                {
                    "date": 1716833034086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n       string = i,\n       padding_left = 15,\n       padding_right = 8,\n       color = colors.white,\n-      highlight_color = colors.with_alpha(colors.white, 0.8),\n+      highlight_color = colors.red,\n     },\n     label = {\n       padding_right = 20,\n       color = colors.grey,\n@@ -214,9 +214,9 @@\n   for i = 1, 3, 1 do\n     print('SET DES ICONS', spaceTypes[i])\n     spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n   end\n-end)\n+  end)\n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n end)\n \n spaces_indicator:subscribe(\"mouse.entered\", function(env)\n"
                },
                {
                    "date": 1716833103267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,10 +97,18 @@\n   })\n \n   spaces[i] = space\n \n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n \n-\n   -- Padding space\n   sbar.add(\"space\", \"space.padding.\" .. i, {\n     space = i,\n     script = \"\",\n"
                },
                {
                    "date": 1716833110879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,16 +98,16 @@\n \n   spaces[i] = space\n \n   -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n+  -- local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+  --   background = {\n+  --     color = colors.transparent,\n+  --     border_color = colors.bg2,\n+  --     height = 28,\n+  --     border_width = 2\n+  --   }\n+  -- })\n \n   -- Padding space\n   sbar.add(\"space\", \"space.padding.\" .. i, {\n     space = i,\n"
                },
                {
                    "date": 1716833117525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,16 +98,16 @@\n \n   spaces[i] = space\n \n   -- Single item bracket for space items to achieve double border on highlight\n-  -- local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-  --   background = {\n-  --     color = colors.transparent,\n-  --     border_color = colors.bg2,\n-  --     height = 28,\n-  --     border_width = 2\n-  --   }\n-  -- })\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n \n   -- Padding space\n   sbar.add(\"space\", \"space.padding.\" .. i, {\n     space = i,\n"
                },
                {
                    "date": 1716833148196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n   local space_bracket = sbar.add(\"bracket\", { space.name }, {\n     background = {\n       color = colors.transparent,\n       border_color = colors.bg2,\n-      height = 28,\n+      height = 50,\n       border_width = 2\n     }\n   })\n \n"
                },
                {
                    "date": 1716833174423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n   local space_bracket = sbar.add(\"bracket\", { space.name }, {\n     background = {\n       color = colors.transparent,\n       border_color = colors.bg2,\n-      height = 50,\n+      height = 28,\n       border_width = 2\n     }\n   })\n \n@@ -116,10 +116,10 @@\n   })\n \n   local space_popup = sbar.add(\"item\", {\n     position = \"popup.\" .. space.name,\n-    padding_left = 5,\n-    padding_right = 0,\n+    padding_left = 0,\n+    padding_right = 5,\n     background = {\n       drawing = true,\n       image = {\n         corner_radius = 9,\n"
                },
                {
                    "date": 1716833182652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n     background = {\n       drawing = true,\n       image = {\n         corner_radius = 9,\n-        scale = 0.2\n+        scale = 0.5\n       }\n     }\n   })\n \n"
                },
                {
                    "date": 1716833247357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \n currentBusiness = _ENV.INFO\n \n local front_app = settings.front_app\n-print(\"=::q=q=q==q\", { front_app })\n+print(\"=::q=q=q==q\", front_app)\n \n -- local currentlyFOcsed  = application()\n \n function debugTable(obj)\n@@ -122,9 +122,9 @@\n     background = {\n       drawing = true,\n       image = {\n         corner_radius = 9,\n-        scale = 0.5\n+        scale = 0.2\n       }\n     }\n   })\n \n@@ -255,9 +255,9 @@\n \n spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n-\n+front_app\n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n   currentBusiness = env.INFO\n   local appType = getAppType(env.INFO) or 0;\n   local fmApp = env.INFO\n"
                },
                {
                    "date": 1716833259926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \n currentBusiness = _ENV.INFO\n \n local front_app = settings.front_app\n-print(\"=::q=q=q==q\", front_app)\n+-- print(\"=::q=q=q==q\", front_app)\n \n -- local currentlyFOcsed  = application()\n \n function debugTable(obj)\n"
                },
                {
                    "date": 1716833271715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,286 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+function getAppType(fmApp)\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    return 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    return 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    return 3\n+  end\n+  return 0\n+end\n+\n+currentBusiness = _ENV.INFO\n+\n+local front_app = settings.front_app\n+print(\"=::q=q=q==q\", front_app)\n+\n+-- local currentlyFOcsed  = application()\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.red,\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 0,\n+    padding_right = 5,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors   = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser       = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local SpaceOps       = {};\n+--\n+local currentAppType = nil\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n+\n+  debugTable(env)\n+\n+  -- currentAppType = (currentAppType)\n+  if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n+    return 0\n+  end\n+\n+\n+  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n+  local icon_line  = \"\"\n+  local no_app     = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local appType = getAppType(app) or 0\n+    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n+  end\n+  -- evert spacetypes:\n+  for i = 1, 3, 1 do\n+    print('SET DES ICONS', spaceTypes[i])\n+    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n+  end\n+  end)\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+front_app\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  currentBusiness = env.INFO\n+  local appType = getAppType(env.INFO) or 0;\n+  local fmApp = env.INFO\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    local icon_line = selected and \" —\" or \"\"\n+    spaces[i]:set({\n+      icon = { highlight = selected or icon_line, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+  end\n+end)\n"
                },
                {
                    "date": 1716833280487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,9 @@\n \n spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n-front_app\n+-- front_app\n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n   currentBusiness = env.INFO\n   local appType = getAppType(env.INFO) or 0;\n   local fmApp = env.INFO\n@@ -283,290 +283,4 @@\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n   end\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-function getAppType(fmApp)\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    return 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    return 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    return 3\n-  end\n-  return 0\n-end\n-\n-currentBusiness = _ENV.INFO\n-\n-local front_app = settings.front_app\n--- print(\"=::q=q=q==q\", front_app)\n-\n--- local currentlyFOcsed  = application()\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.red,\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 0,\n-    padding_right = 5,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors   = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser       = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local SpaceOps       = {};\n---\n-local currentAppType = nil\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n-\n-  debugTable(env)\n-\n-  -- currentAppType = (currentAppType)\n-  if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n-    return 0\n-  end\n-\n-\n-  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n-  local icon_line  = \"\"\n-  local no_app     = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local appType = getAppType(app) or 0\n-    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n-  end\n-  -- evert spacetypes:\n-  for i = 1, 3, 1 do\n-    print('SET DES ICONS', spaceTypes[i])\n-    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n-  end\n-  end)\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-front_app\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  currentBusiness = env.INFO\n-  local appType = getAppType(env.INFO) or 0;\n-  local fmApp = env.INFO\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    local icon_line = selected and \" —\" or \"\"\n-    spaces[i]:set({\n-      icon = { highlight = selected or icon_line, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-  end\n-end)\n"
                },
                {
                    "date": 1716833351028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \n currentBusiness = _ENV.INFO\n \n local front_app = settings.front_app\n-print(\"=::q=q=q==q\", front_app)\n+print(\"CURRENTTT FOCUS\", { front_app })\n \n -- local currentlyFOcsed  = application()\n \n function debugTable(obj)\n@@ -255,9 +255,9 @@\n \n spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n--- front_app\n+front_app\n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n   currentBusiness = env.INFO\n   local appType = getAppType(env.INFO) or 0;\n   local fmApp = env.INFO\n"
                },
                {
                    "date": 1716833381943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,8 @@\n \n spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n   sbar.trigger(\"swap_menus_and_spaces\")\n end)\n-front_app\n spaces_indicator:subscribe(\"front_app_switched\", function(env)\n   currentBusiness = env.INFO\n   local appType = getAppType(env.INFO) or 0;\n   local fmApp = env.INFO\n"
                },
                {
                    "date": 1716833470945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,15 +19,11 @@\n   end\n   return 0\n end\n \n-currentBusiness = _ENV.INFO\n+local currentBusiness = settings.front_app\n+print(\"CURRENTTT FOCUS\", { x settings.front_app })\n \n-local front_app = settings.front_app\n-print(\"CURRENTTT FOCUS\", { front_app })\n-\n--- local currentlyFOcsed  = application()\n-\n function debugTable(obj)\n   print(dumpTableToString(obj))\n end\n \n"
                },
                {
                    "date": 1716833488856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   return 0\n end\n \n local currentBusiness = settings.front_app\n-print(\"CURRENTTT FOCUS\", { x settings.front_app })\n+print(\"CURRENTTT FOCUS\", debugTable(settings))\n \n function debugTable(obj)\n   print(dumpTableToString(obj))\n end\n"
                },
                {
                    "date": 1716833497012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,281 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+function getAppType(fmApp)\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    return 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    return 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    return 3\n+  end\n+  return 0\n+end\n+\n+local currentBusiness = settings.front_app\n+print(\"CURRENTTT FOCUS\", dumpTableToString(settings))\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.red,\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 0,\n+    padding_right = 5,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors   = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser       = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local SpaceOps       = {};\n+--\n+local currentAppType = nil\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n+\n+  debugTable(env)\n+\n+  -- currentAppType = (currentAppType)\n+  if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n+    return 0\n+  end\n+\n+\n+  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n+  local icon_line  = \"\"\n+  local no_app     = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local appType = getAppType(app) or 0\n+    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n+  end\n+  -- evert spacetypes:\n+  for i = 1, 3, 1 do\n+    print('SET DES ICONS', spaceTypes[i])\n+    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n+  end\n+  end)\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  currentBusiness = env.INFO\n+  local appType = getAppType(env.INFO) or 0;\n+  local fmApp = env.INFO\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    local icon_line = selected and \" —\" or \"\"\n+    spaces[i]:set({\n+      icon = { highlight = selected or icon_line, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+  end\n+end)\n"
                },
                {
                    "date": 1716833505050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   return 0\n end\n \n local currentBusiness = settings.front_app\n-print(\"CURRENTTT FOCUS\", dumpTableToString(settings))\n+print(\"CURRENTTT FOCUS\", dumpTableToString(settings, 1))\n \n function debugTable(obj)\n   print(dumpTableToString(obj))\n end\n@@ -278,285 +278,4 @@\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n   end\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-function getAppType(fmApp)\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    return 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    return 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    return 3\n-  end\n-  return 0\n-end\n-\n-local currentBusiness = settings.front_app\n-print(\"CURRENTTT FOCUS\", debugTable(settings))\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.red,\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 0,\n-    padding_right = 5,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors   = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser       = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local SpaceOps       = {};\n---\n-local currentAppType = nil\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n-\n-  debugTable(env)\n-\n-  -- currentAppType = (currentAppType)\n-  if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n-    return 0\n-  end\n-\n-\n-  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n-  local icon_line  = \"\"\n-  local no_app     = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local appType = getAppType(app) or 0\n-    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n-  end\n-  -- evert spacetypes:\n-  for i = 1, 3, 1 do\n-    print('SET DES ICONS', spaceTypes[i])\n-    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n-  end\n-  end)\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  currentBusiness = env.INFO\n-  local appType = getAppType(env.INFO) or 0;\n-  local fmApp = env.INFO\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    local icon_line = selected and \" —\" or \"\"\n-    spaces[i]:set({\n-      icon = { highlight = selected or icon_line, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-  end\n-end)\n"
                },
                {
                    "date": 1716833549819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,8 @@\n   return 0\n end\n \n local currentBusiness = settings.front_app\n-print(\"CURRENTTT FOCUS\", dumpTableToString(settings, 1))\n \n function debugTable(obj)\n   print(dumpTableToString(obj))\n end\n"
                },
                {
                    "date": 1716833644127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,9 +189,9 @@\n }\n \n local SpaceOps       = {};\n --\n-local currentAppType = nil\n+local currentAppType = getAppType(settings.front_app) or nil\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n \n   debugTable(env)\n"
                },
                {
                    "date": 1716833667996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,8 +192,9 @@\n --\n local currentAppType = getAppType(settings.front_app) or nil\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n+  print('calllll', currentAppType, \"callllll\")\n \n   debugTable(env)\n \n   -- currentAppType = (currentAppType)\n"
                },
                {
                    "date": 1716833711802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,284 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+function getAppType(fmApp)\n+  if fmApp == nil then\n+    return 0\n+  end\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    return 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    return 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    return 3\n+  end\n+  return 0\n+end\n+\n+local currentBusiness = settings.front_app\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.red,\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 0,\n+    padding_right = 5,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors   = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser       = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local SpaceOps       = {};\n+--\n+local currentAppType = getAppType(settings.front_app) or nil\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n+  print('calllll', currentAppType, \"callllll\")\n+\n+  debugTable(env)\n+\n+  -- currentAppType = (currentAppType)\n+  if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n+    return 0\n+  end\n+\n+\n+  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n+  local icon_line  = \"\"\n+  local no_app     = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local appType = getAppType(app) or 0\n+    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n+  end\n+  -- evert spacetypes:\n+  for i = 1, 3, 1 do\n+    print('SET DES ICONS', spaceTypes[i])\n+    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n+  end\n+  end)\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  currentBusiness = env.INFO\n+  local appType = getAppType(env.INFO) or 0;\n+  local fmApp = env.INFO\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    local icon_line = selected and \" —\" or \"\"\n+    spaces[i]:set({\n+      icon = { highlight = selected or icon_line, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+  end\n+end)\n"
                },
                {
                    "date": 1716833838178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,11 +200,11 @@\n \n   debugTable(env)\n \n   -- currentAppType = (currentAppType)\n-  if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n-    return 0\n-  end\n+  -- if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n+  --   return 0\n+  -- end\n \n \n   local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n   local icon_line  = \"\"\n@@ -281,285 +281,4 @@\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n   end\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-function getAppType(fmApp)\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    return 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    return 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    return 3\n-  end\n-  return 0\n-end\n-\n-local currentBusiness = settings.front_app\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.red,\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 0,\n-    padding_right = 5,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors   = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser       = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local SpaceOps       = {};\n---\n-local currentAppType = getAppType(settings.front_app) or nil\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n-  print('calllll', currentAppType, \"callllll\")\n-\n-  debugTable(env)\n-\n-  -- currentAppType = (currentAppType)\n-  if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n-    return 0\n-  end\n-\n-\n-  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n-  local icon_line  = \"\"\n-  local no_app     = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local appType = getAppType(app) or 0\n-    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n-  end\n-  -- evert spacetypes:\n-  for i = 1, 3, 1 do\n-    print('SET DES ICONS', spaceTypes[i])\n-    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n-  end\n-  end)\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  currentBusiness = env.INFO\n-  local appType = getAppType(env.INFO) or 0;\n-  local fmApp = env.INFO\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    local icon_line = selected and \" —\" or \"\"\n-    spaces[i]:set({\n-      icon = { highlight = selected or icon_line, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-  end\n-end)\n"
                },
                {
                    "date": 1716833919850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,11 +200,11 @@\n \n   debugTable(env)\n \n   -- currentAppType = (currentAppType)\n-  -- if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n-  --   return 0\n-  -- end\n+  if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n+    return 0\n+  end\n \n \n   local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n   local icon_line  = \"\"\n@@ -213,14 +213,12 @@\n   for app, count in pairs(env.INFO.apps) do\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     local appType = getAppType(app) or 0\n-    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n+    spaceTypes[appType] =spaceTypes[appType]  .. \" \" .. icon\n   end\n   -- evert spacetypes:\n   for i = 1, 3, 1 do\n-    print('SET DES ICONS', spaceTypes[i])\n     spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n   end\n   end)\n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n"
                },
                {
                    "date": 1716833973616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,282 @@\n+local colors = require(\"colors\")\n+local icons = require(\"icons\")\n+local settings = require(\"settings\")\n+local app_icons = require(\"helpers.app_icons\")\n+-- local focus  require(\"../..hammerspoon/focus-history\")\n+-- local console = require(\"../../.hammerspoon/console\")\n+local spaces = {}\n+\n+\n+function getAppType(fmApp)\n+  if fmApp == nil then\n+    return 0\n+  end\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+    return 1\n+  end\n+  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n+    return 2\n+  end\n+  if string.match(fmApp, \"iTerm\") then\n+    return 3\n+  end\n+  return 0\n+end\n+\n+local currentBusiness = settings.front_app\n+\n+function debugTable(obj)\n+  print(dumpTableToString(obj))\n+end\n+\n+function dumpTableToString(o, level)\n+  if level == nil then\n+    level = 1\n+  end\n+  local showCounter = false\n+  local intend = string.rep('  ', level)\n+  if type(o) == 'table' then\n+    local info = {}\n+    for k, v in pairs(o) do\n+      if type(k) ~= 'number' then\n+        --k = '  [\"'..k..'\"] = '\n+        k = '  ' .. k .. ' = '\n+      else\n+        k = '  '\n+      end\n+      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n+\n+      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n+      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n+    end\n+\n+    local s\n+    if #info > 0 then\n+      local counter = (showCounter and ('<' .. #info .. '>') or '')\n+      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n+    else\n+      s = '{}'\n+    end\n+\n+    return s\n+  else\n+    return tostring(o)\n+    -- return hs.inspect(o)\n+  end\n+end\n+\n+for i = 1, 5, 1 do\n+  local space = sbar.add(\"space\", \"space.\" .. i, {\n+    space = i,\n+    icon = {\n+      font = { family = settings.font.numbers },\n+      string = i,\n+      padding_left = 15,\n+      padding_right = 8,\n+      color = colors.white,\n+      highlight_color = colors.red,\n+    },\n+    label = {\n+      padding_right = 20,\n+      color = colors.grey,\n+      highlight_color = colors.white,\n+      font = \"sketchybar-app-font:Regular:16.0\",\n+      y_offset = -1,\n+    },\n+    padding_right = 1,\n+    padding_left = 1,\n+    background = {\n+      color = colors.bg1,\n+      border_width = 1,\n+      height = 26,\n+      border_color = colors.black,\n+    },\n+    popup = { background = { border_width = 5, border_color = colors.black } }\n+  })\n+\n+  spaces[i] = space\n+\n+  -- Single item bracket for space items to achieve double border on highlight\n+  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n+    background = {\n+      color = colors.transparent,\n+      border_color = colors.bg2,\n+      height = 28,\n+      border_width = 2\n+    }\n+  })\n+\n+  -- Padding space\n+  sbar.add(\"space\", \"space.padding.\" .. i, {\n+    space = i,\n+    script = \"\",\n+    width = settings.group_paddings,\n+  })\n+\n+  local space_popup = sbar.add(\"item\", {\n+    position = \"popup.\" .. space.name,\n+    padding_left = 0,\n+    padding_right = 5,\n+    background = {\n+      drawing = true,\n+      image = {\n+        corner_radius = 9,\n+        scale = 0.2\n+      }\n+    }\n+  })\n+\n+  space:subscribe(\"space_change\", function(env)\n+\n+  end)\n+\n+  space:subscribe(\"mouse.clicked\", function(env)\n+    if env.BUTTON == \"other\" then\n+      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n+      space:set({ popup = { drawing = \"toggle\" } })\n+    else\n+      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n+      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n+    end\n+  end)\n+\n+  space:subscribe(\"mouse.exited\", function(_)\n+    space:set({ popup = { drawing = false } })\n+  end)\n+end\n+\n+\n+\n+\n+\n+\n+local space_window_observer = sbar.add(\"item\", {\n+  drawing = false,\n+  updates = true,\n+})\n+\n+local spaces_indicator = sbar.add(\"item\", {\n+  padding_left = -3,\n+  padding_right = 0,\n+  icon = {\n+    padding_left = 8,\n+    padding_right = 9,\n+    color = colors.grey,\n+    string = icons.switch.on,\n+  },\n+  label = {\n+    width = 0,\n+    padding_left = 0,\n+    padding_right = 8,\n+    string = \"Spaces\",\n+    color = colors.bg1,\n+  },\n+  background = {\n+    color = colors.with_alpha(colors.grey, 0.0),\n+    border_color = colors.with_alpha(colors.bg1, 0.0),\n+  }\n+})\n+\n+\n+\n+local tCodeEditors   = {\n+  \"dev.zed.Zed\",\n+  \"com.microsoft.VSCodeInsiders\",\n+  \"com.microsoft.VSCode\",\n+  \"com.sublimetext.4\",\n+}\n+local tBrowser       = {\n+  \"Safari\",\n+  \"Chrome\",\n+  \"Browser\",\n+}\n+\n+local SpaceOps       = {};\n+--\n+local currentAppType = getAppType(settings.front_app) or nil\n+space_window_observer:subscribe(\"space_windows_change\", function(env)\n+  -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n+  print('calllll', currentAppType, \"callllll\")\n+\n+  debugTable(env)\n+\n+  -- currentAppType = (currentAppType)\n+  if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n+    return 0\n+  end\n+\n+\n+  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n+  local icon_line  = \"\"\n+  local no_app     = true\n+\n+  for app, count in pairs(env.INFO.apps) do\n+    local lookup = app_icons[app]\n+    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+    local appType = getAppType(app) or 0\n+    spaceTypes[appType] =spaceTypes[appType]  .. \" \" .. icon\n+  end\n+  -- evert spacetypes:\n+  for i = 1, 3, 1 do\n+    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n+  end\n+  end)\n+spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.entered\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 1.0 },\n+        border_color = { alpha = 1.0 },\n+      },\n+      icon = { color = colors.bg1 },\n+      label = { width = \"dynamic\" }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.exited\", function(env)\n+  sbar.animate(\"tanh\", 30, function()\n+    spaces_indicator:set({\n+      background = {\n+        color = { alpha = 0.0 },\n+        border_color = { alpha = 0.0 },\n+      },\n+      icon = { color = colors.grey },\n+      label = { width = 0, }\n+    })\n+  end)\n+end)\n+\n+spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n+  sbar.trigger(\"swap_menus_and_spaces\")\n+end)\n+spaces_indicator:subscribe(\"front_app_switched\", function(env)\n+  currentBusiness = env.INFO\n+  local appType = getAppType(env.INFO) or 0;\n+  local fmApp = env.INFO\n+  local lookup = app_icons[fmApp]\n+  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  local selectedNum = appType\n+\n+  for i = 1, 5, 1 do\n+    local selected = (i == selectedNum)\n+    local color = selected and colors.grey or colors.bg2\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+      background = {\n+        color = colors.transparent,\n+        border_color = colors.bg2,\n+        height = 28,\n+        border_width = 2\n+      }\n+    })\n+    local icon_line = selected and \" —\" or \"\"\n+    spaces[i]:set({\n+      icon = { highlight = selected or icon_line, },\n+      label = { highlight = selected },\n+      background = { border_color = selected and colors.black or colors.bg2 }\n+    })\n+  end\n+end)\n"
                },
                {
                    "date": 1716834000388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,8 @@\n local spaces = {}\n \n \n function getAppType(fmApp)\n-  if fmApp == nil then\n-    return 0\n-  end\n   if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n     return 1\n   end\n   if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n@@ -195,9 +192,8 @@\n --\n local currentAppType = getAppType(settings.front_app) or nil\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n-  print('calllll', currentAppType, \"callllll\")\n \n   debugTable(env)\n \n   -- currentAppType = (currentAppType)\n@@ -213,12 +209,14 @@\n   for app, count in pairs(env.INFO.apps) do\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     local appType = getAppType(app) or 0\n-    spaceTypes[appType] =spaceTypes[appType]  .. \" \" .. icon\n+    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n   end\n   -- evert spacetypes:\n   for i = 1, 3, 1 do\n+    print('SET DES ICONS', spaceTypes[i])\n     spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n   end\n   end)\n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n@@ -279,286 +277,4 @@\n       background = { border_color = selected and colors.black or colors.bg2 }\n     })\n   end\n end)\n-local colors = require(\"colors\")\n-local icons = require(\"icons\")\n-local settings = require(\"settings\")\n-local app_icons = require(\"helpers.app_icons\")\n--- local focus  require(\"../..hammerspoon/focus-history\")\n--- local console = require(\"../../.hammerspoon/console\")\n-local spaces = {}\n-\n-\n-function getAppType(fmApp)\n-  if fmApp == nil then\n-    return 0\n-  end\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n-    return 1\n-  end\n-  if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n-    return 2\n-  end\n-  if string.match(fmApp, \"iTerm\") then\n-    return 3\n-  end\n-  return 0\n-end\n-\n-local currentBusiness = settings.front_app\n-\n-function debugTable(obj)\n-  print(dumpTableToString(obj))\n-end\n-\n-function dumpTableToString(o, level)\n-  if level == nil then\n-    level = 1\n-  end\n-  local showCounter = false\n-  local intend = string.rep('  ', level)\n-  if type(o) == 'table' then\n-    local info = {}\n-    for k, v in pairs(o) do\n-      if type(k) ~= 'number' then\n-        --k = '  [\"'..k..'\"] = '\n-        k = '  ' .. k .. ' = '\n-      else\n-        k = '  '\n-      end\n-      table.insert(info, intend .. k .. dumpTableToString(v, level + 1))\n-\n-      --if type(k) ~= 'number' then k = '\"'..k..'\"' end\n-      --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))\n-    end\n-\n-    local s\n-    if #info > 0 then\n-      local counter = (showCounter and ('<' .. #info .. '>') or '')\n-      s = counter .. '{\\n' .. table.concat(info, ',\\n') .. '\\n' .. intend .. '}'\n-    else\n-      s = '{}'\n-    end\n-\n-    return s\n-  else\n-    return tostring(o)\n-    -- return hs.inspect(o)\n-  end\n-end\n-\n-for i = 1, 5, 1 do\n-  local space = sbar.add(\"space\", \"space.\" .. i, {\n-    space = i,\n-    icon = {\n-      font = { family = settings.font.numbers },\n-      string = i,\n-      padding_left = 15,\n-      padding_right = 8,\n-      color = colors.white,\n-      highlight_color = colors.red,\n-    },\n-    label = {\n-      padding_right = 20,\n-      color = colors.grey,\n-      highlight_color = colors.white,\n-      font = \"sketchybar-app-font:Regular:16.0\",\n-      y_offset = -1,\n-    },\n-    padding_right = 1,\n-    padding_left = 1,\n-    background = {\n-      color = colors.bg1,\n-      border_width = 1,\n-      height = 26,\n-      border_color = colors.black,\n-    },\n-    popup = { background = { border_width = 5, border_color = colors.black } }\n-  })\n-\n-  spaces[i] = space\n-\n-  -- Single item bracket for space items to achieve double border on highlight\n-  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n-    background = {\n-      color = colors.transparent,\n-      border_color = colors.bg2,\n-      height = 28,\n-      border_width = 2\n-    }\n-  })\n-\n-  -- Padding space\n-  sbar.add(\"space\", \"space.padding.\" .. i, {\n-    space = i,\n-    script = \"\",\n-    width = settings.group_paddings,\n-  })\n-\n-  local space_popup = sbar.add(\"item\", {\n-    position = \"popup.\" .. space.name,\n-    padding_left = 0,\n-    padding_right = 5,\n-    background = {\n-      drawing = true,\n-      image = {\n-        corner_radius = 9,\n-        scale = 0.2\n-      }\n-    }\n-  })\n-\n-  space:subscribe(\"space_change\", function(env)\n-\n-  end)\n-\n-  space:subscribe(\"mouse.clicked\", function(env)\n-    if env.BUTTON == \"other\" then\n-      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n-      space:set({ popup = { drawing = \"toggle\" } })\n-    else\n-      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n-      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n-    end\n-  end)\n-\n-  space:subscribe(\"mouse.exited\", function(_)\n-    space:set({ popup = { drawing = false } })\n-  end)\n-end\n-\n-\n-\n-\n-\n-\n-local space_window_observer = sbar.add(\"item\", {\n-  drawing = false,\n-  updates = true,\n-})\n-\n-local spaces_indicator = sbar.add(\"item\", {\n-  padding_left = -3,\n-  padding_right = 0,\n-  icon = {\n-    padding_left = 8,\n-    padding_right = 9,\n-    color = colors.grey,\n-    string = icons.switch.on,\n-  },\n-  label = {\n-    width = 0,\n-    padding_left = 0,\n-    padding_right = 8,\n-    string = \"Spaces\",\n-    color = colors.bg1,\n-  },\n-  background = {\n-    color = colors.with_alpha(colors.grey, 0.0),\n-    border_color = colors.with_alpha(colors.bg1, 0.0),\n-  }\n-})\n-\n-\n-\n-local tCodeEditors   = {\n-  \"dev.zed.Zed\",\n-  \"com.microsoft.VSCodeInsiders\",\n-  \"com.microsoft.VSCode\",\n-  \"com.sublimetext.4\",\n-}\n-local tBrowser       = {\n-  \"Safari\",\n-  \"Chrome\",\n-  \"Browser\",\n-}\n-\n-local SpaceOps       = {};\n---\n-local currentAppType = getAppType(settings.front_app) or nil\n-space_window_observer:subscribe(\"space_windows_change\", function(env)\n-  -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n-  print('calllll', currentAppType, \"callllll\")\n-\n-  debugTable(env)\n-\n-  -- currentAppType = (currentAppType)\n-  if (currentAppType ~= nil and currentAppType ~= getAppType(env.INFO.app)) then\n-    return 0\n-  end\n-\n-\n-  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n-  local icon_line  = \"\"\n-  local no_app     = true\n-\n-  for app, count in pairs(env.INFO.apps) do\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local appType = getAppType(app) or 0\n-    spaceTypes[appType] =spaceTypes[appType]  .. \" \" .. icon\n-  end\n-  -- evert spacetypes:\n-  for i = 1, 3, 1 do\n-    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n-  end\n-  end)\n-spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.entered\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 1.0 },\n-        border_color = { alpha = 1.0 },\n-      },\n-      icon = { color = colors.bg1 },\n-      label = { width = \"dynamic\" }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.exited\", function(env)\n-  sbar.animate(\"tanh\", 30, function()\n-    spaces_indicator:set({\n-      background = {\n-        color = { alpha = 0.0 },\n-        border_color = { alpha = 0.0 },\n-      },\n-      icon = { color = colors.grey },\n-      label = { width = 0, }\n-    })\n-  end)\n-end)\n-\n-spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n-  sbar.trigger(\"swap_menus_and_spaces\")\n-end)\n-spaces_indicator:subscribe(\"front_app_switched\", function(env)\n-  currentBusiness = env.INFO\n-  local appType = getAppType(env.INFO) or 0;\n-  local fmApp = env.INFO\n-  local lookup = app_icons[fmApp]\n-  local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-  local selectedNum = appType\n-\n-  for i = 1, 5, 1 do\n-    local selected = (i == selectedNum)\n-    local color = selected and colors.grey or colors.bg2\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n-      background = {\n-        color = colors.transparent,\n-        border_color = colors.bg2,\n-        height = 28,\n-        border_width = 2\n-      }\n-    })\n-    local icon_line = selected and \" —\" or \"\"\n-    spaces[i]:set({\n-      icon = { highlight = selected or icon_line, },\n-      label = { highlight = selected },\n-      background = { border_color = selected and colors.black or colors.bg2 }\n-    })\n-  end\n-end)\n"
                },
                {
                    "date": 1716834100435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,9 +189,9 @@\n }\n \n local SpaceOps       = {};\n --\n-local currentAppType = getAppType(settings.front_app) or nil\n+local currentAppType = nil\n space_window_observer:subscribe(\"space_windows_change\", function(env)\n   -- print('-----', \"SPACE CALL\", env.INFO.space,'----', env.INFO.app, '----------')\n \n   debugTable(env)\n"
                },
                {
                    "date": 1720950940532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,9 +201,9 @@\n     return 0\n   end\n \n \n-  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n+  local spaceTypes = { \"xxx\", \"\", \"\", \"\", \"\" }\n   local icon_line  = \"\"\n   local no_app     = true\n \n   for app, count in pairs(env.INFO.apps) do\n"
                },
                {
                    "date": 1720950976634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n local spaces = {}\n \n \n function getAppType(fmApp)\n-  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") then\n+  if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") or string.match(fmApp, \"Orion\") then\n     return 1\n   end\n   if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n     return 2\n@@ -217,9 +217,9 @@\n   for i = 1, 3, 1 do\n     print('SET DES ICONS', spaceTypes[i])\n     spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n   end\n-  end)\n+end)\n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n end)\n \n spaces_indicator:subscribe(\"mouse.entered\", function(env)\n"
                },
                {
                    "date": 1720951001579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   end\n   if string.match(fmApp, \"iTerm\") then\n     return 3\n   end\n-  return 0\n+  return 1\n end\n \n local currentBusiness = settings.front_app\n \n"
                },
                {
                    "date": 1720951017438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n local spaces = {}\n \n \n function getAppType(fmApp)\n+  print('GET APP TYPE', fmApp)\n   if string.match(fmApp, \"Chrome\") or string.match(fmApp, \"Safari\") or string.match(fmApp, \"Orion\") then\n     return 1\n   end\n   if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n@@ -16,9 +17,9 @@\n   end\n   if string.match(fmApp, \"iTerm\") then\n     return 3\n   end\n-  return 1\n+  return 0\n end\n \n local currentBusiness = settings.front_app\n \n"
                },
                {
                    "date": 1720951031139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   end\n   if string.match(fmApp, \"Code\") or string.match(fmApp, \"Zed\") then\n     return 2\n   end\n-  if string.match(fmApp, \"iTerm\") then\n+  if string.match(fmApp, \"iTerm2\") then\n     return 3\n   end\n   return 0\n end\n"
                },
                {
                    "date": 1720951109706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,13 +202,14 @@\n     return 0\n   end\n \n \n-  local spaceTypes = { \"xxx\", \"\", \"\", \"\", \"\" }\n+  local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n   local icon_line  = \"\"\n   local no_app     = true\n \n   for app, count in pairs(env.INFO.apps) do\n+    print('APP', app)\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     local appType = getAppType(app) or 0\n     spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n"
                },
                {
                    "date": 1720951133626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,11 +205,11 @@\n \n   local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n   local icon_line  = \"\"\n   local no_app     = true\n-\n+  print('Icons:env.INFO.apps', env.INFO.apps)\n   for app, count in pairs(env.INFO.apps) do\n-    print('APP', app)\n+    print('APP', app)''\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     local appType = getAppType(app) or 0\n     spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n"
                },
                {
                    "date": 1720951192676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,9 @@\n     spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n     print('Icons:spaceTypes[appType]', spaceTypes[appType])\n   end\n   -- evert spacetypes:\n-  for i = 1, 3, 1 do\n+  for i = 1, 5, 1 do\n     print('SET DES ICONS', spaceTypes[i])\n     spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n   end\n end)\n"
                },
                {
                    "date": 1720951274159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,13 @@\n   end\n   -- evert spacetypes:\n   for i = 1, 5, 1 do\n     print('SET DES ICONS', spaceTypes[i])\n-    spaces[i]:set({ label = spaceTypes[i] or \" -\" })\n+    if (i == 1) then\n+      label = ':code:'\n+    end\n+    label = ':chrome:'\n+    spaces[i]:set({ label = label })\n   end\n end)\n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n end)\n"
                },
                {
                    "date": 1720951308724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,12 +218,12 @@\n   -- evert spacetypes:\n   for i = 1, 5, 1 do\n     print('SET DES ICONS', spaceTypes[i])\n     if (i == 1) then\n-      label = ':code:'\n+      spaces[i]:set({ label = ':code:' })\n+    else\n+      spaces[i]:set({ label = ':chrome:' })\n     end\n-    label = ':chrome:'\n-    spaces[i]:set({ label = label })\n   end\n end)\n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n end)\n"
                },
                {
                    "date": 1720951335737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,11 +218,13 @@\n   -- evert spacetypes:\n   for i = 1, 5, 1 do\n     print('SET DES ICONS', spaceTypes[i])\n     if (i == 1) then\n-      spaces[i]:set({ label = ':code:' })\n-    else\n-      spaces[i]:set({ label = ':chrome:' })\n+      spaces[i]:set({ label = ':orion:' })\n+      if (i == 2) then\n+        spaces[i]:set({ label = ':code:' })\n+      else\n+      spaces[i]:set({ label = ':iterm:' })\n     end\n   end\n end)\n spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n"
                },
                {
                    "date": 1720951351593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,11 +219,11 @@\n   for i = 1, 5, 1 do\n     print('SET DES ICONS', spaceTypes[i])\n     if (i == 1) then\n       spaces[i]:set({ label = ':orion:' })\n-      if (i == 2) then\n+    else if (i == 2) then\n         spaces[i]:set({ label = ':code:' })\n-      else\n+    else\n       spaces[i]:set({ label = ':iterm:' })\n     end\n   end\n end)\n"
                },
                {
                    "date": 1720951361296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,10 +219,10 @@\n   for i = 1, 5, 1 do\n     print('SET DES ICONS', spaceTypes[i])\n     if (i == 1) then\n       spaces[i]:set({ label = ':orion:' })\n-    else if (i == 2) then\n-        spaces[i]:set({ label = ':code:' })\n+    -- else if (i == 2) then\n+    --     spaces[i]:set({ label = ':code:' })\n     else\n       spaces[i]:set({ label = ':iterm:' })\n     end\n   end\n"
                },
                {
                    "date": 1720951376495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,10 +219,10 @@\n   for i = 1, 5, 1 do\n     print('SET DES ICONS', spaceTypes[i])\n     if (i == 1) then\n       spaces[i]:set({ label = ':orion:' })\n-    -- else if (i == 2) then\n-    --     spaces[i]:set({ label = ':code:' })\n+    elseif (i == 2) then\n+        spaces[i]:set({ label = ':code:' })\n     else\n       spaces[i]:set({ label = ':iterm:' })\n     end\n   end\n"
                },
                {
                    "date": 1720951426043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,8 +221,12 @@\n     if (i == 1) then\n       spaces[i]:set({ label = ':orion:' })\n     elseif (i == 2) then\n         spaces[i]:set({ label = ':code:' })\n+      elseif (i == 3) then\n+        spaces[i]:set({ label = ':fimga:' })\n+      elseif (i == 4) then\n+        spaces[i]:set({ label = ':xcode:' })\n     else\n       spaces[i]:set({ label = ':iterm:' })\n     end\n   end\n"
                },
                {
                    "date": 1720951435972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,9 +224,9 @@\n         spaces[i]:set({ label = ':code:' })\n       elseif (i == 3) then\n         spaces[i]:set({ label = ':fimga:' })\n       elseif (i == 4) then\n-        spaces[i]:set({ label = ':xcode:' })\n+        spaces[i]:set({ label = ':console:' })\n     else\n       spaces[i]:set({ label = ':iterm:' })\n     end\n   end\n"
                },
                {
                    "date": 1720951470822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,11 +222,11 @@\n       spaces[i]:set({ label = ':orion:' })\n     elseif (i == 2) then\n         spaces[i]:set({ label = ':code:' })\n       elseif (i == 3) then\n-        spaces[i]:set({ label = ':fimga:' })\n+        spaces[i]:set({ label = ':docker:' })\n       elseif (i == 4) then\n-        spaces[i]:set({ label = ':console:' })\n+        spaces[i]:set({ label = ':alacritty:' })\n     else\n       spaces[i]:set({ label = ':iterm:' })\n     end\n   end\n"
                },
                {
                    "date": 1720952525954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,9 +207,9 @@\n   local icon_line  = \"\"\n   local no_app     = true\n   print('Icons:env.INFO.apps', env.INFO.apps)\n   for app, count in pairs(env.INFO.apps) do\n-    print('APP', app)''\n+    print('APP', app)\n     local lookup = app_icons[app]\n     local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n     local appType = getAppType(app) or 0\n     spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n@@ -222,9 +222,9 @@\n       spaces[i]:set({ label = ':orion:' })\n     elseif (i == 2) then\n         spaces[i]:set({ label = ':code:' })\n       elseif (i == 3) then\n-        spaces[i]:set({ label = ':docker:' })\n+        spaces[i]:set({ label = ':vim:' })\n       elseif (i == 4) then\n         spaces[i]:set({ label = ':alacritty:' })\n     else\n       spaces[i]:set({ label = ':iterm:' })\n"
                },
                {
                    "date": 1720952542532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,9 @@\n       spaces[i]:set({ label = ':orion:' })\n     elseif (i == 2) then\n         spaces[i]:set({ label = ':code:' })\n       elseif (i == 3) then\n-        spaces[i]:set({ label = ':vim:' })\n+        spaces[i]:set({ label = ':terminal:' })\n       elseif (i == 4) then\n         spaces[i]:set({ label = ':alacritty:' })\n     else\n       spaces[i]:set({ label = ':iterm:' })\n"
                },
                {
                    "date": 1720952548441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,9 @@\n       spaces[i]:set({ label = ':orion:' })\n     elseif (i == 2) then\n         spaces[i]:set({ label = ':code:' })\n       elseif (i == 3) then\n-        spaces[i]:set({ label = ':terminal:' })\n+        spaces[i]:set({ label = ':iterm:' })\n       elseif (i == 4) then\n         spaces[i]:set({ label = ':alacritty:' })\n     else\n       spaces[i]:set({ label = ':iterm:' })\n"
                },
                {
                    "date": 1720952557795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,9 @@\n       spaces[i]:set({ label = ':orion:' })\n     elseif (i == 2) then\n         spaces[i]:set({ label = ':code:' })\n       elseif (i == 3) then\n-        spaces[i]:set({ label = ':iterm:' })\n+        spaces[i]:set({ label = ':iterm2:' })\n       elseif (i == 4) then\n         spaces[i]:set({ label = ':alacritty:' })\n     else\n       spaces[i]:set({ label = ':iterm:' })\n"
                },
                {
                    "date": 1720952604883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,25 +206,25 @@\n   local spaceTypes = { \"\", \"\", \"\", \"\", \"\" }\n   local icon_line  = \"\"\n   local no_app     = true\n   print('Icons:env.INFO.apps', env.INFO.apps)\n-  for app, count in pairs(env.INFO.apps) do\n-    print('APP', app)\n-    local lookup = app_icons[app]\n-    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n-    local appType = getAppType(app) or 0\n-    spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n-    print('Icons:spaceTypes[appType]', spaceTypes[appType])\n-  end\n+  -- for app, count in pairs(env.INFO.apps) do\n+  --   print('APP', app)\n+  --   local lookup = app_icons[app]\n+  --   local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n+  --   local appType = getAppType(app) or 0\n+  --   spaceTypes[appType] = (spaceTypes[appType] or \"\") .. \" \" .. icon\n+  --   print('Icons:spaceTypes[appType]', spaceTypes[appType])\n+  -- end\n   -- evert spacetypes:\n   for i = 1, 5, 1 do\n     print('SET DES ICONS', spaceTypes[i])\n     if (i == 1) then\n       spaces[i]:set({ label = ':orion:' })\n     elseif (i == 2) then\n         spaces[i]:set({ label = ':code:' })\n       elseif (i == 3) then\n-        spaces[i]:set({ label = ':iterm2:' })\n+        spaces[i]:set({ label = ':terminal:' })\n       elseif (i == 4) then\n         spaces[i]:set({ label = ':alacritty:' })\n     else\n       spaces[i]:set({ label = ':iterm:' })\n"
                },
                {
                    "date": 1720952706266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,9 +273,9 @@\n \n   for i = 1, 5, 1 do\n     local selected = (i == selectedNum)\n     local color = selected and colors.grey or colors.bg2\n-    local space_bracket = sbar.add(\"bracket\", { spaces[i].name }, {\n+    local space_bracket = sbar.add(\"bracket\", { spaces[i].title }, {\n       background = {\n         color = colors.transparent,\n         border_color = colors.bg2,\n         height = 28,\n"
                }
            ],
            "date": 1716803101415,
            "name": "Commit-0",
            "content": "local colors = require(\"colors\")\nlocal icons = require(\"icons\")\nlocal settings = require(\"settings\")\nlocal app_icons = require(\"helpers.app_icons\")\n\nlocal spaces = {}\n\nfor i = 1, 5, 1 do\n  local space = sbar.add(\"space\", \"space.\" .. i, {\n    space = i,\n    icon = {\n      font = { family = settings.font.numbers },\n      string = i,\n      padding_left = 15,\n      padding_right = 8,\n      color = colors.white,\n      highlight_color = colors.red,\n    },\n    label = {\n      padding_right = 20,\n      color = colors.grey,\n      highlight_color = colors.white,\n      font = \"sketchybar-app-font:Regular:16.0\",\n      y_offset = -1,\n    },\n    padding_right = 1,\n    padding_left = 1,\n    background = {\n      color = colors.bg1,\n      border_width = 1,\n      height = 26,\n      border_color = colors.black,\n    },\n    popup = { background = { border_width = 5, border_color = colors.black } }\n  })\n\n  spaces[i] = space\n\n  -- Single item bracket for space items to achieve double border on highlight\n  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n    background = {\n      color = colors.transparent,\n      border_color = colors.bg2,\n      height = 28,\n      border_width = 2\n    }\n  })\n\n  -- Padding space\n  sbar.add(\"space\", \"space.padding.\" .. i, {\n    space = i,\n    script = \"\",\n    width = settings.group_paddings,\n  })\n\n  local space_popup = sbar.add(\"item\", {\n    position = \"popup.\" .. space.name,\n    padding_left= 5,\n    padding_right= 0,\n    background = {\n      drawing = true,\n      image = {\n        corner_radius = 9,\n        scale = 0.2\n      }\n    }\n  })\n\n  space:subscribe(\"space_change\", function(env)\n    local selected = env.SELECTED == \"true\"\n    local color = selected and colors.grey or colors.bg2\n    space:set({\n      icon = { highlight = selected, },\n      label = { highlight = selected },\n      background = { border_color = selected and colors.black or colors.bg2 }\n    })\n    space_bracket:set({\n      background = { border_color = selected and colors.grey or colors.bg2 }\n    })\n  end)\n\n  space:subscribe(\"mouse.clicked\", function(env)\n    if env.BUTTON == \"other\" then\n      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n      space:set({ popup = { drawing = \"toggle\" } })\n    else\n      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n    end\n  end)\n\n  space:subscribe(\"mouse.exited\", function(_)\n    space:set({ popup = { drawing = false } })\n  end)\nend\n\nlocal space_window_observer = sbar.add(\"item\", {\n  drawing = false,\n  updates = true,\n})\n\nlocal spaces_indicator = sbar.add(\"item\", {\n  padding_left = -3,\n  padding_right = 0,\n  icon = {\n    padding_left = 8,\n    padding_right = 9,\n    color = colors.grey,\n    string = icons.switch.on,\n  },\n  label = {\n    width = 0,\n    padding_left = 0,\n    padding_right = 8,\n    string = \"Spaces\",\n    color = colors.bg1,\n  },\n  background = {\n    color = colors.with_alpha(colors.grey, 0.0),\n    border_color = colors.with_alpha(colors.bg1, 0.0),\n  }\n})\n\nspace_window_observer:subscribe(\"space_windows_change\", function(env)\n  local icon_line = \"\"\n  local no_app = true\n  for app, count in pairs(env.INFO.apps) do\n    no_app = false\n    local lookup = app_icons[app]\n    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n    icon_line = icon_line .. \" \" .. icon\n  end\n\n  if (no_app) then\n    icon_line = \" —\"\n  end\n  sbar.animate(\"tanh\", 10, function()\n    spaces[env.INFO.space]:set({ label = icon_line })\n  end)\nend)\n\nspaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n  local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n  spaces_indicator:set({\n    icon = currently_on and icons.switch.off or icons.switch.on\n  })\nend)\n\nspaces_indicator:subscribe(\"mouse.entered\", function(env)\n  sbar.animate(\"tanh\", 30, function()\n    spaces_indicator:set({\n      background = {\n        color = { alpha = 1.0 },\n        border_color = { alpha = 1.0 },\n      },\n      icon = { color = colors.bg1 },\n      label = { width = \"dynamic\" }\n    })\n  end)\nend)\n\nspaces_indicator:subscribe(\"mouse.exited\", function(env)\n  sbar.animate(\"tanh\", 30, function()\n    spaces_indicator:set({\n      background = {\n        color = { alpha = 0.0 },\n        border_color = { alpha = 0.0 },\n      },\n      icon = { color = colors.grey },\n      label = { width = 0, }\n    })\n  end)\nend)\n\nspaces_indicator:subscribe(\"mouse.clicked\", function(env)\n  sbar.trigger(\"swap_menus_and_spaces\")\nend)\n"
        }
    ]
}