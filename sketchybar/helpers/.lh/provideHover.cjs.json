{
    "sourceFile": "provideHover.cjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1720027094940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720027460308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,38 @@\n-// provideHover.cjs\n+// // provideHover.cjs\n \n-// Note: we could also use typescript and actually transpile this file\n-// here we use type annotations in a plain js module!\n-/** @typedef{ import('vscode') } vscode */\n+// // Note: we could also use typescript and actually transpile this file\n+// // here we use type annotations in a plain js module!\n+// /** @typedef{ import('vscode') } vscode */\n \n-/**\n- * we can only use ts annotations here unfortunately\n- * if you want actual ts you need to compile this file yourself from ts\n- * @param vscode {vscode}\n- * @param document {vscode.TextDocument}\n- * @param position {vscode.Position}\n- * @param out {vscode.OutputChannel}\n- * @param token {vscode.CancellationToken}\n- * @return {Promise<vscode.Hover>}\n- */\n-function provideHover(vscode, document, position, token) {\n-  // get word from the document at the hovered location\n-  const range = document.getWordRangeAtPosition(position);\n-  const word = document.getText(range);\n+// /**\n+//  * we can only use ts annotations here unfortunately\n+//  * if you want actual ts you need to compile this file yourself from ts\n+//  * @param vscode {vscode}\n+//  * @param document {vscode.TextDocument}\n+//  * @param position {vscode.Position}\n+//  * @param out {vscode.OutputChannel}\n+//  * @param token {vscode.CancellationToken}\n+//  * @return {Promise<vscode.Hover>}\n+//  */\n+// function provideHover(vscode, document, position, token) {\n+//   // get word from the document at the hovered location\n+//   const range = document.getWordRangeAtPosition(position);\n+//   const word = document.getText(range);\n\\ No newline at end of file\n \n-  // generate something to display\n-  const markdown = new vscode.MarkdownString(\n-    `\n-__This is a custom Hover Panel!__\n+//   // generate something to display\n+//   const markdown = new vscode.MarkdownString(\n+//     `\n+// __This is a custom Hover Panel!__\n \n-It takes markdown an can be used to provide custom data.\n+// It takes markdown an can be used to provide custom data.\n \n-* Current hovered word is: \\`\\`\\`${word}\\`\\`\\`\n-* Current Position is: line ${position.line}, pos ${position.character}\n-`,\n-    true\n-  );\n-  markdown.isTrusted = true;\n-  return new vscode.Hover(markdown);\n-}\n+// * Current hovered word is: \\`\\`\\`${word}\\`\\`\\`\n+// * Current Position is: line ${position.line}, pos ${position.character}\n+// `,\n+//     true\n+//   );\n+//   markdown.isTrusted = true;\n+//   return new vscode.Hover(markdown);\n+// }\n \n-module.exports = { provideHover };\n+// module.exports = { provideHover };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720027469092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,38 @@\n-// // provideHover.cjs\n+// provideHover.cjs\n \n-// // Note: we could also use typescript and actually transpile this file\n-// // here we use type annotations in a plain js module!\n-// /** @typedef{ import('vscode') } vscode */\n+// Note: we could also use typescript and actually transpile this file\n+// here we use type annotations in a plain js module!\n+/** @typedef{ import('vscode') } vscode */\n \n-// /**\n-//  * we can only use ts annotations here unfortunately\n-//  * if you want actual ts you need to compile this file yourself from ts\n-//  * @param vscode {vscode}\n-//  * @param document {vscode.TextDocument}\n-//  * @param position {vscode.Position}\n-//  * @param out {vscode.OutputChannel}\n-//  * @param token {vscode.CancellationToken}\n-//  * @return {Promise<vscode.Hover>}\n-//  */\n-// function provideHover(vscode, document, position, token) {\n-//   // get word from the document at the hovered location\n-//   const range = document.getWordRangeAtPosition(position);\n-//   const word = document.getText(range);\n+/**\n+ * we can only use ts annotations here unfortunately\n+ * if you want actual ts you need to compile this file yourself from ts\n+ * @param vscode {vscode}\n+ * @param document {vscode.TextDocument}\n+ * @param position {vscode.Position}\n+ * @param out {vscode.OutputChannel}\n+ * @param token {vscode.CancellationToken}\n+ * @return {Promise<vscode.Hover>}\n+ */\n+function provideHover(vscode, document, position, token) {\n+  // get word from the document at the hovered location\n+  const range = document.getWordRangeAtPosition(position);\n+  const word = document.getText(range);\n\\ No newline at end of file\n \n-//   // generate something to display\n-//   const markdown = new vscode.MarkdownString(\n-//     `\n-// __This is a custom Hover Panel!__\n+  // generate something to display\n+  const markdown = new vscode.MarkdownString(\n+    `\n+__This is a custom Hover Panel!__\n \n-// It takes markdown an can be used to provide custom data.\n+It takes markdown an can be used to provide custom data.\n \n-// * Current hovered word is: \\`\\`\\`${word}\\`\\`\\`\n-// * Current Position is: line ${position.line}, pos ${position.character}\n-// `,\n-//     true\n-//   );\n-//   markdown.isTrusted = true;\n-//   return new vscode.Hover(markdown);\n-// }\n+* Current hovered word is: \\`\\`\\`${word}\\`\\`\\`\n+* Current Position is: line ${position.line}, pos ${position.character}\n+`,\n+    true\n+  );\n+  markdown.isTrusted = true;\n+  return new vscode.Hover(markdown);\n+}\n \n-// module.exports = { provideHover };\n+module.exports = {  };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1720027094940,
            "name": "Commit-0",
            "content": "// provideHover.cjs\n\n// Note: we could also use typescript and actually transpile this file\n// here we use type annotations in a plain js module!\n/** @typedef{ import('vscode') } vscode */\n\n/**\n * we can only use ts annotations here unfortunately\n * if you want actual ts you need to compile this file yourself from ts\n * @param vscode {vscode}\n * @param document {vscode.TextDocument}\n * @param position {vscode.Position}\n * @param out {vscode.OutputChannel}\n * @param token {vscode.CancellationToken}\n * @return {Promise<vscode.Hover>}\n */\nfunction provideHover(vscode, document, position, token) {\n  // get word from the document at the hovered location\n  const range = document.getWordRangeAtPosition(position);\n  const word = document.getText(range);\n\n  // generate something to display\n  const markdown = new vscode.MarkdownString(\n    `\n__This is a custom Hover Panel!__\n\nIt takes markdown an can be used to provide custom data.\n\n* Current hovered word is: \\`\\`\\`${word}\\`\\`\\`\n* Current Position is: line ${position.line}, pos ${position.character}\n`,\n    true\n  );\n  markdown.isTrusted = true;\n  return new vscode.Hover(markdown);\n}\n\nmodule.exports = { provideHover };"
        }
    ]
}