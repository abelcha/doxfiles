{
    "sourceFile": "event_providers/cpu_load/cpu.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1720024820512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720024938682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n };\n \n static inline void cpu_init(struct cpu* cpu) {\n   // init struct fields to zero:\n-  memset(cpu, 0, sizeof(struct cpu));\n+  // memset(cpu, 0, sizeof(struct cpu));\n   cpu->host = mach_host_self();\n   cpu->count = HOST_CPU_LOAD_INFO_COUNT;\n   cpu->has_prev_load = false;\n }\n"
                },
                {
                    "date": 1720024995965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,11 @@\n   host_cpu_load_info_data_t load;\n   host_cpu_load_info_data_t prev_load;\n   bool has_prev_load;\n \n-  int user_load;\n-  int sys_load;\n-  int total_load;\n+  short user_load;\n+  short sys_load;\n+  short total_load;\n };\n \n static inline void cpu_init(struct cpu* cpu) {\n   // init struct fields to zero:\n"
                },
                {
                    "date": 1720025032378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,11 @@\n   host_cpu_load_info_data_t load;\n   host_cpu_load_info_data_t prev_load;\n   bool has_prev_load;\n \n-  short user_load;\n-  short sys_load;\n-  short total_load;\n+  int8_t user_load;\n+  int8_t sys_load;\n+  int8_t total_load;\n };\n \n static inline void cpu_init(struct cpu* cpu) {\n   // init struct fields to zero:\n"
                },
                {
                    "date": 1720025064683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+#include <mach/mach.h>\n+#include <stdbool.h>\n+#include <unistd.h>\n+#include <stdio.h>\n+\n+struct cpu {\n+  host_t host;\n+  mach_msg_type_number_t count;\n+  host_cpu_load_info_data_t load;\n+  host_cpu_load_info_data_t prev_load;\n+  bool has_prev_load;\n+\n+  ushort user_load;\n+  ushort sys_load;\n+  ushort total_load;\n+};\n+\n+static inline void cpu_init(struct cpu* cpu) {\n+  // init struct fields to zero:\n+  // memset(cpu, 0, sizeof(struct cpu));\n+  cpu->host = mach_host_self();\n+  cpu->count = HOST_CPU_LOAD_INFO_COUNT;\n+  cpu->has_prev_load = false;\n+}\n+\n+static inline void cpu_update(struct cpu* cpu) {\n+  kern_return_t error = host_statistics(cpu->host,\n+                                        HOST_CPU_LOAD_INFO,\n+                                        (host_info_t)&cpu->load,\n+                                        &cpu->count                );\n+\n+  if (error != KERN_SUCCESS) {\n+    printf(\"Error: Could not read cpu host statistics.\\n\");\n+    return;\n+  }\n+\n+  if (cpu->has_prev_load) {\n+    uint32_t delta_user = cpu->load.cpu_ticks[CPU_STATE_USER]\n+                          - cpu->prev_load.cpu_ticks[CPU_STATE_USER];\n+\n+    uint32_t delta_system = cpu->load.cpu_ticks[CPU_STATE_SYSTEM]\n+                            - cpu->prev_load.cpu_ticks[CPU_STATE_SYSTEM];\n+\n+    uint32_t delta_idle = cpu->load.cpu_ticks[CPU_STATE_IDLE]\n+                          - cpu->prev_load.cpu_ticks[CPU_STATE_IDLE];\n+\n+    cpu->user_load = (double)delta_user / (double)(delta_system\n+                                                     + delta_user\n+                                                     + delta_idle) * 100.0;\n+\n+    cpu->sys_load = (double)delta_system / (double)(delta_system\n+                                                      + delta_user\n+                                                      + delta_idle) * 100.0;\n+\n+    cpu->total_load = cpu->user_load + cpu->sys_load;\n+  }\n+\n+  cpu->prev_load = cpu->load;\n+  cpu->has_prev_load = true;\n+}\n"
                },
                {
                    "date": 1720025078718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,11 @@\n   host_cpu_load_info_data_t load;\n   host_cpu_load_info_data_t prev_load;\n   bool has_prev_load;\n \n-  ushort user_load;\n-  ushort sys_load;\n-  ushort total_load;\n+  u_int64_t user_load;\n+  u_int64_t sys_load;\n+  u_int64_t total_load;\n };\n \n static inline void cpu_init(struct cpu* cpu) {\n   // init struct fields to zero:\n@@ -57,64 +57,4 @@\n \n   cpu->prev_load = cpu->load;\n   cpu->has_prev_load = true;\n }\n-#include <mach/mach.h>\n-#include <stdbool.h>\n-#include <unistd.h>\n-#include <stdio.h>\n-\n-struct cpu {\n-  host_t host;\n-  mach_msg_type_number_t count;\n-  host_cpu_load_info_data_t load;\n-  host_cpu_load_info_data_t prev_load;\n-  bool has_prev_load;\n-\n-  int8_t user_load;\n-  int8_t sys_load;\n-  int8_t total_load;\n-};\n-\n-static inline void cpu_init(struct cpu* cpu) {\n-  // init struct fields to zero:\n-  // memset(cpu, 0, sizeof(struct cpu));\n-  cpu->host = mach_host_self();\n-  cpu->count = HOST_CPU_LOAD_INFO_COUNT;\n-  cpu->has_prev_load = false;\n-}\n-\n-static inline void cpu_update(struct cpu* cpu) {\n-  kern_return_t error = host_statistics(cpu->host,\n-                                        HOST_CPU_LOAD_INFO,\n-                                        (host_info_t)&cpu->load,\n-                                        &cpu->count                );\n-\n-  if (error != KERN_SUCCESS) {\n-    printf(\"Error: Could not read cpu host statistics.\\n\");\n-    return;\n-  }\n-\n-  if (cpu->has_prev_load) {\n-    uint32_t delta_user = cpu->load.cpu_ticks[CPU_STATE_USER]\n-                          - cpu->prev_load.cpu_ticks[CPU_STATE_USER];\n-\n-    uint32_t delta_system = cpu->load.cpu_ticks[CPU_STATE_SYSTEM]\n-                            - cpu->prev_load.cpu_ticks[CPU_STATE_SYSTEM];\n-\n-    uint32_t delta_idle = cpu->load.cpu_ticks[CPU_STATE_IDLE]\n-                          - cpu->prev_load.cpu_ticks[CPU_STATE_IDLE];\n-\n-    cpu->user_load = (double)delta_user / (double)(delta_system\n-                                                     + delta_user\n-                                                     + delta_idle) * 100.0;\n-\n-    cpu->sys_load = (double)delta_system / (double)(delta_system\n-                                                      + delta_user\n-                                                      + delta_idle) * 100.0;\n-\n-    cpu->total_load = cpu->user_load + cpu->sys_load;\n-  }\n-\n-  cpu->prev_load = cpu->load;\n-  cpu->has_prev_load = true;\n-}\n"
                },
                {
                    "date": 1720025102661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,11 @@\n   host_cpu_load_info_data_t load;\n   host_cpu_load_info_data_t prev_load;\n   bool has_prev_load;\n \n-  u_int64_t user_load;\n-  u_int64_t sys_load;\n-  u_int64_t total_load;\n+  u_int8_t user_load;\n+  u_int8_t sys_load;\n+  u_int8_t total_load;\n };\n \n static inline void cpu_init(struct cpu* cpu) {\n   // init struct fields to zero:\n"
                },
                {
                    "date": 1720025113301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,11 @@\n   host_cpu_load_info_data_t load;\n   host_cpu_load_info_data_t prev_load;\n   bool has_prev_load;\n \n-  u_int8_t user_load;\n-  u_int8_t sys_load;\n-  u_int8_t total_load;\n+  short user_load;\n+  short sys_load;\n+  short total_load;\n };\n \n static inline void cpu_init(struct cpu* cpu) {\n   // init struct fields to zero:\n"
                },
                {
                    "date": 1720025125959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,11 @@\n   host_cpu_load_info_data_t load;\n   host_cpu_load_info_data_t prev_load;\n   bool has_prev_load;\n \n-  short user_load;\n-  short sys_load;\n-  short total_load;\n+  unsigned short user_load;\n+  unsigned short sys_load;\n+  unsigned short total_load;\n };\n \n static inline void cpu_init(struct cpu* cpu) {\n   // init struct fields to zero:\n"
                },
                {
                    "date": 1720027515761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n #include <mach/mach.h>\n #include <stdbool.h>\n #include <unistd.h>\n-#include <stdio.h>\n \n struct cpu {\n   host_t host;\n   mach_msg_type_number_t count;\n"
                },
                {
                    "date": 1720027530806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+#include <cstdio>\n #include <mach/mach.h>\n #include <stdbool.h>\n #include <unistd.h>\n \n@@ -28,9 +29,9 @@\n                                         (host_info_t)&cpu->load,\n                                         &cpu->count                );\n \n   if (error != KERN_SUCCESS) {\n-    printf(\"Error: Could not read cpu host statistics.\\n\");\n+    std::printf(\"Error: Could not read cpu host statistics.\\n\");\n     return;\n   }\n \n   if (cpu->has_prev_load) {\n"
                },
                {
                    "date": 1720027828881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-#include <cstdio>\n+#include <stdio>\n #include <mach/mach.h>\n #include <stdbool.h>\n #include <unistd.h>\n \n"
                },
                {
                    "date": 1720027844203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-#include <stdio>\n+#include <stdio.h>\n #include <mach/mach.h>\n #include <stdbool.h>\n #include <unistd.h>\n \n"
                },
                {
                    "date": 1720027853292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n                                         (host_info_t)&cpu->load,\n                                         &cpu->count                );\n \n   if (error != KERN_SUCCESS) {\n-    std::printf(\"Error: Could not read cpu host statistics.\\n\");\n+    printf(\"Error: Could not read cpu host statistics.\\n\");\n     return;\n   }\n \n   if (cpu->has_prev_load) {\n"
                }
            ],
            "date": 1720024820512,
            "name": "Commit-0",
            "content": "#include <mach/mach.h>\n#include <stdbool.h>\n#include <unistd.h>\n#include <stdio.h>\n\nstruct cpu {\n  host_t host;\n  mach_msg_type_number_t count;\n  host_cpu_load_info_data_t load;\n  host_cpu_load_info_data_t prev_load;\n  bool has_prev_load;\n\n  int user_load;\n  int sys_load;\n  int total_load;\n};\n\nstatic inline void cpu_init(struct cpu* cpu) {\n  // init struct fields to zero:\n  memset(cpu, 0, sizeof(struct cpu));\n  cpu->host = mach_host_self();\n  cpu->count = HOST_CPU_LOAD_INFO_COUNT;\n  cpu->has_prev_load = false;\n}\n\nstatic inline void cpu_update(struct cpu* cpu) {\n  kern_return_t error = host_statistics(cpu->host,\n                                        HOST_CPU_LOAD_INFO,\n                                        (host_info_t)&cpu->load,\n                                        &cpu->count                );\n\n  if (error != KERN_SUCCESS) {\n    printf(\"Error: Could not read cpu host statistics.\\n\");\n    return;\n  }\n\n  if (cpu->has_prev_load) {\n    uint32_t delta_user = cpu->load.cpu_ticks[CPU_STATE_USER]\n                          - cpu->prev_load.cpu_ticks[CPU_STATE_USER];\n\n    uint32_t delta_system = cpu->load.cpu_ticks[CPU_STATE_SYSTEM]\n                            - cpu->prev_load.cpu_ticks[CPU_STATE_SYSTEM];\n\n    uint32_t delta_idle = cpu->load.cpu_ticks[CPU_STATE_IDLE]\n                          - cpu->prev_load.cpu_ticks[CPU_STATE_IDLE];\n\n    cpu->user_load = (double)delta_user / (double)(delta_system\n                                                     + delta_user\n                                                     + delta_idle) * 100.0;\n\n    cpu->sys_load = (double)delta_system / (double)(delta_system\n                                                      + delta_user\n                                                      + delta_idle) * 100.0;\n\n    cpu->total_load = cpu->user_load + cpu->sys_load;\n  }\n\n  cpu->prev_load = cpu->load;\n  cpu->has_prev_load = true;\n}\n"
        }
    ]
}