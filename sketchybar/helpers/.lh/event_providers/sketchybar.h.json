{
    "sourceFile": "event_providers/sketchybar.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1720024539956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720024691470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,8 +105,10 @@\n   formatted_message[caret] = '\\0';\n   return caret + 1;\n }\n \n+fail_count = 0;\n+\n static inline void sketchybar(char* message) {\n   char formatted_message[strlen(message) + 2];\n   uint32_t length = format_message(message, formatted_message);\n   if (!length) return;\n@@ -116,8 +118,10 @@\n     g_mach_port = mach_get_bs_port();\n     if (!mach_send_message(g_mach_port, formatted_message, length)) {\n       printf(\"[NO SKETCHYBAR] - %s\\n\", message);\n       // No sketchybar instance running, exit.\n-      exit(0);\n+      if (fail_count++ > 10) {\n+        exit(0);\n+      }\n     }\n   }\n }\n"
                },
                {
                    "date": 1720024713593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n   formatted_message[caret] = '\\0';\n   return caret + 1;\n }\n \n-fail_count = 0;\n+global int fail_count = 0;\n \n static inline void sketchybar(char* message) {\n   char formatted_message[strlen(message) + 2];\n   uint32_t length = format_message(message, formatted_message);\n"
                },
                {
                    "date": 1720024719134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n   formatted_message[caret] = '\\0';\n   return caret + 1;\n }\n \n-global int fail_count = 0;\n+int fail_count = 0;\n \n static inline void sketchybar(char* message) {\n   char formatted_message[strlen(message) + 2];\n   uint32_t length = format_message(message, formatted_message);\n"
                },
                {
                    "date": 1720025832766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n   formatted_message[caret] = '\\0';\n   return caret + 1;\n }\n \n-int fail_count = 0;\n+extern int fail_count = 0;\n \n static inline void sketchybar(char* message) {\n   char formatted_message[strlen(message) + 2];\n   uint32_t length = format_message(message, formatted_message);\n"
                },
                {
                    "date": 1720025857940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n   formatted_message[caret] = '\\0';\n   return caret + 1;\n }\n \n-extern int fail_count = 0;\n+static int fail_count = 0;\n \n static inline void sketchybar(char* message) {\n   char formatted_message[strlen(message) + 2];\n   uint32_t length = format_message(message, formatted_message);\n"
                }
            ],
            "date": 1720024539956,
            "name": "Commit-0",
            "content": "#pragma once\n\n#include <mach/arm/kern_return.h>\n#include <mach/mach.h>\n#include <mach/mach_port.h>\n#include <mach/message.h>\n#include <bootstrap.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <stdio.h>\n\ntypedef char* env;\n\n#define MACH_HANDLER(name) void name(env env)\ntypedef MACH_HANDLER(mach_handler);\n\nstruct mach_message {\n  mach_msg_header_t header;\n  mach_msg_size_t msgh_descriptor_count;\n  mach_msg_ool_descriptor_t descriptor;\n};\n\nstruct mach_buffer {\n  struct mach_message message;\n  mach_msg_trailer_t trailer;\n};\n\nstatic mach_port_t g_mach_port = 0;\n\nstatic inline mach_port_t mach_get_bs_port() {\n  mach_port_name_t task = mach_task_self();\n\n  mach_port_t bs_port;\n  if (task_get_special_port(task,\n                            TASK_BOOTSTRAP_PORT,\n                            &bs_port            ) != KERN_SUCCESS) {\n    return 0;\n  }\n\n  char* name = getenv(\"BAR_NAME\");\n  if (!name) name = \"sketchybar\";\n  uint32_t lookup_len = 16 + strlen(name);\n\n  char buffer[lookup_len];\n  snprintf(buffer, lookup_len, \"git.felix.%s\", name);\n\n  mach_port_t port;\n  if (bootstrap_look_up(bs_port, buffer, &port) != KERN_SUCCESS) return 0;\n  return port;\n}\n\nstatic inline bool mach_send_message(mach_port_t port, char* message, uint32_t len) {\n  if (!message || !port) {\n    return false;\n  }\n\n  struct mach_message msg = { 0 };\n  msg.header.msgh_remote_port = port;\n  msg.header.msgh_local_port = 0;\n  msg.header.msgh_id = 0;\n  msg.header.msgh_bits = MACH_MSGH_BITS_SET(MACH_MSG_TYPE_COPY_SEND,\n                                            MACH_MSG_TYPE_MAKE_SEND,\n                                            0,\n                                            MACH_MSGH_BITS_COMPLEX       );\n\n  msg.header.msgh_size = sizeof(struct mach_message);\n  msg.msgh_descriptor_count = 1;\n  msg.descriptor.address = message;\n  msg.descriptor.size = len * sizeof(char);\n  msg.descriptor.copy = MACH_MSG_VIRTUAL_COPY;\n  msg.descriptor.deallocate = false;\n  msg.descriptor.type = MACH_MSG_OOL_DESCRIPTOR;\n\n  kern_return_t err = mach_msg(&msg.header,\n                               MACH_SEND_MSG,\n                               sizeof(struct mach_message),\n                               0,\n                               MACH_PORT_NULL,\n                               MACH_MSG_TIMEOUT_NONE,\n                               MACH_PORT_NULL              );\n\n  return err == KERN_SUCCESS;\n}\n\nstatic inline uint32_t format_message(char* message, char* formatted_message) {\n  // This is not actually robust, switch to stack based messaging.\n  char outer_quote = 0;\n  uint32_t caret = 0;\n  uint32_t message_length = strlen(message) + 1;\n  for (int i = 0; i < message_length; ++i) {\n    if (message[i] == '\"' || message[i] == '\\'') {\n      if (outer_quote && outer_quote == message[i]) outer_quote = 0;\n      else if (!outer_quote) outer_quote = message[i];\n      continue;\n    }\n    formatted_message[caret] = message[i];\n    if (message[i] == ' ' && !outer_quote) formatted_message[caret] = '\\0';\n    caret++;\n  }\n\n  if (caret > 0 && formatted_message[caret] == '\\0'\n      && formatted_message[caret - 1] == '\\0') {\n    caret--;\n  }\n  formatted_message[caret] = '\\0';\n  return caret + 1;\n}\n\nstatic inline void sketchybar(char* message) {\n  char formatted_message[strlen(message) + 2];\n  uint32_t length = format_message(message, formatted_message);\n  if (!length) return;\n\n  if (!g_mach_port) g_mach_port = mach_get_bs_port();\n  if (!mach_send_message(g_mach_port, formatted_message, length)) {\n    g_mach_port = mach_get_bs_port();\n    if (!mach_send_message(g_mach_port, formatted_message, length)) {\n      printf(\"[NO SKETCHYBAR] - %s\\n\", message);\n      // No sketchybar instance running, exit.\n      exit(0);\n    }\n  }\n}\n"
        }
    ]
}